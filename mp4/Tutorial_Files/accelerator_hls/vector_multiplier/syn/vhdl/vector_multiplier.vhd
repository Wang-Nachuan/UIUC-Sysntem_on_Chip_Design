-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vector_multiplier is
generic (
    C_M_AXI_DATA_A_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_A_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_A_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_B_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_B_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_C_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_C_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_A_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_A_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_A_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_B_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_B_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_B_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_C_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_C_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_C_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_DATA_A_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_A_AWREADY : IN STD_LOGIC;
    m_axi_DATA_A_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_A_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_A_WVALID : OUT STD_LOGIC;
    m_axi_DATA_A_WREADY : IN STD_LOGIC;
    m_axi_DATA_A_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_DATA_WIDTH-1 downto 0);
    m_axi_DATA_A_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_A_WLAST : OUT STD_LOGIC;
    m_axi_DATA_A_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_A_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_A_ARREADY : IN STD_LOGIC;
    m_axi_DATA_A_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_A_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_A_RVALID : IN STD_LOGIC;
    m_axi_DATA_A_RREADY : OUT STD_LOGIC;
    m_axi_DATA_A_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_DATA_WIDTH-1 downto 0);
    m_axi_DATA_A_RLAST : IN STD_LOGIC;
    m_axi_DATA_A_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_BVALID : IN STD_LOGIC;
    m_axi_DATA_A_BREADY : OUT STD_LOGIC;
    m_axi_DATA_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_B_AWREADY : IN STD_LOGIC;
    m_axi_DATA_B_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_B_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_WVALID : OUT STD_LOGIC;
    m_axi_DATA_B_WREADY : IN STD_LOGIC;
    m_axi_DATA_B_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_DATA_WIDTH-1 downto 0);
    m_axi_DATA_B_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_B_WLAST : OUT STD_LOGIC;
    m_axi_DATA_B_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_B_ARREADY : IN STD_LOGIC;
    m_axi_DATA_B_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_B_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_RVALID : IN STD_LOGIC;
    m_axi_DATA_B_RREADY : OUT STD_LOGIC;
    m_axi_DATA_B_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_DATA_WIDTH-1 downto 0);
    m_axi_DATA_B_RLAST : IN STD_LOGIC;
    m_axi_DATA_B_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_BVALID : IN STD_LOGIC;
    m_axi_DATA_B_BREADY : OUT STD_LOGIC;
    m_axi_DATA_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_C_AWREADY : IN STD_LOGIC;
    m_axi_DATA_C_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_C_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_WVALID : OUT STD_LOGIC;
    m_axi_DATA_C_WREADY : IN STD_LOGIC;
    m_axi_DATA_C_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_DATA_WIDTH-1 downto 0);
    m_axi_DATA_C_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_C_WLAST : OUT STD_LOGIC;
    m_axi_DATA_C_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_C_ARREADY : IN STD_LOGIC;
    m_axi_DATA_C_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_C_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_RVALID : IN STD_LOGIC;
    m_axi_DATA_C_RREADY : OUT STD_LOGIC;
    m_axi_DATA_C_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_DATA_WIDTH-1 downto 0);
    m_axi_DATA_C_RLAST : IN STD_LOGIC;
    m_axi_DATA_C_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_BVALID : IN STD_LOGIC;
    m_axi_DATA_C_BREADY : OUT STD_LOGIC;
    m_axi_DATA_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_BUSER_WIDTH-1 downto 0);
    s_axi_CTL_AWVALID : IN STD_LOGIC;
    s_axi_CTL_AWREADY : OUT STD_LOGIC;
    s_axi_CTL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_ADDR_WIDTH-1 downto 0);
    s_axi_CTL_WVALID : IN STD_LOGIC;
    s_axi_CTL_WREADY : OUT STD_LOGIC;
    s_axi_CTL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH-1 downto 0);
    s_axi_CTL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTL_ARVALID : IN STD_LOGIC;
    s_axi_CTL_ARREADY : OUT STD_LOGIC;
    s_axi_CTL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_ADDR_WIDTH-1 downto 0);
    s_axi_CTL_RVALID : OUT STD_LOGIC;
    s_axi_CTL_RREADY : IN STD_LOGIC;
    s_axi_CTL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH-1 downto 0);
    s_axi_CTL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTL_BVALID : OUT STD_LOGIC;
    s_axi_CTL_BREADY : IN STD_LOGIC;
    s_axi_CTL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of vector_multiplier is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "vector_multiplier,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=79,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=3,HLS_SYN_FF=1994,HLS_SYN_LUT=2280,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (31 downto 0);
    signal b : STD_LOGIC_VECTOR (31 downto 0);
    signal c : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_A_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal DATA_A_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln7_reg_274 : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_B_blk_n_AR : STD_LOGIC;
    signal DATA_B_blk_n_R : STD_LOGIC;
    signal DATA_C_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal DATA_C_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln7_reg_274_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal DATA_A_AWREADY : STD_LOGIC;
    signal DATA_A_WREADY : STD_LOGIC;
    signal DATA_A_ARVALID : STD_LOGIC;
    signal DATA_A_ARREADY : STD_LOGIC;
    signal DATA_A_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_A_RVALID : STD_LOGIC;
    signal DATA_A_RREADY : STD_LOGIC;
    signal DATA_A_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_A_RLAST : STD_LOGIC;
    signal DATA_A_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_A_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_A_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_A_BVALID : STD_LOGIC;
    signal DATA_A_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_A_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_A_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_B_AWREADY : STD_LOGIC;
    signal DATA_B_WREADY : STD_LOGIC;
    signal DATA_B_ARVALID : STD_LOGIC;
    signal DATA_B_ARREADY : STD_LOGIC;
    signal DATA_B_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_B_RVALID : STD_LOGIC;
    signal DATA_B_RREADY : STD_LOGIC;
    signal DATA_B_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_B_RLAST : STD_LOGIC;
    signal DATA_B_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_B_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_B_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_B_BVALID : STD_LOGIC;
    signal DATA_B_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_B_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_B_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_AWVALID : STD_LOGIC;
    signal DATA_C_AWREADY : STD_LOGIC;
    signal DATA_C_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_C_WVALID : STD_LOGIC;
    signal DATA_C_WREADY : STD_LOGIC;
    signal DATA_C_ARREADY : STD_LOGIC;
    signal DATA_C_RVALID : STD_LOGIC;
    signal DATA_C_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_C_RLAST : STD_LOGIC;
    signal DATA_C_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_C_BVALID : STD_LOGIC;
    signal DATA_C_BREADY : STD_LOGIC;
    signal DATA_C_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_C_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_154 : STD_LOGIC_VECTOR (6 downto 0);
    signal c5_reg_241 : STD_LOGIC_VECTOR (29 downto 0);
    signal b3_reg_246 : STD_LOGIC_VECTOR (29 downto 0);
    signal a1_reg_251 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal icmp_ln7_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln7_reg_274_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_231_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal DATA_A_addr_read_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_B_addr_read_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln9_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln9_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal empty_4_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_5_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component vector_multiplier_CTL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        a : OUT STD_LOGIC_VECTOR (31 downto 0);
        b : OUT STD_LOGIC_VECTOR (31 downto 0);
        c : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vector_multiplier_DATA_A_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vector_multiplier_DATA_B_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vector_multiplier_DATA_C_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    vector_multiplier_CTL_s_axi_U : component vector_multiplier_CTL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTL_AWVALID,
        AWREADY => s_axi_CTL_AWREADY,
        AWADDR => s_axi_CTL_AWADDR,
        WVALID => s_axi_CTL_WVALID,
        WREADY => s_axi_CTL_WREADY,
        WDATA => s_axi_CTL_WDATA,
        WSTRB => s_axi_CTL_WSTRB,
        ARVALID => s_axi_CTL_ARVALID,
        ARREADY => s_axi_CTL_ARREADY,
        ARADDR => s_axi_CTL_ARADDR,
        RVALID => s_axi_CTL_RVALID,
        RREADY => s_axi_CTL_RREADY,
        RDATA => s_axi_CTL_RDATA,
        RRESP => s_axi_CTL_RRESP,
        BVALID => s_axi_CTL_BVALID,
        BREADY => s_axi_CTL_BREADY,
        BRESP => s_axi_CTL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        a => a,
        b => b,
        c => c);

    vector_multiplier_DATA_A_m_axi_U : component vector_multiplier_DATA_A_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_A_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_A_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_A_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_A_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_A_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_A_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_A_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_A_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_A_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_A_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_A_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_A_AWVALID,
        AWREADY => m_axi_DATA_A_AWREADY,
        AWADDR => m_axi_DATA_A_AWADDR,
        AWID => m_axi_DATA_A_AWID,
        AWLEN => m_axi_DATA_A_AWLEN,
        AWSIZE => m_axi_DATA_A_AWSIZE,
        AWBURST => m_axi_DATA_A_AWBURST,
        AWLOCK => m_axi_DATA_A_AWLOCK,
        AWCACHE => m_axi_DATA_A_AWCACHE,
        AWPROT => m_axi_DATA_A_AWPROT,
        AWQOS => m_axi_DATA_A_AWQOS,
        AWREGION => m_axi_DATA_A_AWREGION,
        AWUSER => m_axi_DATA_A_AWUSER,
        WVALID => m_axi_DATA_A_WVALID,
        WREADY => m_axi_DATA_A_WREADY,
        WDATA => m_axi_DATA_A_WDATA,
        WSTRB => m_axi_DATA_A_WSTRB,
        WLAST => m_axi_DATA_A_WLAST,
        WID => m_axi_DATA_A_WID,
        WUSER => m_axi_DATA_A_WUSER,
        ARVALID => m_axi_DATA_A_ARVALID,
        ARREADY => m_axi_DATA_A_ARREADY,
        ARADDR => m_axi_DATA_A_ARADDR,
        ARID => m_axi_DATA_A_ARID,
        ARLEN => m_axi_DATA_A_ARLEN,
        ARSIZE => m_axi_DATA_A_ARSIZE,
        ARBURST => m_axi_DATA_A_ARBURST,
        ARLOCK => m_axi_DATA_A_ARLOCK,
        ARCACHE => m_axi_DATA_A_ARCACHE,
        ARPROT => m_axi_DATA_A_ARPROT,
        ARQOS => m_axi_DATA_A_ARQOS,
        ARREGION => m_axi_DATA_A_ARREGION,
        ARUSER => m_axi_DATA_A_ARUSER,
        RVALID => m_axi_DATA_A_RVALID,
        RREADY => m_axi_DATA_A_RREADY,
        RDATA => m_axi_DATA_A_RDATA,
        RLAST => m_axi_DATA_A_RLAST,
        RID => m_axi_DATA_A_RID,
        RUSER => m_axi_DATA_A_RUSER,
        RRESP => m_axi_DATA_A_RRESP,
        BVALID => m_axi_DATA_A_BVALID,
        BREADY => m_axi_DATA_A_BREADY,
        BRESP => m_axi_DATA_A_BRESP,
        BID => m_axi_DATA_A_BID,
        BUSER => m_axi_DATA_A_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_A_ARVALID,
        I_ARREADY => DATA_A_ARREADY,
        I_ARADDR => DATA_A_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_40,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_A_RVALID,
        I_RREADY => DATA_A_RREADY,
        I_RDATA => DATA_A_RDATA,
        I_RID => DATA_A_RID,
        I_RUSER => DATA_A_RUSER,
        I_RRESP => DATA_A_RRESP,
        I_RLAST => DATA_A_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_A_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_A_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_A_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_A_BRESP,
        I_BID => DATA_A_BID,
        I_BUSER => DATA_A_BUSER);

    vector_multiplier_DATA_B_m_axi_U : component vector_multiplier_DATA_B_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_B_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_B_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_B_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_B_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_B_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_B_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_B_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_B_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_B_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_B_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_B_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_B_AWVALID,
        AWREADY => m_axi_DATA_B_AWREADY,
        AWADDR => m_axi_DATA_B_AWADDR,
        AWID => m_axi_DATA_B_AWID,
        AWLEN => m_axi_DATA_B_AWLEN,
        AWSIZE => m_axi_DATA_B_AWSIZE,
        AWBURST => m_axi_DATA_B_AWBURST,
        AWLOCK => m_axi_DATA_B_AWLOCK,
        AWCACHE => m_axi_DATA_B_AWCACHE,
        AWPROT => m_axi_DATA_B_AWPROT,
        AWQOS => m_axi_DATA_B_AWQOS,
        AWREGION => m_axi_DATA_B_AWREGION,
        AWUSER => m_axi_DATA_B_AWUSER,
        WVALID => m_axi_DATA_B_WVALID,
        WREADY => m_axi_DATA_B_WREADY,
        WDATA => m_axi_DATA_B_WDATA,
        WSTRB => m_axi_DATA_B_WSTRB,
        WLAST => m_axi_DATA_B_WLAST,
        WID => m_axi_DATA_B_WID,
        WUSER => m_axi_DATA_B_WUSER,
        ARVALID => m_axi_DATA_B_ARVALID,
        ARREADY => m_axi_DATA_B_ARREADY,
        ARADDR => m_axi_DATA_B_ARADDR,
        ARID => m_axi_DATA_B_ARID,
        ARLEN => m_axi_DATA_B_ARLEN,
        ARSIZE => m_axi_DATA_B_ARSIZE,
        ARBURST => m_axi_DATA_B_ARBURST,
        ARLOCK => m_axi_DATA_B_ARLOCK,
        ARCACHE => m_axi_DATA_B_ARCACHE,
        ARPROT => m_axi_DATA_B_ARPROT,
        ARQOS => m_axi_DATA_B_ARQOS,
        ARREGION => m_axi_DATA_B_ARREGION,
        ARUSER => m_axi_DATA_B_ARUSER,
        RVALID => m_axi_DATA_B_RVALID,
        RREADY => m_axi_DATA_B_RREADY,
        RDATA => m_axi_DATA_B_RDATA,
        RLAST => m_axi_DATA_B_RLAST,
        RID => m_axi_DATA_B_RID,
        RUSER => m_axi_DATA_B_RUSER,
        RRESP => m_axi_DATA_B_RRESP,
        BVALID => m_axi_DATA_B_BVALID,
        BREADY => m_axi_DATA_B_BREADY,
        BRESP => m_axi_DATA_B_BRESP,
        BID => m_axi_DATA_B_BID,
        BUSER => m_axi_DATA_B_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_B_ARVALID,
        I_ARREADY => DATA_B_ARREADY,
        I_ARADDR => DATA_B_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_40,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_B_RVALID,
        I_RREADY => DATA_B_RREADY,
        I_RDATA => DATA_B_RDATA,
        I_RID => DATA_B_RID,
        I_RUSER => DATA_B_RUSER,
        I_RRESP => DATA_B_RRESP,
        I_RLAST => DATA_B_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_B_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_B_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_B_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_B_BRESP,
        I_BID => DATA_B_BID,
        I_BUSER => DATA_B_BUSER);

    vector_multiplier_DATA_C_m_axi_U : component vector_multiplier_DATA_C_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_C_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_C_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_C_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_C_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_C_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_C_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_C_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_C_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_C_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_C_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_C_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_C_AWVALID,
        AWREADY => m_axi_DATA_C_AWREADY,
        AWADDR => m_axi_DATA_C_AWADDR,
        AWID => m_axi_DATA_C_AWID,
        AWLEN => m_axi_DATA_C_AWLEN,
        AWSIZE => m_axi_DATA_C_AWSIZE,
        AWBURST => m_axi_DATA_C_AWBURST,
        AWLOCK => m_axi_DATA_C_AWLOCK,
        AWCACHE => m_axi_DATA_C_AWCACHE,
        AWPROT => m_axi_DATA_C_AWPROT,
        AWQOS => m_axi_DATA_C_AWQOS,
        AWREGION => m_axi_DATA_C_AWREGION,
        AWUSER => m_axi_DATA_C_AWUSER,
        WVALID => m_axi_DATA_C_WVALID,
        WREADY => m_axi_DATA_C_WREADY,
        WDATA => m_axi_DATA_C_WDATA,
        WSTRB => m_axi_DATA_C_WSTRB,
        WLAST => m_axi_DATA_C_WLAST,
        WID => m_axi_DATA_C_WID,
        WUSER => m_axi_DATA_C_WUSER,
        ARVALID => m_axi_DATA_C_ARVALID,
        ARREADY => m_axi_DATA_C_ARREADY,
        ARADDR => m_axi_DATA_C_ARADDR,
        ARID => m_axi_DATA_C_ARID,
        ARLEN => m_axi_DATA_C_ARLEN,
        ARSIZE => m_axi_DATA_C_ARSIZE,
        ARBURST => m_axi_DATA_C_ARBURST,
        ARLOCK => m_axi_DATA_C_ARLOCK,
        ARCACHE => m_axi_DATA_C_ARCACHE,
        ARPROT => m_axi_DATA_C_ARPROT,
        ARQOS => m_axi_DATA_C_ARQOS,
        ARREGION => m_axi_DATA_C_ARREGION,
        ARUSER => m_axi_DATA_C_ARUSER,
        RVALID => m_axi_DATA_C_RVALID,
        RREADY => m_axi_DATA_C_RREADY,
        RDATA => m_axi_DATA_C_RDATA,
        RLAST => m_axi_DATA_C_RLAST,
        RID => m_axi_DATA_C_RID,
        RUSER => m_axi_DATA_C_RUSER,
        RRESP => m_axi_DATA_C_RRESP,
        BVALID => m_axi_DATA_C_BVALID,
        BREADY => m_axi_DATA_C_BREADY,
        BRESP => m_axi_DATA_C_BRESP,
        BID => m_axi_DATA_C_BID,
        BUSER => m_axi_DATA_C_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => DATA_C_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_C_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => DATA_C_RDATA,
        I_RID => DATA_C_RID,
        I_RUSER => DATA_C_RUSER,
        I_RRESP => DATA_C_RRESP,
        I_RLAST => DATA_C_RLAST,
        I_AWVALID => DATA_C_AWVALID,
        I_AWREADY => DATA_C_AWREADY,
        I_AWADDR => DATA_C_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_40,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => DATA_C_WVALID,
        I_WREADY => DATA_C_WREADY,
        I_WDATA => mul_ln9_reg_293,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => DATA_C_BVALID,
        I_BREADY => DATA_C_BREADY,
        I_BRESP => DATA_C_BRESP,
        I_BID => DATA_C_BID,
        I_BUSER => DATA_C_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = DATA_C_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = DATA_C_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln7_fu_225_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_154 <= i_fu_231_p2;
            elsif (((ap_const_logic_1 = DATA_C_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_0_reg_154 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln7_reg_274 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                DATA_A_addr_read_reg_283 <= DATA_A_RDATA;
                DATA_B_addr_read_reg_288 <= DATA_B_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                a1_reg_251 <= a(31 downto 2);
                b3_reg_246 <= b(31 downto 2);
                c5_reg_241 <= c(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln7_reg_274 <= icmp_ln7_fu_225_p2;
                icmp_ln7_reg_274_pp0_iter1_reg <= icmp_ln7_reg_274;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln7_reg_274_pp0_iter2_reg <= icmp_ln7_reg_274_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln7_reg_274_pp0_iter1_reg = ap_const_lv1_0))) then
                mul_ln9_reg_293 <= mul_ln9_fu_237_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, ap_enable_reg_pp0_iter3, ap_CS_fsm_state17, DATA_C_AWREADY, DATA_C_BVALID, ap_block_state2_io, icmp_ln7_fu_225_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = DATA_C_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln7_fu_225_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln7_fu_225_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = DATA_C_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    DATA_A_ARADDR <= empty_5_fu_205_p1(32 - 1 downto 0);

    DATA_A_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_A_ARVALID <= ap_const_logic_1;
        else 
            DATA_A_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_A_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln7_reg_274, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln7_reg_274 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DATA_A_RREADY <= ap_const_logic_1;
        else 
            DATA_A_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_A_blk_n_AR_assign_proc : process(m_axi_DATA_A_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DATA_A_blk_n_AR <= m_axi_DATA_A_ARREADY;
        else 
            DATA_A_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    DATA_A_blk_n_R_assign_proc : process(m_axi_DATA_A_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln7_reg_274)
    begin
        if (((icmp_ln7_reg_274 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DATA_A_blk_n_R <= m_axi_DATA_A_RVALID;
        else 
            DATA_A_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    DATA_B_ARADDR <= empty_4_fu_195_p1(32 - 1 downto 0);

    DATA_B_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_B_ARVALID <= ap_const_logic_1;
        else 
            DATA_B_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_B_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln7_reg_274, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln7_reg_274 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DATA_B_RREADY <= ap_const_logic_1;
        else 
            DATA_B_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_B_blk_n_AR_assign_proc : process(m_axi_DATA_B_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DATA_B_blk_n_AR <= m_axi_DATA_B_ARREADY;
        else 
            DATA_B_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    DATA_B_blk_n_R_assign_proc : process(m_axi_DATA_B_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln7_reg_274)
    begin
        if (((icmp_ln7_reg_274 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DATA_B_blk_n_R <= m_axi_DATA_B_RVALID;
        else 
            DATA_B_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    DATA_C_AWADDR <= empty_fu_215_p1(32 - 1 downto 0);

    DATA_C_AWVALID_assign_proc : process(ap_CS_fsm_state8, DATA_C_AWREADY)
    begin
        if (((ap_const_logic_1 = DATA_C_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            DATA_C_AWVALID <= ap_const_logic_1;
        else 
            DATA_C_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C_BREADY_assign_proc : process(ap_CS_fsm_state17, DATA_C_BVALID)
    begin
        if (((ap_const_logic_1 = DATA_C_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            DATA_C_BREADY <= ap_const_logic_1;
        else 
            DATA_C_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln7_reg_274_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln7_reg_274_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            DATA_C_WVALID <= ap_const_logic_1;
        else 
            DATA_C_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C_blk_n_AW_assign_proc : process(m_axi_DATA_C_AWREADY, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            DATA_C_blk_n_AW <= m_axi_DATA_C_AWREADY;
        else 
            DATA_C_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    DATA_C_blk_n_B_assign_proc : process(m_axi_DATA_C_BVALID, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            DATA_C_blk_n_B <= m_axi_DATA_C_BVALID;
        else 
            DATA_C_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    DATA_C_blk_n_W_assign_proc : process(m_axi_DATA_C_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln7_reg_274_pp0_iter2_reg)
    begin
        if (((icmp_ln7_reg_274_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            DATA_C_blk_n_W <= m_axi_DATA_C_WREADY;
        else 
            DATA_C_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln7_reg_274, DATA_A_RVALID, DATA_B_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_const_logic_0 = DATA_B_RVALID) and (icmp_ln7_reg_274 = ap_const_lv1_0)) or ((ap_const_logic_0 = DATA_A_RVALID) and (icmp_ln7_reg_274 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln7_reg_274, ap_enable_reg_pp0_iter3, DATA_A_RVALID, DATA_B_RVALID, ap_block_state12_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_const_logic_0 = DATA_B_RVALID) and (icmp_ln7_reg_274 = ap_const_lv1_0)) or ((ap_const_logic_0 = DATA_A_RVALID) and (icmp_ln7_reg_274 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln7_reg_274, ap_enable_reg_pp0_iter3, DATA_A_RVALID, DATA_B_RVALID, ap_block_state12_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_const_logic_0 = DATA_B_RVALID) and (icmp_ln7_reg_274 = ap_const_lv1_0)) or ((ap_const_logic_0 = DATA_A_RVALID) and (icmp_ln7_reg_274 = ap_const_lv1_0)))));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln7_reg_274, DATA_A_RVALID, DATA_B_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= (((ap_const_logic_0 = DATA_B_RVALID) and (icmp_ln7_reg_274 = ap_const_lv1_0)) or ((ap_const_logic_0 = DATA_A_RVALID) and (icmp_ln7_reg_274 = ap_const_lv1_0)));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_io_assign_proc : process(icmp_ln7_reg_274_pp0_iter2_reg, DATA_C_WREADY)
    begin
                ap_block_state12_io <= ((ap_const_logic_0 = DATA_C_WREADY) and (icmp_ln7_reg_274_pp0_iter2_reg = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(DATA_A_ARREADY, DATA_B_ARREADY)
    begin
                ap_block_state2_io <= ((ap_const_logic_0 = DATA_B_ARREADY) or (ap_const_logic_0 = DATA_A_ARREADY));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln7_fu_225_p2)
    begin
        if ((icmp_ln7_fu_225_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state17, DATA_C_BVALID)
    begin
        if (((ap_const_logic_1 = DATA_C_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17, DATA_C_BVALID)
    begin
        if (((ap_const_logic_1 = DATA_C_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_4_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b3_reg_246),64));
    empty_5_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a1_reg_251),64));
    empty_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c5_reg_241),64));
    i_fu_231_p2 <= std_logic_vector(unsigned(i_0_reg_154) + unsigned(ap_const_lv7_1));
    icmp_ln7_fu_225_p2 <= "1" when (i_0_reg_154 = ap_const_lv7_40) else "0";
    mul_ln9_fu_237_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(DATA_A_addr_read_reg_283) * signed(DATA_B_addr_read_reg_288))), 32));
end behav;
