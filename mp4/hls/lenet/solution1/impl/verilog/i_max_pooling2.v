// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module i_max_pooling2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] c_fu_185_p2;
reg   [2:0] c_reg_540;
wire    ap_CS_fsm_state2;
wire  signed [9:0] sext_ln48_fu_221_p1;
reg  signed [9:0] sext_ln48_reg_545;
wire   [0:0] icmp_ln40_fu_179_p2;
wire  signed [8:0] sext_ln50_fu_255_p1;
reg  signed [8:0] sext_ln50_reg_550;
wire   [3:0] h_fu_265_p2;
reg   [3:0] h_reg_558;
wire    ap_CS_fsm_state3;
wire   [4:0] shl_ln_fu_271_p3;
reg   [4:0] shl_ln_reg_563;
wire   [0:0] icmp_ln41_fu_259_p2;
wire   [11:0] sub_ln50_1_fu_312_p2;
reg   [11:0] sub_ln50_1_reg_568;
wire   [3:0] w_fu_324_p2;
reg   [3:0] w_reg_576;
wire    ap_CS_fsm_state4;
wire   [4:0] shl_ln48_1_fu_330_p3;
reg   [4:0] shl_ln48_1_reg_581;
wire   [0:0] icmp_ln42_fu_318_p2;
wire   [1:0] i_fu_348_p2;
reg   [1:0] i_reg_589;
wire    ap_CS_fsm_state5;
wire   [13:0] sub_ln48_1_fu_392_p2;
reg   [13:0] sub_ln48_1_reg_594;
wire   [0:0] icmp_ln45_fu_342_p2;
wire   [1:0] j_fu_422_p2;
reg   [1:0] j_reg_602;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln47_fu_416_p2;
reg   [31:0] input_load_reg_612;
wire    ap_CS_fsm_state7;
wire   [31:0] max_value_fu_530_p3;
wire    ap_CS_fsm_state8;
reg   [2:0] c_0_reg_92;
reg   [3:0] h_0_reg_103;
reg   [3:0] w_0_reg_114;
reg   [31:0] max_value_0_reg_126;
reg   [1:0] i_0_reg_139;
reg   [31:0] max_value_1_reg_150;
reg   [1:0] j_0_reg_162;
wire   [63:0] zext_ln50_4_fu_407_p1;
wire   [63:0] zext_ln48_4_fu_442_p1;
wire   [7:0] tmp_6_fu_191_p3;
wire   [4:0] tmp_7_fu_203_p3;
wire   [8:0] zext_ln48_fu_199_p1;
wire   [8:0] zext_ln48_1_fu_211_p1;
wire   [8:0] sub_ln48_fu_215_p2;
wire   [6:0] tmp_8_fu_225_p3;
wire   [3:0] tmp_9_fu_237_p3;
wire   [7:0] zext_ln50_fu_233_p1;
wire   [7:0] zext_ln50_1_fu_245_p1;
wire   [7:0] sub_ln50_fu_249_p2;
wire   [8:0] zext_ln50_2_fu_279_p1;
wire   [8:0] add_ln50_fu_283_p2;
wire   [7:0] trunc_ln50_fu_288_p1;
wire   [9:0] tmp_10_fu_300_p3;
wire   [11:0] p_shl4_cast_fu_292_p3;
wire  signed [11:0] sext_ln50_1_fu_308_p1;
wire   [4:0] zext_ln45_fu_338_p1;
wire   [4:0] add_ln48_fu_354_p2;
wire   [9:0] zext_ln48_2_fu_359_p1;
wire   [9:0] add_ln48_2_fu_363_p2;
wire   [8:0] trunc_ln48_fu_368_p1;
wire   [11:0] tmp_11_fu_380_p3;
wire   [13:0] p_shl6_cast_fu_372_p3;
wire  signed [13:0] sext_ln48_1_fu_388_p1;
wire   [11:0] zext_ln50_3_fu_398_p1;
wire   [11:0] add_ln50_1_fu_402_p2;
wire   [4:0] zext_ln47_fu_412_p1;
wire   [4:0] add_ln48_1_fu_428_p2;
wire   [13:0] zext_ln48_3_fu_433_p1;
wire   [13:0] add_ln48_3_fu_437_p2;
wire   [31:0] bitcast_ln48_fu_447_p1;
wire   [31:0] bitcast_ln48_1_fu_465_p1;
wire   [7:0] tmp_fu_451_p4;
wire   [22:0] trunc_ln48_1_fu_461_p1;
wire   [0:0] icmp_ln48_1_fu_488_p2;
wire   [0:0] icmp_ln48_fu_482_p2;
wire   [7:0] tmp_s_fu_468_p4;
wire   [22:0] trunc_ln48_2_fu_478_p1;
wire   [0:0] icmp_ln48_3_fu_506_p2;
wire   [0:0] icmp_ln48_2_fu_500_p2;
wire   [0:0] or_ln48_fu_494_p2;
wire   [0:0] or_ln48_1_fu_512_p2;
wire   [0:0] and_ln48_fu_518_p2;
wire   [0:0] grp_fu_173_p2;
wire   [0:0] and_ln48_1_fu_524_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

lenet_top_fcmp_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
lenet_top_fcmp_32dEe_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(max_value_1_reg_150),
    .din1(input_r_q0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_173_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_92 <= c_reg_540;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_92 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        h_0_reg_103 <= h_reg_558;
    end else if (((icmp_ln40_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        h_0_reg_103 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln47_fu_416_p2 == 1'd1))) begin
        i_0_reg_139 <= i_reg_589;
    end else if (((icmp_ln42_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_139 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_342_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_reg_162 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_0_reg_162 <= j_reg_602;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln47_fu_416_p2 == 1'd1))) begin
        max_value_0_reg_126 <= max_value_1_reg_150;
    end else if (((icmp_ln42_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_value_0_reg_126 <= 32'd3546862757;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_342_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        max_value_1_reg_150 <= max_value_0_reg_126;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        max_value_1_reg_150 <= max_value_fu_530_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        w_0_reg_114 <= 4'd0;
    end else if (((icmp_ln45_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        w_0_reg_114 <= w_reg_576;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_reg_540 <= c_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_reg_558 <= h_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_589 <= i_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_load_reg_612 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_602 <= j_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln48_reg_545[9 : 2] <= sext_ln48_fu_221_p1[9 : 2];
        sext_ln50_reg_550[8 : 1] <= sext_ln50_fu_255_p1[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln48_1_reg_581[4 : 1] <= shl_ln48_1_fu_330_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln_reg_563[4 : 1] <= shl_ln_fu_271_p3[4 : 1];
        sub_ln50_1_reg_568[11 : 1] <= sub_ln50_1_fu_312_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_342_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sub_ln48_1_reg_594[13 : 2] <= sub_ln48_1_fu_392_p2[13 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_reg_576 <= w_fu_324_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln40_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln40_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln41_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln42_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln45_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln47_fu_416_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln48_1_fu_428_p2 = (zext_ln47_fu_412_p1 + shl_ln48_1_reg_581);

assign add_ln48_2_fu_363_p2 = ($signed(sext_ln48_reg_545) + $signed(zext_ln48_2_fu_359_p1));

assign add_ln48_3_fu_437_p2 = (sub_ln48_1_reg_594 + zext_ln48_3_fu_433_p1);

assign add_ln48_fu_354_p2 = (zext_ln45_fu_338_p1 + shl_ln_reg_563);

assign add_ln50_1_fu_402_p2 = (sub_ln50_1_reg_568 + zext_ln50_3_fu_398_p1);

assign add_ln50_fu_283_p2 = ($signed(zext_ln50_2_fu_279_p1) + $signed(sext_ln50_reg_550));

assign and_ln48_1_fu_524_p2 = (grp_fu_173_p2 & and_ln48_fu_518_p2);

assign and_ln48_fu_518_p2 = (or_ln48_fu_494_p2 & or_ln48_1_fu_512_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln48_1_fu_465_p1 = input_load_reg_612;

assign bitcast_ln48_fu_447_p1 = max_value_1_reg_150;

assign c_fu_185_p2 = (c_0_reg_92 + 3'd1);

assign h_fu_265_p2 = (h_0_reg_103 + 4'd1);

assign i_fu_348_p2 = (i_0_reg_139 + 2'd1);

assign icmp_ln40_fu_179_p2 = ((c_0_reg_92 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_259_p2 = ((h_0_reg_103 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_318_p2 = ((w_0_reg_114 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_342_p2 = ((i_0_reg_139 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_416_p2 = ((j_0_reg_162 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln48_1_fu_488_p2 = ((trunc_ln48_1_fu_461_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_2_fu_500_p2 = ((tmp_s_fu_468_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln48_3_fu_506_p2 = ((trunc_ln48_2_fu_478_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_482_p2 = ((tmp_fu_451_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln48_4_fu_442_p1;

assign j_fu_422_p2 = (j_0_reg_162 + 2'd1);

assign max_value_fu_530_p3 = ((and_ln48_1_fu_524_p2[0:0] === 1'b1) ? max_value_1_reg_150 : input_load_reg_612);

assign or_ln48_1_fu_512_p2 = (icmp_ln48_3_fu_506_p2 | icmp_ln48_2_fu_500_p2);

assign or_ln48_fu_494_p2 = (icmp_ln48_fu_482_p2 | icmp_ln48_1_fu_488_p2);

assign output_r_address0 = zext_ln50_4_fu_407_p1;

assign output_r_d0 = max_value_0_reg_126;

assign p_shl4_cast_fu_292_p3 = {{trunc_ln50_fu_288_p1}, {4'd0}};

assign p_shl6_cast_fu_372_p3 = {{trunc_ln48_fu_368_p1}, {5'd0}};

assign sext_ln48_1_fu_388_p1 = $signed(tmp_11_fu_380_p3);

assign sext_ln48_fu_221_p1 = $signed(sub_ln48_fu_215_p2);

assign sext_ln50_1_fu_308_p1 = $signed(tmp_10_fu_300_p3);

assign sext_ln50_fu_255_p1 = $signed(sub_ln50_fu_249_p2);

assign shl_ln48_1_fu_330_p3 = {{w_0_reg_114}, {1'd0}};

assign shl_ln_fu_271_p3 = {{h_0_reg_103}, {1'd0}};

assign sub_ln48_1_fu_392_p2 = ($signed(p_shl6_cast_fu_372_p3) - $signed(sext_ln48_1_fu_388_p1));

assign sub_ln48_fu_215_p2 = (zext_ln48_fu_199_p1 - zext_ln48_1_fu_211_p1);

assign sub_ln50_1_fu_312_p2 = ($signed(p_shl4_cast_fu_292_p3) - $signed(sext_ln50_1_fu_308_p1));

assign sub_ln50_fu_249_p2 = (zext_ln50_fu_233_p1 - zext_ln50_1_fu_245_p1);

assign tmp_10_fu_300_p3 = {{add_ln50_fu_283_p2}, {1'd0}};

assign tmp_11_fu_380_p3 = {{add_ln48_2_fu_363_p2}, {2'd0}};

assign tmp_6_fu_191_p3 = {{c_0_reg_92}, {5'd0}};

assign tmp_7_fu_203_p3 = {{c_0_reg_92}, {2'd0}};

assign tmp_8_fu_225_p3 = {{c_0_reg_92}, {4'd0}};

assign tmp_9_fu_237_p3 = {{c_0_reg_92}, {1'd0}};

assign tmp_fu_451_p4 = {{bitcast_ln48_fu_447_p1[30:23]}};

assign tmp_s_fu_468_p4 = {{bitcast_ln48_1_fu_465_p1[30:23]}};

assign trunc_ln48_1_fu_461_p1 = bitcast_ln48_fu_447_p1[22:0];

assign trunc_ln48_2_fu_478_p1 = bitcast_ln48_1_fu_465_p1[22:0];

assign trunc_ln48_fu_368_p1 = add_ln48_2_fu_363_p2[8:0];

assign trunc_ln50_fu_288_p1 = add_ln50_fu_283_p2[7:0];

assign w_fu_324_p2 = (w_0_reg_114 + 4'd1);

assign zext_ln45_fu_338_p1 = i_0_reg_139;

assign zext_ln47_fu_412_p1 = j_0_reg_162;

assign zext_ln48_1_fu_211_p1 = tmp_7_fu_203_p3;

assign zext_ln48_2_fu_359_p1 = add_ln48_fu_354_p2;

assign zext_ln48_3_fu_433_p1 = add_ln48_1_fu_428_p2;

assign zext_ln48_4_fu_442_p1 = add_ln48_3_fu_437_p2;

assign zext_ln48_fu_199_p1 = tmp_6_fu_191_p3;

assign zext_ln50_1_fu_245_p1 = tmp_9_fu_237_p3;

assign zext_ln50_2_fu_279_p1 = h_0_reg_103;

assign zext_ln50_3_fu_398_p1 = w_0_reg_114;

assign zext_ln50_4_fu_407_p1 = add_ln50_1_fu_402_p2;

assign zext_ln50_fu_233_p1 = tmp_8_fu_225_p3;

always @ (posedge ap_clk) begin
    sext_ln48_reg_545[1:0] <= 2'b00;
    sext_ln50_reg_550[0] <= 1'b0;
    shl_ln_reg_563[0] <= 1'b0;
    sub_ln50_1_reg_568[0] <= 1'b0;
    shl_ln48_1_reg_581[0] <= 1'b0;
    sub_ln48_1_reg_594[1:0] <= 2'b00;
end

endmodule //i_max_pooling2
