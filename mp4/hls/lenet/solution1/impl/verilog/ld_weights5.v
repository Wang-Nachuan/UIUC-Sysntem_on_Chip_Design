// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ld_weights5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights5_address0,
        weights5_ce0,
        weights5_q0,
        weights5_buf_address0,
        weights5_buf_ce0,
        weights5_buf_we0,
        weights5_buf_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] weights5_address0;
output   weights5_ce0;
input  [31:0] weights5_q0;
output  [15:0] weights5_buf_address0;
output   weights5_buf_ce0;
output   weights5_buf_we0;
output  [31:0] weights5_buf_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weights5_ce0;
reg weights5_buf_ce0;
reg weights5_buf_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_119_p2;
reg   [6:0] i_reg_252;
wire    ap_CS_fsm_state2;
wire   [11:0] zext_ln202_fu_133_p1;
reg   [11:0] zext_ln202_reg_257;
wire   [0:0] icmp_ln201_fu_113_p2;
wire   [4:0] j_fu_143_p2;
reg   [4:0] j_reg_265;
wire    ap_CS_fsm_state3;
wire   [63:0] add_ln205_1_fu_174_p2;
reg   [63:0] add_ln205_1_reg_270;
wire   [0:0] icmp_ln202_fu_137_p2;
wire   [2:0] k_fu_186_p2;
reg   [2:0] k_reg_278;
wire    ap_CS_fsm_state4;
wire   [16:0] add_ln205_3_fu_217_p2;
reg   [16:0] add_ln205_3_reg_283;
wire   [0:0] icmp_ln203_fu_180_p2;
wire   [2:0] l_fu_229_p2;
reg   [2:0] l_reg_291;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln205_5_fu_244_p1;
reg   [63:0] zext_ln205_5_reg_296;
wire   [0:0] icmp_ln204_fu_223_p2;
reg   [6:0] i_0_reg_69;
reg   [4:0] j_0_reg_80;
reg   [2:0] k_0_reg_91;
reg   [2:0] l_0_reg_102;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_fu_125_p3;
wire   [11:0] zext_ln205_fu_149_p1;
wire   [11:0] add_ln205_fu_153_p2;
wire   [13:0] tmp_1_fu_162_p3;
wire   [63:0] zext_ln205_1_fu_158_p1;
wire   [63:0] zext_ln205_3_fu_170_p1;
wire   [63:0] zext_ln205_2_fu_192_p1;
wire   [63:0] add_ln205_2_fu_196_p2;
wire   [14:0] trunc_ln205_1_fu_205_p1;
wire   [16:0] trunc_ln205_fu_201_p1;
wire   [16:0] p_shl1_cast_fu_209_p3;
wire   [16:0] zext_ln205_4_fu_235_p1;
wire   [16:0] add_ln205_4_fu_239_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_69 <= i_reg_252;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_69 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_80 <= j_reg_265;
    end else if (((icmp_ln201_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_80 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln204_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        k_0_reg_91 <= k_reg_278;
    end else if (((icmp_ln202_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_91 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        l_0_reg_102 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        l_0_reg_102 <= l_reg_291;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln205_1_reg_270 <= add_ln205_1_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln205_3_reg_283 <= add_ln205_3_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_252 <= i_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_265 <= j_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_278 <= k_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        l_reg_291 <= l_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln201_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln202_reg_257[10 : 4] <= zext_ln202_fu_133_p1[10 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln204_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln205_5_reg_296[16 : 0] <= zext_ln205_5_fu_244_p1[16 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln201_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln201_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights5_buf_ce0 = 1'b1;
    end else begin
        weights5_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights5_buf_we0 = 1'b1;
    end else begin
        weights5_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights5_ce0 = 1'b1;
    end else begin
        weights5_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln201_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln202_fu_137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln203_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln204_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln205_1_fu_174_p2 = (zext_ln205_1_fu_158_p1 + zext_ln205_3_fu_170_p1);

assign add_ln205_2_fu_196_p2 = (add_ln205_1_reg_270 + zext_ln205_2_fu_192_p1);

assign add_ln205_3_fu_217_p2 = (trunc_ln205_fu_201_p1 + p_shl1_cast_fu_209_p3);

assign add_ln205_4_fu_239_p2 = (add_ln205_3_reg_283 + zext_ln205_4_fu_235_p1);

assign add_ln205_fu_153_p2 = (zext_ln202_reg_257 + zext_ln205_fu_149_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign i_fu_119_p2 = (i_0_reg_69 + 7'd1);

assign icmp_ln201_fu_113_p2 = ((i_0_reg_69 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_137_p2 = ((j_0_reg_80 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_180_p2 = ((k_0_reg_91 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln204_fu_223_p2 = ((l_0_reg_102 == 3'd5) ? 1'b1 : 1'b0);

assign j_fu_143_p2 = (j_0_reg_80 + 5'd1);

assign k_fu_186_p2 = (k_0_reg_91 + 3'd1);

assign l_fu_229_p2 = (l_0_reg_102 + 3'd1);

assign p_shl1_cast_fu_209_p3 = {{trunc_ln205_1_fu_205_p1}, {2'd0}};

assign tmp_1_fu_162_p3 = {{add_ln205_fu_153_p2}, {2'd0}};

assign tmp_fu_125_p3 = {{i_0_reg_69}, {4'd0}};

assign trunc_ln205_1_fu_205_p1 = add_ln205_2_fu_196_p2[14:0];

assign trunc_ln205_fu_201_p1 = add_ln205_2_fu_196_p2[16:0];

assign weights5_address0 = zext_ln205_5_fu_244_p1;

assign weights5_buf_address0 = zext_ln205_5_reg_296;

assign weights5_buf_d0 = weights5_q0;

assign zext_ln202_fu_133_p1 = tmp_fu_125_p3;

assign zext_ln205_1_fu_158_p1 = add_ln205_fu_153_p2;

assign zext_ln205_2_fu_192_p1 = k_0_reg_91;

assign zext_ln205_3_fu_170_p1 = tmp_1_fu_162_p3;

assign zext_ln205_4_fu_235_p1 = l_0_reg_102;

assign zext_ln205_5_fu_244_p1 = add_ln205_4_fu_239_p2;

assign zext_ln205_fu_149_p1 = j_0_reg_80;

always @ (posedge ap_clk) begin
    zext_ln202_reg_257[3:0] <= 4'b0000;
    zext_ln202_reg_257[11] <= 1'b0;
    zext_ln205_5_reg_296[63:17] <= 47'b00000000000000000000000000000000000000000000000;
end

endmodule //ld_weights5
