// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ld_weights3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights3_address0,
        weights3_ce0,
        weights3_q0,
        weights3_buf_address0,
        weights3_buf_ce0,
        weights3_buf_we0,
        weights3_buf_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] weights3_address0;
output   weights3_ce0;
input  [31:0] weights3_q0;
output  [11:0] weights3_buf_address0;
output   weights3_buf_ce0;
output   weights3_buf_we0;
output  [31:0] weights3_buf_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weights3_ce0;
reg weights3_buf_ce0;
reg weights3_buf_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_fu_117_p2;
reg   [4:0] i_reg_272;
wire    ap_CS_fsm_state2;
wire  signed [9:0] sext_ln193_fu_153_p1;
reg  signed [9:0] sext_ln193_reg_277;
wire   [0:0] icmp_ln189_fu_111_p2;
wire   [2:0] j_fu_163_p2;
reg   [2:0] j_reg_285;
wire    ap_CS_fsm_state3;
wire   [63:0] add_ln193_1_fu_194_p2;
reg   [63:0] add_ln193_1_reg_290;
wire   [0:0] icmp_ln190_fu_157_p2;
wire   [2:0] k_fu_206_p2;
reg   [2:0] k_reg_298;
wire    ap_CS_fsm_state4;
wire   [12:0] add_ln193_3_fu_237_p2;
reg   [12:0] add_ln193_3_reg_303;
wire   [0:0] icmp_ln191_fu_200_p2;
wire   [2:0] l_fu_249_p2;
reg   [2:0] l_reg_311;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln193_5_fu_264_p1;
reg   [63:0] zext_ln193_5_reg_316;
wire   [0:0] icmp_ln192_fu_243_p2;
reg   [4:0] i_0_reg_67;
reg   [2:0] j_0_reg_78;
reg   [2:0] k_0_reg_89;
reg   [2:0] l_0_reg_100;
wire    ap_CS_fsm_state6;
wire   [7:0] tmp_fu_123_p3;
wire   [5:0] tmp_s_fu_135_p3;
wire   [8:0] zext_ln193_fu_131_p1;
wire   [8:0] zext_ln193_1_fu_143_p1;
wire   [8:0] sub_ln193_fu_147_p2;
wire   [9:0] zext_ln193_3_fu_169_p1;
wire  signed [9:0] add_ln193_fu_173_p2;
wire   [11:0] tmp_2_fu_182_p3;
wire  signed [63:0] sext_ln193_1_fu_178_p1;
wire  signed [63:0] sext_ln193_2_fu_190_p1;
wire   [63:0] zext_ln193_2_fu_212_p1;
wire   [63:0] add_ln193_2_fu_216_p2;
wire   [10:0] trunc_ln193_1_fu_225_p1;
wire   [12:0] trunc_ln193_fu_221_p1;
wire   [12:0] p_shl3_cast_fu_229_p3;
wire   [12:0] zext_ln193_4_fu_255_p1;
wire   [12:0] add_ln193_4_fu_259_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln190_fu_157_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_67 <= i_reg_272;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_67 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_fu_200_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_78 <= j_reg_285;
    end else if (((icmp_ln189_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_78 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln192_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        k_0_reg_89 <= k_reg_298;
    end else if (((icmp_ln190_fu_157_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_89 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_fu_200_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        l_0_reg_100 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        l_0_reg_100 <= l_reg_311;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln190_fu_157_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln193_1_reg_290 <= add_ln193_1_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_fu_200_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln193_3_reg_303 <= add_ln193_3_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_272 <= i_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_285 <= j_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_298 <= k_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        l_reg_311 <= l_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln189_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln193_reg_277[9 : 1] <= sext_ln193_fu_153_p1[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln192_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln193_5_reg_316[12 : 0] <= zext_ln193_5_fu_264_p1[12 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln189_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln189_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights3_buf_ce0 = 1'b1;
    end else begin
        weights3_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights3_buf_we0 = 1'b1;
    end else begin
        weights3_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights3_ce0 = 1'b1;
    end else begin
        weights3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln189_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln190_fu_157_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln191_fu_200_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln192_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln193_1_fu_194_p2 = ($signed(sext_ln193_1_fu_178_p1) + $signed(sext_ln193_2_fu_190_p1));

assign add_ln193_2_fu_216_p2 = (add_ln193_1_reg_290 + zext_ln193_2_fu_212_p1);

assign add_ln193_3_fu_237_p2 = (trunc_ln193_fu_221_p1 + p_shl3_cast_fu_229_p3);

assign add_ln193_4_fu_259_p2 = (add_ln193_3_reg_303 + zext_ln193_4_fu_255_p1);

assign add_ln193_fu_173_p2 = ($signed(sext_ln193_reg_277) + $signed(zext_ln193_3_fu_169_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign i_fu_117_p2 = (i_0_reg_67 + 5'd1);

assign icmp_ln189_fu_111_p2 = ((i_0_reg_67 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln190_fu_157_p2 = ((j_0_reg_78 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_200_p2 = ((k_0_reg_89 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln192_fu_243_p2 = ((l_0_reg_100 == 3'd5) ? 1'b1 : 1'b0);

assign j_fu_163_p2 = (j_0_reg_78 + 3'd1);

assign k_fu_206_p2 = (k_0_reg_89 + 3'd1);

assign l_fu_249_p2 = (l_0_reg_100 + 3'd1);

assign p_shl3_cast_fu_229_p3 = {{trunc_ln193_1_fu_225_p1}, {2'd0}};

assign sext_ln193_1_fu_178_p1 = add_ln193_fu_173_p2;

assign sext_ln193_2_fu_190_p1 = $signed(tmp_2_fu_182_p3);

assign sext_ln193_fu_153_p1 = $signed(sub_ln193_fu_147_p2);

assign sub_ln193_fu_147_p2 = (zext_ln193_fu_131_p1 - zext_ln193_1_fu_143_p1);

assign tmp_2_fu_182_p3 = {{add_ln193_fu_173_p2}, {2'd0}};

assign tmp_fu_123_p3 = {{i_0_reg_67}, {3'd0}};

assign tmp_s_fu_135_p3 = {{i_0_reg_67}, {1'd0}};

assign trunc_ln193_1_fu_225_p1 = add_ln193_2_fu_216_p2[10:0];

assign trunc_ln193_fu_221_p1 = add_ln193_2_fu_216_p2[12:0];

assign weights3_address0 = zext_ln193_5_fu_264_p1;

assign weights3_buf_address0 = zext_ln193_5_reg_316;

assign weights3_buf_d0 = weights3_q0;

assign zext_ln193_1_fu_143_p1 = tmp_s_fu_135_p3;

assign zext_ln193_2_fu_212_p1 = k_0_reg_89;

assign zext_ln193_3_fu_169_p1 = j_0_reg_78;

assign zext_ln193_4_fu_255_p1 = l_0_reg_100;

assign zext_ln193_5_fu_264_p1 = add_ln193_4_fu_259_p2;

assign zext_ln193_fu_131_p1 = tmp_fu_123_p3;

always @ (posedge ap_clk) begin
    sext_ln193_reg_277[0] <= 1'b0;
    zext_ln193_5_reg_316[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
end

endmodule //ld_weights3
