-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ld_weights5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights5_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    weights5_ce0 : OUT STD_LOGIC;
    weights5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights5_buf_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    weights5_buf_ce0 : OUT STD_LOGIC;
    weights5_buf_we0 : OUT STD_LOGIC;
    weights5_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ld_weights5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_119_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_252 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln202_fu_133_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln202_reg_257 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln201_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_143_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_265 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln205_1_fu_174_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln205_1_reg_270 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln202_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_186_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_278 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln205_3_fu_217_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln205_3_reg_283 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln203_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_fu_229_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_reg_291 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln205_5_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln205_5_reg_296 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln204_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_69 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_reg_80 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_0_reg_91 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_0_reg_102 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_fu_125_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln205_fu_149_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln205_fu_153_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_162_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln205_1_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln205_3_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln205_2_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln205_2_fu_196_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln205_1_fu_205_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln205_fu_201_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_cast_fu_209_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln205_4_fu_235_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln205_4_fu_239_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln202_fu_137_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_69 <= i_reg_252;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_69 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln203_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_80 <= j_reg_265;
            elsif (((icmp_ln201_fu_113_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_80 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_0_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln204_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_0_reg_91 <= k_reg_278;
            elsif (((icmp_ln202_fu_137_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_91 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    l_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln203_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                l_0_reg_102 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                l_0_reg_102 <= l_reg_291;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln202_fu_137_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln205_1_reg_270 <= add_ln205_1_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln203_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln205_3_reg_283 <= add_ln205_3_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_252 <= i_fu_119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_265 <= j_fu_143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_278 <= k_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                l_reg_291 <= l_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln201_fu_113_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln202_reg_257(10 downto 4) <= zext_ln202_fu_133_p1(10 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln204_fu_223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    zext_ln205_5_reg_296(16 downto 0) <= zext_ln205_5_fu_244_p1(16 downto 0);
            end if;
        end if;
    end process;
    zext_ln202_reg_257(3 downto 0) <= "0000";
    zext_ln202_reg_257(11) <= '0';
    zext_ln205_5_reg_296(63 downto 17) <= "00000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln201_fu_113_p2, ap_CS_fsm_state3, icmp_ln202_fu_137_p2, ap_CS_fsm_state4, icmp_ln203_fu_180_p2, ap_CS_fsm_state5, icmp_ln204_fu_223_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln201_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln202_fu_137_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln203_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln204_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln205_1_fu_174_p2 <= std_logic_vector(unsigned(zext_ln205_1_fu_158_p1) + unsigned(zext_ln205_3_fu_170_p1));
    add_ln205_2_fu_196_p2 <= std_logic_vector(unsigned(add_ln205_1_reg_270) + unsigned(zext_ln205_2_fu_192_p1));
    add_ln205_3_fu_217_p2 <= std_logic_vector(unsigned(trunc_ln205_fu_201_p1) + unsigned(p_shl1_cast_fu_209_p3));
    add_ln205_4_fu_239_p2 <= std_logic_vector(unsigned(add_ln205_3_reg_283) + unsigned(zext_ln205_4_fu_235_p1));
    add_ln205_fu_153_p2 <= std_logic_vector(unsigned(zext_ln202_reg_257) + unsigned(zext_ln205_fu_149_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln201_fu_113_p2)
    begin
        if ((((icmp_ln201_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln201_fu_113_p2)
    begin
        if (((icmp_ln201_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_119_p2 <= std_logic_vector(unsigned(i_0_reg_69) + unsigned(ap_const_lv7_1));
    icmp_ln201_fu_113_p2 <= "1" when (i_0_reg_69 = ap_const_lv7_78) else "0";
    icmp_ln202_fu_137_p2 <= "1" when (j_0_reg_80 = ap_const_lv5_10) else "0";
    icmp_ln203_fu_180_p2 <= "1" when (k_0_reg_91 = ap_const_lv3_5) else "0";
    icmp_ln204_fu_223_p2 <= "1" when (l_0_reg_102 = ap_const_lv3_5) else "0";
    j_fu_143_p2 <= std_logic_vector(unsigned(j_0_reg_80) + unsigned(ap_const_lv5_1));
    k_fu_186_p2 <= std_logic_vector(unsigned(k_0_reg_91) + unsigned(ap_const_lv3_1));
    l_fu_229_p2 <= std_logic_vector(unsigned(l_0_reg_102) + unsigned(ap_const_lv3_1));
    p_shl1_cast_fu_209_p3 <= (trunc_ln205_1_fu_205_p1 & ap_const_lv2_0);
    tmp_1_fu_162_p3 <= (add_ln205_fu_153_p2 & ap_const_lv2_0);
    tmp_fu_125_p3 <= (i_0_reg_69 & ap_const_lv4_0);
    trunc_ln205_1_fu_205_p1 <= add_ln205_2_fu_196_p2(15 - 1 downto 0);
    trunc_ln205_fu_201_p1 <= add_ln205_2_fu_196_p2(17 - 1 downto 0);
    weights5_address0 <= zext_ln205_5_fu_244_p1(16 - 1 downto 0);
    weights5_buf_address0 <= zext_ln205_5_reg_296(16 - 1 downto 0);

    weights5_buf_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights5_buf_ce0 <= ap_const_logic_1;
        else 
            weights5_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights5_buf_d0 <= weights5_q0;

    weights5_buf_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights5_buf_we0 <= ap_const_logic_1;
        else 
            weights5_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights5_ce0 <= ap_const_logic_1;
        else 
            weights5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln202_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_125_p3),12));
    zext_ln205_1_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln205_fu_153_p2),64));
    zext_ln205_2_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_91),64));
    zext_ln205_3_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_162_p3),64));
    zext_ln205_4_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_reg_102),17));
    zext_ln205_5_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln205_4_fu_239_p2),64));
    zext_ln205_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_80),12));
end behav;
