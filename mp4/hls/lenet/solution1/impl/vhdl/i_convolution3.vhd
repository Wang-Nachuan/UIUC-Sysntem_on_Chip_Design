-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity i_convolution3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weights_ce0 : OUT STD_LOGIC;
    weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of i_convolution3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_fu_235_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_reg_577 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln77_fu_276_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln77_reg_582 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln68_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_fu_280_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln79_reg_587 : STD_LOGIC_VECTOR (8 downto 0);
    signal bias_addr_reg_592 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_fu_292_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_reg_600 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln79_2_fu_327_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln79_2_reg_605 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln69_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_fu_339_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_613 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal m_fu_355_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_reg_621 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln77_1_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_1_reg_626 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln73_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln75_1_fu_371_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln75_1_reg_631 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_fu_385_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_reg_639 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln77_4_fu_391_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln77_4_reg_644 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln75_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln76_fu_401_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln76_reg_649 : STD_LOGIC_VECTOR (11 downto 0);
    signal ci_fu_411_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ci_reg_657 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln77_3_fu_490_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln77_3_reg_662 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln76_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln77_1_fu_527_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln77_1_reg_667 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln77_2_fu_531_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln77_2_reg_672 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal weights_load_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal input_load_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal bias_load_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln79_3_fu_565_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln79_3_reg_712 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal co_0_reg_115 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_0_reg_126 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln70_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_0_reg_138 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal sum_0_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_0_reg_162 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_1_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_0_reg_185 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_0_reg_208 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln77_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_8_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_9_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_3_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_s_fu_246_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_258_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln77_2_fu_254_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln77_3_fu_266_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln77_fu_270_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln79_fu_298_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln79_1_fu_302_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_315_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_307_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln79_1_fu_323_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln73_fu_345_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln77_fu_365_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln75_fu_375_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln77_1_fu_395_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_421_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_433_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln77_6_fu_429_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln77_7_fu_441_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln77_1_fu_445_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln77_1_fu_451_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln77_2_fu_455_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln77_fu_460_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_472_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_cast_fu_464_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln77_2_fu_480_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln77_2_fu_484_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln77_5_fu_417_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln77_4_fu_495_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_504_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln77_3_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln77_4_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln77_5_fu_516_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln77_6_fu_522_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl6_cast_fu_539_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln77_7_fu_546_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln77_8_fu_551_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln79_2_fu_561_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component lenet_top_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    lenet_top_fadd_32bkb_U23 : component lenet_top_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_219_p0,
        din1 => grp_fu_219_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_219_p2);

    lenet_top_fmul_32cud_U24 : component lenet_top_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_load_reg_687,
        din1 => input_load_reg_692,
        ce => ap_const_logic_1,
        dout => grp_fu_225_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_0_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_379_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ci_0_reg_208 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                ci_0_reg_208 <= ci_reg_657;
            end if; 
        end if;
    end process;

    co_0_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                co_0_reg_115 <= co_reg_577;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                co_0_reg_115 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln70_fu_333_p2 = ap_const_lv1_1))) then 
                h_0_reg_126 <= h_reg_600;
            elsif (((icmp_ln68_fu_229_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                h_0_reg_126 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    m_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_333_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                m_0_reg_162 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln75_fu_379_p2 = ap_const_lv1_1))) then 
                m_0_reg_162 <= m_reg_621;
            end if; 
        end if;
    end process;

    n_0_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln76_fu_405_p2 = ap_const_lv1_1))) then 
                n_0_reg_185 <= n_reg_639;
            elsif (((icmp_ln73_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                n_0_reg_185 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    sum_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_333_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                sum_0_reg_150 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln75_fu_379_p2 = ap_const_lv1_1))) then 
                sum_0_reg_150 <= sum_1_reg_173;
            end if; 
        end if;
    end process;

    sum_1_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln76_fu_405_p2 = ap_const_lv1_1))) then 
                sum_1_reg_173 <= sum_2_reg_196;
            elsif (((icmp_ln73_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_1_reg_173 <= sum_0_reg_150;
            end if; 
        end if;
    end process;

    sum_2_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_379_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_2_reg_196 <= sum_1_reg_173;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                sum_2_reg_196 <= grp_fu_219_p2;
            end if; 
        end if;
    end process;

    w_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                w_0_reg_138 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                w_0_reg_138 <= w_reg_613;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_fu_405_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln77_3_reg_662 <= add_ln77_3_fu_490_p2;
                trunc_ln77_1_reg_667 <= trunc_ln77_1_fu_527_p1;
                trunc_ln77_2_reg_672 <= trunc_ln77_2_fu_531_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    add_ln79_2_reg_605(11 downto 1) <= add_ln79_2_fu_327_p2(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln79_3_reg_712 <= add_ln79_3_fu_565_p2;
                bias_load_reg_707 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_229_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln79_reg_587(8 downto 1) <= add_ln79_fu_280_p2(8 downto 1);
                bias_addr_reg_592 <= zext_ln77_fu_241_p1(4 - 1 downto 0);
                    sext_ln77_reg_582(9 downto 1) <= sext_ln77_fu_276_p1(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ci_reg_657 <= ci_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_reg_577 <= co_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_reg_600 <= h_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                input_load_reg_692 <= input_r_q0;
                weights_load_reg_687 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_reg_621 <= m_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_reg_639 <= n_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_5_reg_697 <= grp_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_reg_717 <= grp_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_reg_613 <= w_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    zext_ln75_1_reg_631(3 downto 0) <= zext_ln75_1_fu_371_p1(3 downto 0);
                    zext_ln77_1_reg_626(2 downto 0) <= zext_ln77_1_fu_361_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_379_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    zext_ln76_reg_649(3 downto 0) <= zext_ln76_fu_401_p1(3 downto 0);
                    zext_ln77_4_reg_644(2 downto 0) <= zext_ln77_4_fu_391_p1(2 downto 0);
            end if;
        end if;
    end process;
    sext_ln77_reg_582(0) <= '0';
    add_ln79_reg_587(0) <= '0';
    add_ln79_2_reg_605(0) <= '0';
    zext_ln77_1_reg_626(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln75_1_reg_631(8 downto 4) <= "00000";
    zext_ln77_4_reg_644(12 downto 3) <= "0000000000";
    zext_ln76_reg_649(11 downto 4) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln68_fu_229_p2, ap_CS_fsm_state3, icmp_ln69_fu_286_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln73_fu_349_p2, ap_CS_fsm_state6, icmp_ln75_fu_379_p2, ap_CS_fsm_state7, icmp_ln76_fu_405_p2, icmp_ln70_fu_333_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln68_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln69_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln70_fu_333_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln73_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln75_fu_379_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln76_fu_405_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln77_1_fu_395_p2 <= std_logic_vector(unsigned(zext_ln75_fu_375_p1) + unsigned(w_0_reg_138));
    add_ln77_2_fu_455_p2 <= std_logic_vector(signed(sext_ln77_1_fu_451_p1) + signed(zext_ln75_1_reg_631));
    add_ln77_3_fu_490_p2 <= std_logic_vector(unsigned(sub_ln77_2_fu_484_p2) + unsigned(zext_ln76_reg_649));
    add_ln77_4_fu_495_p2 <= std_logic_vector(signed(sext_ln77_reg_582) + signed(zext_ln77_5_fu_417_p1));
    add_ln77_5_fu_516_p2 <= std_logic_vector(signed(sext_ln77_3_fu_500_p1) + signed(sext_ln77_4_fu_512_p1));
    add_ln77_6_fu_522_p2 <= std_logic_vector(unsigned(add_ln77_5_fu_516_p2) + unsigned(zext_ln77_1_reg_626));
    add_ln77_7_fu_546_p2 <= std_logic_vector(unsigned(trunc_ln77_1_reg_667) + unsigned(p_shl6_cast_fu_539_p3));
    add_ln77_8_fu_551_p2 <= std_logic_vector(unsigned(add_ln77_7_fu_546_p2) + unsigned(zext_ln77_4_reg_644));
    add_ln77_fu_365_p2 <= std_logic_vector(unsigned(zext_ln73_fu_345_p1) + unsigned(h_0_reg_126));
    add_ln79_1_fu_302_p2 <= std_logic_vector(unsigned(zext_ln79_fu_298_p1) + unsigned(add_ln79_reg_587));
    add_ln79_2_fu_327_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_307_p3) + unsigned(zext_ln79_1_fu_323_p1));
    add_ln79_3_fu_565_p2 <= std_logic_vector(unsigned(add_ln79_2_reg_605) + unsigned(zext_ln79_2_fu_561_p1));
    add_ln79_fu_280_p2 <= std_logic_vector(unsigned(zext_ln77_3_fu_266_p1) + unsigned(zext_ln77_2_fu_254_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln68_fu_229_p2)
    begin
        if ((((icmp_ln68_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln68_fu_229_p2)
    begin
        if (((icmp_ln68_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_592;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_fu_411_p2 <= std_logic_vector(unsigned(ci_0_reg_208) + unsigned(ap_const_lv3_1));
    co_fu_235_p2 <= std_logic_vector(unsigned(co_0_reg_115) + unsigned(ap_const_lv5_1));

    grp_fu_219_p0_assign_proc : process(sum_0_reg_150, sum_2_reg_196, ap_CS_fsm_state14, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_219_p0 <= sum_0_reg_150;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_219_p0 <= sum_2_reg_196;
        else 
            grp_fu_219_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_219_p1_assign_proc : process(tmp_5_reg_697, bias_load_reg_707, ap_CS_fsm_state14, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_219_p1 <= bias_load_reg_707;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_219_p1 <= tmp_5_reg_697;
        else 
            grp_fu_219_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_fu_292_p2 <= std_logic_vector(unsigned(h_0_reg_126) + unsigned(ap_const_lv4_1));
    icmp_ln68_fu_229_p2 <= "1" when (co_0_reg_115 = ap_const_lv5_10) else "0";
    icmp_ln69_fu_286_p2 <= "1" when (h_0_reg_126 = ap_const_lv4_A) else "0";
    icmp_ln70_fu_333_p2 <= "1" when (w_0_reg_138 = ap_const_lv4_A) else "0";
    icmp_ln73_fu_349_p2 <= "1" when (m_0_reg_162 = ap_const_lv3_5) else "0";
    icmp_ln75_fu_379_p2 <= "1" when (n_0_reg_185 = ap_const_lv3_5) else "0";
    icmp_ln76_fu_405_p2 <= "1" when (ci_0_reg_208 = ap_const_lv3_6) else "0";
    input_r_address0 <= zext_ln77_8_fu_535_p1(11 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_355_p2 <= std_logic_vector(unsigned(m_0_reg_162) + unsigned(ap_const_lv3_1));
    n_fu_385_p2 <= std_logic_vector(unsigned(n_0_reg_185) + unsigned(ap_const_lv3_1));
    output_r_address0 <= zext_ln79_3_fu_570_p1(11 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= tmp_reg_717;

    output_r_we0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl4_cast_fu_307_p3 <= (add_ln79_1_fu_302_p2 & ap_const_lv3_0);
    p_shl6_cast_fu_539_p3 <= (trunc_ln77_2_reg_672 & ap_const_lv2_0);
    p_shl8_cast_fu_464_p3 <= (trunc_ln77_fu_460_p1 & ap_const_lv4_0);
        sext_ln77_1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln77_1_fu_445_p2),9));

        sext_ln77_2_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_472_p3),12));

        sext_ln77_3_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln77_4_fu_495_p2),64));

        sext_ln77_4_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_504_p3),64));

        sext_ln77_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln77_fu_270_p2),10));

    sub_ln77_1_fu_445_p2 <= std_logic_vector(unsigned(zext_ln77_6_fu_429_p1) - unsigned(zext_ln77_7_fu_441_p1));
    sub_ln77_2_fu_484_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_464_p3) - unsigned(sext_ln77_2_fu_480_p1));
    sub_ln77_fu_270_p2 <= std_logic_vector(unsigned(zext_ln77_2_fu_254_p1) - unsigned(zext_ln77_3_fu_266_p1));
    tmp_11_fu_258_p3 <= (co_0_reg_115 & ap_const_lv1_0);
    tmp_12_fu_421_p3 <= (ci_0_reg_208 & ap_const_lv4_0);
    tmp_13_fu_315_p3 <= (add_ln79_1_fu_302_p2 & ap_const_lv1_0);
    tmp_14_fu_433_p3 <= (ci_0_reg_208 & ap_const_lv1_0);
    tmp_15_fu_472_p3 <= (add_ln77_2_fu_455_p2 & ap_const_lv1_0);
    tmp_16_fu_504_p3 <= (add_ln77_4_fu_495_p2 & ap_const_lv2_0);
    tmp_s_fu_246_p3 <= (co_0_reg_115 & ap_const_lv3_0);
    trunc_ln77_1_fu_527_p1 <= add_ln77_6_fu_522_p2(13 - 1 downto 0);
    trunc_ln77_2_fu_531_p1 <= add_ln77_6_fu_522_p2(11 - 1 downto 0);
    trunc_ln77_fu_460_p1 <= add_ln77_2_fu_455_p2(8 - 1 downto 0);
    w_fu_339_p2 <= std_logic_vector(unsigned(w_0_reg_138) + unsigned(ap_const_lv4_1));
    weights_address0 <= zext_ln77_9_fu_556_p1(12 - 1 downto 0);

    weights_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln73_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_162),4));
    zext_ln75_1_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln77_fu_365_p2),9));
    zext_ln75_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_185),4));
    zext_ln76_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln77_1_fu_395_p2),12));
    zext_ln77_1_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_162),64));
    zext_ln77_2_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_246_p3),9));
    zext_ln77_3_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_258_p3),9));
    zext_ln77_4_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_185),13));
    zext_ln77_5_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_0_reg_208),10));
    zext_ln77_6_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_421_p3),8));
    zext_ln77_7_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_433_p3),8));
    zext_ln77_8_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln77_3_reg_662),64));
    zext_ln77_9_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln77_8_fu_551_p2),64));
    zext_ln77_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_0_reg_115),64));
    zext_ln79_1_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_315_p3),12));
    zext_ln79_2_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_0_reg_138),12));
    zext_ln79_3_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_3_reg_712),64));
    zext_ln79_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_0_reg_126),9));
end behav;
