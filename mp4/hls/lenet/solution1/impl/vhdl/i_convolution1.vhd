-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity i_convolution1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weights_0_ce0 : OUT STD_LOGIC;
    weights_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of i_convolution1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_fu_196_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal co_reg_435 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln21_2_fu_227_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln21_2_reg_440 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln13_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln23_fu_251_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln23_reg_445 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_addr_reg_450 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_fu_261_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_458 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln23_1_fu_300_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln23_1_reg_463 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln14_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_fu_312_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_471 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal m_fu_328_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_reg_479 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln21_4_fu_359_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln21_4_reg_484 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln18_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln21_fu_365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_reg_489 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_fu_381_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_reg_497 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln20_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_0_load_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_0_load_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal bias_load_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln23_1_fu_423_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_1_reg_537 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal co_0_reg_99 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_0_reg_110 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln15_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_0_reg_122 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal sum_0_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_0_reg_146 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_1_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_0_reg_169 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln21_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_9_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_4_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_3_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_180_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_s_fu_211_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln21_1_fu_207_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln21_2_fu_219_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_233_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln23_fu_241_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_3_fu_223_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln23_fu_245_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln23_1_fu_267_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_fu_271_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln23_fu_276_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_288_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_280_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln23_1_fu_296_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln21_5_fu_334_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln21_3_fu_338_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_347_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_6_fu_343_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_7_fu_355_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln18_fu_318_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln21_8_fu_387_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln21_5_fu_391_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln20_fu_371_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_1_fu_401_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_407_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_2_fu_419_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component lenet_top_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    lenet_top_fadd_32bkb_U7 : component lenet_top_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_180_p0,
        din1 => grp_fu_180_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_180_p2);

    lenet_top_fmul_32cud_U8 : component lenet_top_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_0_load_reg_512,
        din1 => input_0_load_reg_517,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_0_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                co_0_reg_99 <= co_reg_435;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                co_0_reg_99 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    h_0_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_306_p2 = ap_const_lv1_1))) then 
                h_0_reg_110 <= h_reg_458;
            elsif (((icmp_ln13_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                h_0_reg_110 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    m_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                m_0_reg_146 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln20_fu_375_p2 = ap_const_lv1_1))) then 
                m_0_reg_146 <= m_reg_479;
            end if; 
        end if;
    end process;

    n_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                n_0_reg_169 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                n_0_reg_169 <= n_reg_497;
            end if; 
        end if;
    end process;

    sum_0_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                sum_0_reg_134 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln20_fu_375_p2 = ap_const_lv1_1))) then 
                sum_0_reg_134 <= sum_1_reg_157;
            end if; 
        end if;
    end process;

    sum_1_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_1_reg_157 <= sum_0_reg_134;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                sum_1_reg_157 <= grp_fu_180_p2;
            end if; 
        end if;
    end process;

    w_0_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                w_0_reg_122 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                w_0_reg_122 <= w_reg_471;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln21_2_reg_440 <= add_ln21_2_fu_227_p2;
                bias_addr_reg_450 <= zext_ln21_fu_202_p1(3 - 1 downto 0);
                    sext_ln23_reg_445(9 downto 2) <= sext_ln23_fu_251_p1(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln21_4_reg_484 <= add_ln21_4_fu_359_p2;
                add_ln21_reg_489 <= add_ln21_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln23_1_reg_537 <= add_ln23_1_fu_423_p2;
                bias_load_reg_532 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_reg_435 <= co_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_reg_458 <= h_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_0_load_reg_517 <= input_0_q0;
                weights_0_load_reg_512 <= weights_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_reg_479 <= m_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_reg_497 <= n_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    sub_ln23_1_reg_463(13 downto 2) <= sub_ln23_1_fu_300_p2(13 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_7_reg_522 <= grp_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_reg_542 <= grp_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_reg_471 <= w_fu_312_p2;
            end if;
        end if;
    end process;
    sext_ln23_reg_445(1 downto 0) <= "00";
    sub_ln23_1_reg_463(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln13_fu_190_p2, ap_CS_fsm_state3, icmp_ln14_fu_255_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln18_fu_322_p2, ap_CS_fsm_state6, icmp_ln20_fu_375_p2, icmp_ln15_fu_306_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln13_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln14_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_306_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln18_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln20_fu_375_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln21_1_fu_401_p2 <= std_logic_vector(unsigned(zext_ln20_fu_371_p1) + unsigned(w_0_reg_122));
    add_ln21_2_fu_227_p2 <= std_logic_vector(unsigned(zext_ln21_1_fu_207_p1) + unsigned(zext_ln21_2_fu_219_p1));
    add_ln21_3_fu_338_p2 <= std_logic_vector(unsigned(add_ln21_2_reg_440) + unsigned(zext_ln21_5_fu_334_p1));
    add_ln21_4_fu_359_p2 <= std_logic_vector(unsigned(zext_ln21_6_fu_343_p1) + unsigned(zext_ln21_7_fu_355_p1));
    add_ln21_5_fu_391_p2 <= std_logic_vector(unsigned(add_ln21_4_reg_484) + unsigned(zext_ln21_8_fu_387_p1));
    add_ln21_fu_365_p2 <= std_logic_vector(unsigned(zext_ln18_fu_318_p1) + unsigned(h_0_reg_110));
    add_ln23_1_fu_423_p2 <= std_logic_vector(unsigned(sub_ln23_1_reg_463) + unsigned(zext_ln23_2_fu_419_p1));
    add_ln23_fu_271_p2 <= std_logic_vector(signed(sext_ln23_reg_445) + signed(zext_ln23_1_fu_267_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln13_fu_190_p2)
    begin
        if ((((icmp_ln13_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln13_fu_190_p2)
    begin
        if (((icmp_ln13_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_450;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_fu_196_p2 <= std_logic_vector(unsigned(co_0_reg_99) + unsigned(ap_const_lv3_1));

    grp_fu_180_p0_assign_proc : process(sum_0_reg_134, sum_1_reg_157, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_180_p0 <= sum_0_reg_134;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_180_p0 <= sum_1_reg_157;
        else 
            grp_fu_180_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_180_p1_assign_proc : process(tmp_7_reg_522, bias_load_reg_532, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_180_p1 <= bias_load_reg_532;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_180_p1 <= tmp_7_reg_522;
        else 
            grp_fu_180_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_fu_261_p2 <= std_logic_vector(unsigned(h_0_reg_110) + unsigned(ap_const_lv5_1));
    icmp_ln13_fu_190_p2 <= "1" when (co_0_reg_99 = ap_const_lv3_6) else "0";
    icmp_ln14_fu_255_p2 <= "1" when (h_0_reg_110 = ap_const_lv5_1C) else "0";
    icmp_ln15_fu_306_p2 <= "1" when (w_0_reg_122 = ap_const_lv5_1C) else "0";
    icmp_ln18_fu_322_p2 <= "1" when (m_0_reg_146 = ap_const_lv3_5) else "0";
    icmp_ln20_fu_375_p2 <= "1" when (n_0_reg_169 = ap_const_lv3_5) else "0";
    input_0_address0 <= zext_ln21_4_fu_414_p1(10 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_328_p2 <= std_logic_vector(unsigned(m_0_reg_146) + unsigned(ap_const_lv3_1));
    n_fu_381_p2 <= std_logic_vector(unsigned(n_0_reg_169) + unsigned(ap_const_lv3_1));
    output_r_address0 <= zext_ln23_3_fu_428_p1(13 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= tmp_reg_542;

    output_r_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl3_cast_fu_280_p3 <= (trunc_ln23_fu_276_p1 & ap_const_lv5_0);
        sext_ln23_1_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_288_p3),14));

        sext_ln23_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln23_fu_245_p2),10));

    sub_ln23_1_fu_300_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_280_p3) - unsigned(sext_ln23_1_fu_296_p1));
    sub_ln23_fu_245_p2 <= std_logic_vector(unsigned(zext_ln23_fu_241_p1) - unsigned(zext_ln21_3_fu_223_p1));
    tmp_15_fu_233_p3 <= (co_0_reg_99 & ap_const_lv5_0);
    tmp_16_fu_407_p3 <= (add_ln21_reg_489 & add_ln21_1_fu_401_p2);
    tmp_17_fu_288_p3 <= (add_ln23_fu_271_p2 & ap_const_lv2_0);
    tmp_18_fu_347_p3 <= (add_ln21_3_fu_338_p2 & ap_const_lv2_0);
    tmp_s_fu_211_p3 <= (co_0_reg_99 & ap_const_lv2_0);
    trunc_ln23_fu_276_p1 <= add_ln23_fu_271_p2(9 - 1 downto 0);
    w_fu_312_p2 <= std_logic_vector(unsigned(w_0_reg_122) + unsigned(ap_const_lv5_1));
    weights_0_address0 <= zext_ln21_9_fu_396_p1(8 - 1 downto 0);

    weights_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights_0_ce0 <= ap_const_logic_1;
        else 
            weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln18_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_146),5));
    zext_ln20_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_169),5));
    zext_ln21_1_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_0_reg_99),6));
    zext_ln21_2_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_211_p3),6));
    zext_ln21_3_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_211_p3),9));
    zext_ln21_4_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_407_p3),64));
    zext_ln21_5_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_146),6));
    zext_ln21_6_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_3_fu_338_p2),9));
    zext_ln21_7_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_347_p3),9));
    zext_ln21_8_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_169),9));
    zext_ln21_9_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_5_fu_391_p2),64));
    zext_ln21_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_0_reg_99),64));
    zext_ln23_1_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_0_reg_110),10));
    zext_ln23_2_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_0_reg_122),14));
    zext_ln23_3_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_1_reg_537),64));
    zext_ln23_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_233_p3),9));
end behav;
