// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ld_weights3_HH_
#define _ld_weights3_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct ld_weights3 : public sc_module {
    // Port declarations 56
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_weights3_AWVALID;
    sc_in< sc_logic > m_axi_weights3_AWREADY;
    sc_out< sc_lv<32> > m_axi_weights3_AWADDR;
    sc_out< sc_lv<1> > m_axi_weights3_AWID;
    sc_out< sc_lv<32> > m_axi_weights3_AWLEN;
    sc_out< sc_lv<3> > m_axi_weights3_AWSIZE;
    sc_out< sc_lv<2> > m_axi_weights3_AWBURST;
    sc_out< sc_lv<2> > m_axi_weights3_AWLOCK;
    sc_out< sc_lv<4> > m_axi_weights3_AWCACHE;
    sc_out< sc_lv<3> > m_axi_weights3_AWPROT;
    sc_out< sc_lv<4> > m_axi_weights3_AWQOS;
    sc_out< sc_lv<4> > m_axi_weights3_AWREGION;
    sc_out< sc_lv<1> > m_axi_weights3_AWUSER;
    sc_out< sc_logic > m_axi_weights3_WVALID;
    sc_in< sc_logic > m_axi_weights3_WREADY;
    sc_out< sc_lv<32> > m_axi_weights3_WDATA;
    sc_out< sc_lv<4> > m_axi_weights3_WSTRB;
    sc_out< sc_logic > m_axi_weights3_WLAST;
    sc_out< sc_lv<1> > m_axi_weights3_WID;
    sc_out< sc_lv<1> > m_axi_weights3_WUSER;
    sc_out< sc_logic > m_axi_weights3_ARVALID;
    sc_in< sc_logic > m_axi_weights3_ARREADY;
    sc_out< sc_lv<32> > m_axi_weights3_ARADDR;
    sc_out< sc_lv<1> > m_axi_weights3_ARID;
    sc_out< sc_lv<32> > m_axi_weights3_ARLEN;
    sc_out< sc_lv<3> > m_axi_weights3_ARSIZE;
    sc_out< sc_lv<2> > m_axi_weights3_ARBURST;
    sc_out< sc_lv<2> > m_axi_weights3_ARLOCK;
    sc_out< sc_lv<4> > m_axi_weights3_ARCACHE;
    sc_out< sc_lv<3> > m_axi_weights3_ARPROT;
    sc_out< sc_lv<4> > m_axi_weights3_ARQOS;
    sc_out< sc_lv<4> > m_axi_weights3_ARREGION;
    sc_out< sc_lv<1> > m_axi_weights3_ARUSER;
    sc_in< sc_logic > m_axi_weights3_RVALID;
    sc_out< sc_logic > m_axi_weights3_RREADY;
    sc_in< sc_lv<32> > m_axi_weights3_RDATA;
    sc_in< sc_logic > m_axi_weights3_RLAST;
    sc_in< sc_lv<1> > m_axi_weights3_RID;
    sc_in< sc_lv<1> > m_axi_weights3_RUSER;
    sc_in< sc_lv<2> > m_axi_weights3_RRESP;
    sc_in< sc_logic > m_axi_weights3_BVALID;
    sc_out< sc_logic > m_axi_weights3_BREADY;
    sc_in< sc_lv<2> > m_axi_weights3_BRESP;
    sc_in< sc_lv<1> > m_axi_weights3_BID;
    sc_in< sc_lv<1> > m_axi_weights3_BUSER;
    sc_in< sc_lv<30> > weights3_offset;
    sc_out< sc_lv<12> > weights3_buf_address0;
    sc_out< sc_logic > weights3_buf_ce0;
    sc_out< sc_logic > weights3_buf_we0;
    sc_out< sc_lv<32> > weights3_buf_d0;


    // Module declarations
    ld_weights3(sc_module_name name);
    SC_HAS_PROCESS(ld_weights3);

    ~ld_weights3();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<13> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > weights3_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > weights3_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<1> > icmp_ln154_fu_278_p2;
    sc_signal< sc_lv<64> > zext_ln155_fu_141_p1;
    sc_signal< sc_lv<64> > zext_ln155_reg_299;
    sc_signal< sc_lv<5> > i_fu_151_p2;
    sc_signal< sc_lv<5> > i_reg_307;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > sext_ln155_fu_187_p1;
    sc_signal< sc_lv<10> > sext_ln155_reg_312;
    sc_signal< sc_lv<1> > icmp_ln151_fu_145_p2;
    sc_signal< sc_lv<3> > j_fu_197_p2;
    sc_signal< sc_lv<3> > j_reg_320;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > add_ln155_1_fu_228_p2;
    sc_signal< sc_lv<64> > add_ln155_1_reg_325;
    sc_signal< sc_lv<1> > icmp_ln152_fu_191_p2;
    sc_signal< sc_lv<3> > k_fu_240_p2;
    sc_signal< sc_lv<3> > k_reg_333;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > add_ln155_3_fu_261_p2;
    sc_signal< sc_lv<64> > add_ln155_3_reg_338;
    sc_signal< sc_lv<1> > icmp_ln153_fu_234_p2;
    sc_signal< sc_lv<32> > weights3_addr_reg_343;
    sc_signal< sc_lv<3> > l_fu_284_p2;
    sc_signal< sc_lv<3> > l_reg_352;
    sc_signal< bool > ap_block_state12;
    sc_signal< sc_lv<64> > add_ln155_4_fu_294_p2;
    sc_signal< sc_lv<64> > add_ln155_4_reg_357;
    sc_signal< sc_lv<32> > weights3_addr_read_reg_362;
    sc_signal< sc_lv<5> > i_0_reg_97;
    sc_signal< sc_lv<3> > j_0_reg_108;
    sc_signal< sc_lv<3> > k_0_reg_119;
    sc_signal< sc_lv<3> > l_0_reg_130;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<64> > add_ln155_5_fu_267_p2;
    sc_signal< sc_lv<8> > tmp_fu_157_p3;
    sc_signal< sc_lv<6> > tmp_3_fu_169_p3;
    sc_signal< sc_lv<9> > zext_ln155_1_fu_165_p1;
    sc_signal< sc_lv<9> > zext_ln155_4_fu_177_p1;
    sc_signal< sc_lv<9> > sub_ln155_fu_181_p2;
    sc_signal< sc_lv<10> > zext_ln155_5_fu_203_p1;
    sc_signal< sc_lv<10> > add_ln155_fu_207_p2;
    sc_signal< sc_lv<12> > tmp_2_fu_216_p3;
    sc_signal< sc_lv<64> > sext_ln155_1_fu_212_p1;
    sc_signal< sc_lv<64> > sext_ln155_2_fu_224_p1;
    sc_signal< sc_lv<64> > zext_ln155_2_fu_246_p1;
    sc_signal< sc_lv<64> > add_ln155_2_fu_250_p2;
    sc_signal< sc_lv<64> > shl_ln155_fu_255_p2;
    sc_signal< sc_lv<64> > zext_ln155_3_fu_290_p1;
    sc_signal< sc_lv<13> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<13> ap_ST_fsm_state1;
    static const sc_lv<13> ap_ST_fsm_state2;
    static const sc_lv<13> ap_ST_fsm_state3;
    static const sc_lv<13> ap_ST_fsm_state4;
    static const sc_lv<13> ap_ST_fsm_state5;
    static const sc_lv<13> ap_ST_fsm_state6;
    static const sc_lv<13> ap_ST_fsm_state7;
    static const sc_lv<13> ap_ST_fsm_state8;
    static const sc_lv<13> ap_ST_fsm_state9;
    static const sc_lv<13> ap_ST_fsm_state10;
    static const sc_lv<13> ap_ST_fsm_state11;
    static const sc_lv<13> ap_ST_fsm_state12;
    static const sc_lv<13> ap_ST_fsm_state13;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<64> ap_const_lv64_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln155_1_fu_228_p2();
    void thread_add_ln155_2_fu_250_p2();
    void thread_add_ln155_3_fu_261_p2();
    void thread_add_ln155_4_fu_294_p2();
    void thread_add_ln155_5_fu_267_p2();
    void thread_add_ln155_fu_207_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_state12();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_151_p2();
    void thread_icmp_ln151_fu_145_p2();
    void thread_icmp_ln152_fu_191_p2();
    void thread_icmp_ln153_fu_234_p2();
    void thread_icmp_ln154_fu_278_p2();
    void thread_j_fu_197_p2();
    void thread_k_fu_240_p2();
    void thread_l_fu_284_p2();
    void thread_m_axi_weights3_ARADDR();
    void thread_m_axi_weights3_ARBURST();
    void thread_m_axi_weights3_ARCACHE();
    void thread_m_axi_weights3_ARID();
    void thread_m_axi_weights3_ARLEN();
    void thread_m_axi_weights3_ARLOCK();
    void thread_m_axi_weights3_ARPROT();
    void thread_m_axi_weights3_ARQOS();
    void thread_m_axi_weights3_ARREGION();
    void thread_m_axi_weights3_ARSIZE();
    void thread_m_axi_weights3_ARUSER();
    void thread_m_axi_weights3_ARVALID();
    void thread_m_axi_weights3_AWADDR();
    void thread_m_axi_weights3_AWBURST();
    void thread_m_axi_weights3_AWCACHE();
    void thread_m_axi_weights3_AWID();
    void thread_m_axi_weights3_AWLEN();
    void thread_m_axi_weights3_AWLOCK();
    void thread_m_axi_weights3_AWPROT();
    void thread_m_axi_weights3_AWQOS();
    void thread_m_axi_weights3_AWREGION();
    void thread_m_axi_weights3_AWSIZE();
    void thread_m_axi_weights3_AWUSER();
    void thread_m_axi_weights3_AWVALID();
    void thread_m_axi_weights3_BREADY();
    void thread_m_axi_weights3_RREADY();
    void thread_m_axi_weights3_WDATA();
    void thread_m_axi_weights3_WID();
    void thread_m_axi_weights3_WLAST();
    void thread_m_axi_weights3_WSTRB();
    void thread_m_axi_weights3_WUSER();
    void thread_m_axi_weights3_WVALID();
    void thread_sext_ln155_1_fu_212_p1();
    void thread_sext_ln155_2_fu_224_p1();
    void thread_sext_ln155_fu_187_p1();
    void thread_shl_ln155_fu_255_p2();
    void thread_sub_ln155_fu_181_p2();
    void thread_tmp_2_fu_216_p3();
    void thread_tmp_3_fu_169_p3();
    void thread_tmp_fu_157_p3();
    void thread_weights3_blk_n_AR();
    void thread_weights3_blk_n_R();
    void thread_weights3_buf_address0();
    void thread_weights3_buf_ce0();
    void thread_weights3_buf_d0();
    void thread_weights3_buf_we0();
    void thread_zext_ln155_1_fu_165_p1();
    void thread_zext_ln155_2_fu_246_p1();
    void thread_zext_ln155_3_fu_290_p1();
    void thread_zext_ln155_4_fu_177_p1();
    void thread_zext_ln155_5_fu_203_p1();
    void thread_zext_ln155_fu_141_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
