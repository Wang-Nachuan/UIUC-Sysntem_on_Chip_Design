// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _i_relu1_HH_
#define _i_relu1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "lenet_top_fcmp_32dEe.h"

namespace ap_rtl {

struct i_relu1 : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<13> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_out< sc_logic > input_r_we0;
    sc_out< sc_lv<32> > input_r_d0;
    sc_in< sc_lv<32> > input_r_q0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const0;
    sc_signal< sc_lv<5> > ap_var_for_const2;


    // Module declarations
    i_relu1(sc_module_name name);
    SC_HAS_PROCESS(i_relu1);

    ~i_relu1();

    sc_trace_file* mVcdFile;

    lenet_top_fcmp_32dEe<1,2,32,32,1>* lenet_top_fcmp_32dEe_U15;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_fu_103_p2;
    sc_signal< sc_lv<3> > i_reg_263;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > sext_ln33_fu_139_p1;
    sc_signal< sc_lv<10> > sext_ln33_reg_268;
    sc_signal< sc_lv<1> > icmp_ln30_fu_97_p2;
    sc_signal< sc_lv<5> > j_fu_149_p2;
    sc_signal< sc_lv<5> > j_reg_276;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<14> > sub_ln33_1_fu_188_p2;
    sc_signal< sc_lv<14> > sub_ln33_1_reg_281;
    sc_signal< sc_lv<1> > icmp_ln31_fu_143_p2;
    sc_signal< sc_lv<5> > k_fu_200_p2;
    sc_signal< sc_lv<5> > k_reg_289;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<13> > input_addr_reg_294;
    sc_signal< sc_lv<1> > icmp_ln32_fu_194_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln33_fu_238_p2;
    sc_signal< sc_lv<1> > icmp_ln33_reg_304;
    sc_signal< sc_lv<1> > icmp_ln33_1_fu_244_p2;
    sc_signal< sc_lv<1> > icmp_ln33_1_reg_309;
    sc_signal< sc_lv<3> > i_0_reg_58;
    sc_signal< sc_lv<5> > j_0_reg_69;
    sc_signal< sc_lv<5> > k_0_reg_80;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > zext_ln33_4_fu_215_p1;
    sc_signal< sc_lv<1> > and_ln33_fu_254_p2;
    sc_signal< sc_lv<8> > tmp_s_fu_109_p3;
    sc_signal< sc_lv<5> > tmp_3_fu_121_p3;
    sc_signal< sc_lv<9> > zext_ln33_fu_117_p1;
    sc_signal< sc_lv<9> > zext_ln33_1_fu_129_p1;
    sc_signal< sc_lv<9> > sub_ln33_fu_133_p2;
    sc_signal< sc_lv<10> > zext_ln33_2_fu_155_p1;
    sc_signal< sc_lv<10> > add_ln33_fu_159_p2;
    sc_signal< sc_lv<9> > trunc_ln33_fu_164_p1;
    sc_signal< sc_lv<12> > tmp_6_fu_176_p3;
    sc_signal< sc_lv<14> > p_shl2_cast_fu_168_p3;
    sc_signal< sc_lv<14> > sext_ln33_1_fu_184_p1;
    sc_signal< sc_lv<14> > zext_ln33_3_fu_206_p1;
    sc_signal< sc_lv<14> > add_ln33_1_fu_210_p2;
    sc_signal< sc_lv<32> > bitcast_ln33_fu_220_p1;
    sc_signal< sc_lv<8> > tmp_fu_224_p4;
    sc_signal< sc_lv<23> > trunc_ln33_1_fu_234_p1;
    sc_signal< sc_lv<1> > or_ln33_fu_250_p2;
    sc_signal< sc_lv<1> > grp_fu_91_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<5> ap_const_lv5_1C;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const2();
    void thread_ap_clk_no_reset_();
    void thread_add_ln33_1_fu_210_p2();
    void thread_add_ln33_fu_159_p2();
    void thread_and_ln33_fu_254_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_bitcast_ln33_fu_220_p1();
    void thread_i_fu_103_p2();
    void thread_icmp_ln30_fu_97_p2();
    void thread_icmp_ln31_fu_143_p2();
    void thread_icmp_ln32_fu_194_p2();
    void thread_icmp_ln33_1_fu_244_p2();
    void thread_icmp_ln33_fu_238_p2();
    void thread_input_r_address0();
    void thread_input_r_ce0();
    void thread_input_r_d0();
    void thread_input_r_we0();
    void thread_j_fu_149_p2();
    void thread_k_fu_200_p2();
    void thread_or_ln33_fu_250_p2();
    void thread_p_shl2_cast_fu_168_p3();
    void thread_sext_ln33_1_fu_184_p1();
    void thread_sext_ln33_fu_139_p1();
    void thread_sub_ln33_1_fu_188_p2();
    void thread_sub_ln33_fu_133_p2();
    void thread_tmp_3_fu_121_p3();
    void thread_tmp_6_fu_176_p3();
    void thread_tmp_fu_224_p4();
    void thread_tmp_s_fu_109_p3();
    void thread_trunc_ln33_1_fu_234_p1();
    void thread_trunc_ln33_fu_164_p1();
    void thread_zext_ln33_1_fu_129_p1();
    void thread_zext_ln33_2_fu_155_p1();
    void thread_zext_ln33_3_fu_206_p1();
    void thread_zext_ln33_4_fu_215_p1();
    void thread_zext_ln33_fu_117_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
