// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "i_relu3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic i_relu3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic i_relu3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> i_relu3::ap_ST_fsm_state1 = "1";
const sc_lv<6> i_relu3::ap_ST_fsm_state2 = "10";
const sc_lv<6> i_relu3::ap_ST_fsm_state3 = "100";
const sc_lv<6> i_relu3::ap_ST_fsm_state4 = "1000";
const sc_lv<6> i_relu3::ap_ST_fsm_state5 = "10000";
const sc_lv<6> i_relu3::ap_ST_fsm_state6 = "100000";
const sc_lv<32> i_relu3::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> i_relu3::ap_const_lv32_1 = "1";
const sc_lv<1> i_relu3::ap_const_lv1_0 = "0";
const sc_lv<32> i_relu3::ap_const_lv32_2 = "10";
const sc_lv<32> i_relu3::ap_const_lv32_3 = "11";
const sc_lv<32> i_relu3::ap_const_lv32_4 = "100";
const sc_lv<5> i_relu3::ap_const_lv5_0 = "00000";
const sc_lv<1> i_relu3::ap_const_lv1_1 = "1";
const sc_lv<4> i_relu3::ap_const_lv4_0 = "0000";
const sc_lv<32> i_relu3::ap_const_lv32_5 = "101";
const sc_lv<5> i_relu3::ap_const_lv5_10 = "10000";
const sc_lv<5> i_relu3::ap_const_lv5_1 = "1";
const sc_lv<3> i_relu3::ap_const_lv3_0 = "000";
const sc_lv<4> i_relu3::ap_const_lv4_A = "1010";
const sc_lv<4> i_relu3::ap_const_lv4_1 = "1";
const sc_lv<32> i_relu3::ap_const_lv32_17 = "10111";
const sc_lv<32> i_relu3::ap_const_lv32_1E = "11110";
const sc_lv<8> i_relu3::ap_const_lv8_FF = "11111111";
const sc_lv<23> i_relu3::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> i_relu3::ap_const_lv5_4 = "100";
const bool i_relu3::ap_const_boolean_1 = true;

i_relu3::i_relu3(sc_module_name name) : sc_module(name), mVcdFile(0) {
    lenet_top_fcmp_32dEe_U29 = new lenet_top_fcmp_32dEe<1,2,32,32,1>("lenet_top_fcmp_32dEe_U29");
    lenet_top_fcmp_32dEe_U29->clk(ap_clk);
    lenet_top_fcmp_32dEe_U29->reset(ap_rst);
    lenet_top_fcmp_32dEe_U29->din0(input_r_q0);
    lenet_top_fcmp_32dEe_U29->din1(ap_var_for_const0);
    lenet_top_fcmp_32dEe_U29->ce(ap_var_for_const1);
    lenet_top_fcmp_32dEe_U29->opcode(ap_var_for_const2);
    lenet_top_fcmp_32dEe_U29->dout(grp_fu_93_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln89_1_fu_157_p2);
    sensitive << ( add_ln89_reg_262 );
    sensitive << ( zext_ln89_2_fu_153_p1 );

    SC_METHOD(thread_add_ln89_2_fu_182_p2);
    sensitive << ( p_shl2_cast_fu_162_p3 );
    sensitive << ( zext_ln89_3_fu_178_p1 );

    SC_METHOD(thread_add_ln89_3_fu_204_p2);
    sensitive << ( add_ln89_2_reg_275 );
    sensitive << ( zext_ln89_4_fu_200_p1 );

    SC_METHOD(thread_add_ln89_fu_135_p2);
    sensitive << ( zext_ln89_1_fu_131_p1 );
    sensitive << ( zext_ln89_fu_119_p1 );

    SC_METHOD(thread_and_ln89_fu_248_p2);
    sensitive << ( or_ln89_fu_244_p2 );
    sensitive << ( grp_fu_93_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln86_fu_99_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln86_fu_99_p2 );

    SC_METHOD(thread_bitcast_ln89_fu_214_p1);
    sensitive << ( input_r_q0 );

    SC_METHOD(thread_i_fu_105_p2);
    sensitive << ( i_0_reg_60 );

    SC_METHOD(thread_icmp_ln86_fu_99_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_60 );

    SC_METHOD(thread_icmp_ln87_fu_141_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_71 );

    SC_METHOD(thread_icmp_ln88_fu_188_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( k_0_reg_82 );

    SC_METHOD(thread_icmp_ln89_1_fu_238_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( trunc_ln89_fu_228_p1 );

    SC_METHOD(thread_icmp_ln89_fu_232_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_fu_218_p4 );

    SC_METHOD(thread_input_r_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( input_addr_reg_288 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln89_5_fu_209_p1 );

    SC_METHOD(thread_input_r_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_input_r_d0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_input_r_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( and_ln89_fu_248_p2 );

    SC_METHOD(thread_j_fu_147_p2);
    sensitive << ( j_0_reg_71 );

    SC_METHOD(thread_k_fu_194_p2);
    sensitive << ( k_0_reg_82 );

    SC_METHOD(thread_or_ln89_fu_244_p2);
    sensitive << ( icmp_ln89_reg_298 );
    sensitive << ( icmp_ln89_1_reg_303 );

    SC_METHOD(thread_p_shl2_cast_fu_162_p3);
    sensitive << ( add_ln89_1_fu_157_p2 );

    SC_METHOD(thread_tmp_1_fu_123_p3);
    sensitive << ( i_0_reg_60 );

    SC_METHOD(thread_tmp_4_fu_170_p3);
    sensitive << ( add_ln89_1_fu_157_p2 );

    SC_METHOD(thread_tmp_fu_218_p4);
    sensitive << ( bitcast_ln89_fu_214_p1 );

    SC_METHOD(thread_tmp_s_fu_111_p3);
    sensitive << ( i_0_reg_60 );

    SC_METHOD(thread_trunc_ln89_fu_228_p1);
    sensitive << ( bitcast_ln89_fu_214_p1 );

    SC_METHOD(thread_zext_ln89_1_fu_131_p1);
    sensitive << ( tmp_1_fu_123_p3 );

    SC_METHOD(thread_zext_ln89_2_fu_153_p1);
    sensitive << ( j_0_reg_71 );

    SC_METHOD(thread_zext_ln89_3_fu_178_p1);
    sensitive << ( tmp_4_fu_170_p3 );

    SC_METHOD(thread_zext_ln89_4_fu_200_p1);
    sensitive << ( k_0_reg_82 );

    SC_METHOD(thread_zext_ln89_5_fu_209_p1);
    sensitive << ( add_ln89_3_fu_204_p2 );

    SC_METHOD(thread_zext_ln89_fu_119_p1);
    sensitive << ( tmp_s_fu_111_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln86_fu_99_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln87_fu_141_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln88_fu_188_p2 );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "i_relu3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_r_address0, "(port)input_r_address0");
    sc_trace(mVcdFile, input_r_ce0, "(port)input_r_ce0");
    sc_trace(mVcdFile, input_r_we0, "(port)input_r_we0");
    sc_trace(mVcdFile, input_r_d0, "(port)input_r_d0");
    sc_trace(mVcdFile, input_r_q0, "(port)input_r_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_105_p2, "i_fu_105_p2");
    sc_trace(mVcdFile, i_reg_257, "i_reg_257");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln89_fu_135_p2, "add_ln89_fu_135_p2");
    sc_trace(mVcdFile, add_ln89_reg_262, "add_ln89_reg_262");
    sc_trace(mVcdFile, icmp_ln86_fu_99_p2, "icmp_ln86_fu_99_p2");
    sc_trace(mVcdFile, j_fu_147_p2, "j_fu_147_p2");
    sc_trace(mVcdFile, j_reg_270, "j_reg_270");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, add_ln89_2_fu_182_p2, "add_ln89_2_fu_182_p2");
    sc_trace(mVcdFile, add_ln89_2_reg_275, "add_ln89_2_reg_275");
    sc_trace(mVcdFile, icmp_ln87_fu_141_p2, "icmp_ln87_fu_141_p2");
    sc_trace(mVcdFile, k_fu_194_p2, "k_fu_194_p2");
    sc_trace(mVcdFile, k_reg_283, "k_reg_283");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, input_addr_reg_288, "input_addr_reg_288");
    sc_trace(mVcdFile, icmp_ln88_fu_188_p2, "icmp_ln88_fu_188_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln89_fu_232_p2, "icmp_ln89_fu_232_p2");
    sc_trace(mVcdFile, icmp_ln89_reg_298, "icmp_ln89_reg_298");
    sc_trace(mVcdFile, icmp_ln89_1_fu_238_p2, "icmp_ln89_1_fu_238_p2");
    sc_trace(mVcdFile, icmp_ln89_1_reg_303, "icmp_ln89_1_reg_303");
    sc_trace(mVcdFile, i_0_reg_60, "i_0_reg_60");
    sc_trace(mVcdFile, j_0_reg_71, "j_0_reg_71");
    sc_trace(mVcdFile, k_0_reg_82, "k_0_reg_82");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln89_5_fu_209_p1, "zext_ln89_5_fu_209_p1");
    sc_trace(mVcdFile, and_ln89_fu_248_p2, "and_ln89_fu_248_p2");
    sc_trace(mVcdFile, tmp_s_fu_111_p3, "tmp_s_fu_111_p3");
    sc_trace(mVcdFile, tmp_1_fu_123_p3, "tmp_1_fu_123_p3");
    sc_trace(mVcdFile, zext_ln89_1_fu_131_p1, "zext_ln89_1_fu_131_p1");
    sc_trace(mVcdFile, zext_ln89_fu_119_p1, "zext_ln89_fu_119_p1");
    sc_trace(mVcdFile, zext_ln89_2_fu_153_p1, "zext_ln89_2_fu_153_p1");
    sc_trace(mVcdFile, add_ln89_1_fu_157_p2, "add_ln89_1_fu_157_p2");
    sc_trace(mVcdFile, tmp_4_fu_170_p3, "tmp_4_fu_170_p3");
    sc_trace(mVcdFile, p_shl2_cast_fu_162_p3, "p_shl2_cast_fu_162_p3");
    sc_trace(mVcdFile, zext_ln89_3_fu_178_p1, "zext_ln89_3_fu_178_p1");
    sc_trace(mVcdFile, zext_ln89_4_fu_200_p1, "zext_ln89_4_fu_200_p1");
    sc_trace(mVcdFile, add_ln89_3_fu_204_p2, "add_ln89_3_fu_204_p2");
    sc_trace(mVcdFile, bitcast_ln89_fu_214_p1, "bitcast_ln89_fu_214_p1");
    sc_trace(mVcdFile, tmp_fu_218_p4, "tmp_fu_218_p4");
    sc_trace(mVcdFile, trunc_ln89_fu_228_p1, "trunc_ln89_fu_228_p1");
    sc_trace(mVcdFile, or_ln89_fu_244_p2, "or_ln89_fu_244_p2");
    sc_trace(mVcdFile, grp_fu_93_p2, "grp_fu_93_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

i_relu3::~i_relu3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete lenet_top_fcmp_32dEe_U29;
}

void i_relu3::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void i_relu3::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_0;
}

void i_relu3::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_4;
}

void i_relu3::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln87_fu_141_p2.read(), ap_const_lv1_1))) {
        i_0_reg_60 = i_reg_257.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_60 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln88_fu_188_p2.read(), ap_const_lv1_1))) {
        j_0_reg_71 = j_reg_270.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln86_fu_99_p2.read(), ap_const_lv1_0))) {
        j_0_reg_71 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_fu_141_p2.read()))) {
        k_0_reg_82 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        k_0_reg_82 = k_reg_283.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_fu_141_p2.read()))) {
        add_ln89_2_reg_275 = add_ln89_2_fu_182_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln86_fu_99_p2.read(), ap_const_lv1_0))) {
        add_ln89_reg_262 = add_ln89_fu_135_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_257 = i_fu_105_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        icmp_ln89_1_reg_303 = icmp_ln89_1_fu_238_p2.read();
        icmp_ln89_reg_298 = icmp_ln89_fu_232_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln88_fu_188_p2.read()))) {
        input_addr_reg_288 =  (sc_lv<11>) (zext_ln89_5_fu_209_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_270 = j_fu_147_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_reg_283 = k_fu_194_p2.read();
    }
}

void i_relu3::thread_add_ln89_1_fu_157_p2() {
    add_ln89_1_fu_157_p2 = (!zext_ln89_2_fu_153_p1.read().is_01() || !add_ln89_reg_262.read().is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln89_2_fu_153_p1.read()) + sc_biguint<9>(add_ln89_reg_262.read()));
}

void i_relu3::thread_add_ln89_2_fu_182_p2() {
    add_ln89_2_fu_182_p2 = (!p_shl2_cast_fu_162_p3.read().is_01() || !zext_ln89_3_fu_178_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(p_shl2_cast_fu_162_p3.read()) + sc_biguint<12>(zext_ln89_3_fu_178_p1.read()));
}

void i_relu3::thread_add_ln89_3_fu_204_p2() {
    add_ln89_3_fu_204_p2 = (!add_ln89_2_reg_275.read().is_01() || !zext_ln89_4_fu_200_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(add_ln89_2_reg_275.read()) + sc_biguint<12>(zext_ln89_4_fu_200_p1.read()));
}

void i_relu3::thread_add_ln89_fu_135_p2() {
    add_ln89_fu_135_p2 = (!zext_ln89_1_fu_131_p1.read().is_01() || !zext_ln89_fu_119_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln89_1_fu_131_p1.read()) + sc_biguint<9>(zext_ln89_fu_119_p1.read()));
}

void i_relu3::thread_and_ln89_fu_248_p2() {
    and_ln89_fu_248_p2 = (or_ln89_fu_244_p2.read() & grp_fu_93_p2.read());
}

void i_relu3::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void i_relu3::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void i_relu3::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void i_relu3::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void i_relu3::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void i_relu3::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void i_relu3::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln86_fu_99_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void i_relu3::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void i_relu3::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln86_fu_99_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void i_relu3::thread_bitcast_ln89_fu_214_p1() {
    bitcast_ln89_fu_214_p1 = input_r_q0.read();
}

void i_relu3::thread_i_fu_105_p2() {
    i_fu_105_p2 = (!i_0_reg_60.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_60.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void i_relu3::thread_icmp_ln86_fu_99_p2() {
    icmp_ln86_fu_99_p2 = (!i_0_reg_60.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_60.read() == ap_const_lv5_10);
}

void i_relu3::thread_icmp_ln87_fu_141_p2() {
    icmp_ln87_fu_141_p2 = (!j_0_reg_71.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_71.read() == ap_const_lv4_A);
}

void i_relu3::thread_icmp_ln88_fu_188_p2() {
    icmp_ln88_fu_188_p2 = (!k_0_reg_82.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_82.read() == ap_const_lv4_A);
}

void i_relu3::thread_icmp_ln89_1_fu_238_p2() {
    icmp_ln89_1_fu_238_p2 = (!trunc_ln89_fu_228_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln89_fu_228_p1.read() == ap_const_lv23_0);
}

void i_relu3::thread_icmp_ln89_fu_232_p2() {
    icmp_ln89_fu_232_p2 = (!tmp_fu_218_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_218_p4.read() != ap_const_lv8_FF);
}

void i_relu3::thread_input_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        input_r_address0 = input_addr_reg_288.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        input_r_address0 =  (sc_lv<11>) (zext_ln89_5_fu_209_p1.read());
    } else {
        input_r_address0 = "XXXXXXXXXXX";
    }
}

void i_relu3::thread_input_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        input_r_ce0 = ap_const_logic_1;
    } else {
        input_r_ce0 = ap_const_logic_0;
    }
}

void i_relu3::thread_input_r_d0() {
    input_r_d0 = ap_const_lv32_0;
}

void i_relu3::thread_input_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, and_ln89_fu_248_p2.read()))) {
        input_r_we0 = ap_const_logic_1;
    } else {
        input_r_we0 = ap_const_logic_0;
    }
}

void i_relu3::thread_j_fu_147_p2() {
    j_fu_147_p2 = (!j_0_reg_71.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_0_reg_71.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void i_relu3::thread_k_fu_194_p2() {
    k_fu_194_p2 = (!k_0_reg_82.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(k_0_reg_82.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void i_relu3::thread_or_ln89_fu_244_p2() {
    or_ln89_fu_244_p2 = (icmp_ln89_1_reg_303.read() | icmp_ln89_reg_298.read());
}

void i_relu3::thread_p_shl2_cast_fu_162_p3() {
    p_shl2_cast_fu_162_p3 = esl_concat<9,3>(add_ln89_1_fu_157_p2.read(), ap_const_lv3_0);
}

void i_relu3::thread_tmp_1_fu_123_p3() {
    tmp_1_fu_123_p3 = esl_concat<5,1>(i_0_reg_60.read(), ap_const_lv1_0);
}

void i_relu3::thread_tmp_4_fu_170_p3() {
    tmp_4_fu_170_p3 = esl_concat<9,1>(add_ln89_1_fu_157_p2.read(), ap_const_lv1_0);
}

void i_relu3::thread_tmp_fu_218_p4() {
    tmp_fu_218_p4 = bitcast_ln89_fu_214_p1.read().range(30, 23);
}

void i_relu3::thread_tmp_s_fu_111_p3() {
    tmp_s_fu_111_p3 = esl_concat<5,3>(i_0_reg_60.read(), ap_const_lv3_0);
}

void i_relu3::thread_trunc_ln89_fu_228_p1() {
    trunc_ln89_fu_228_p1 = bitcast_ln89_fu_214_p1.read().range(23-1, 0);
}

void i_relu3::thread_zext_ln89_1_fu_131_p1() {
    zext_ln89_1_fu_131_p1 = esl_zext<9,6>(tmp_1_fu_123_p3.read());
}

void i_relu3::thread_zext_ln89_2_fu_153_p1() {
    zext_ln89_2_fu_153_p1 = esl_zext<9,4>(j_0_reg_71.read());
}

void i_relu3::thread_zext_ln89_3_fu_178_p1() {
    zext_ln89_3_fu_178_p1 = esl_zext<12,10>(tmp_4_fu_170_p3.read());
}

void i_relu3::thread_zext_ln89_4_fu_200_p1() {
    zext_ln89_4_fu_200_p1 = esl_zext<12,4>(k_0_reg_82.read());
}

void i_relu3::thread_zext_ln89_5_fu_209_p1() {
    zext_ln89_5_fu_209_p1 = esl_zext<64,12>(add_ln89_3_fu_204_p2.read());
}

void i_relu3::thread_zext_ln89_fu_119_p1() {
    zext_ln89_fu_119_p1 = esl_zext<9,8>(tmp_s_fu_111_p3.read());
}

void i_relu3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln86_fu_99_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln87_fu_141_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln88_fu_188_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

