// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ld_weights5_HH_
#define _ld_weights5_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct ld_weights5 : public sc_module {
    // Port declarations 56
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_weights5_AWVALID;
    sc_in< sc_logic > m_axi_weights5_AWREADY;
    sc_out< sc_lv<32> > m_axi_weights5_AWADDR;
    sc_out< sc_lv<1> > m_axi_weights5_AWID;
    sc_out< sc_lv<32> > m_axi_weights5_AWLEN;
    sc_out< sc_lv<3> > m_axi_weights5_AWSIZE;
    sc_out< sc_lv<2> > m_axi_weights5_AWBURST;
    sc_out< sc_lv<2> > m_axi_weights5_AWLOCK;
    sc_out< sc_lv<4> > m_axi_weights5_AWCACHE;
    sc_out< sc_lv<3> > m_axi_weights5_AWPROT;
    sc_out< sc_lv<4> > m_axi_weights5_AWQOS;
    sc_out< sc_lv<4> > m_axi_weights5_AWREGION;
    sc_out< sc_lv<1> > m_axi_weights5_AWUSER;
    sc_out< sc_logic > m_axi_weights5_WVALID;
    sc_in< sc_logic > m_axi_weights5_WREADY;
    sc_out< sc_lv<32> > m_axi_weights5_WDATA;
    sc_out< sc_lv<4> > m_axi_weights5_WSTRB;
    sc_out< sc_logic > m_axi_weights5_WLAST;
    sc_out< sc_lv<1> > m_axi_weights5_WID;
    sc_out< sc_lv<1> > m_axi_weights5_WUSER;
    sc_out< sc_logic > m_axi_weights5_ARVALID;
    sc_in< sc_logic > m_axi_weights5_ARREADY;
    sc_out< sc_lv<32> > m_axi_weights5_ARADDR;
    sc_out< sc_lv<1> > m_axi_weights5_ARID;
    sc_out< sc_lv<32> > m_axi_weights5_ARLEN;
    sc_out< sc_lv<3> > m_axi_weights5_ARSIZE;
    sc_out< sc_lv<2> > m_axi_weights5_ARBURST;
    sc_out< sc_lv<2> > m_axi_weights5_ARLOCK;
    sc_out< sc_lv<4> > m_axi_weights5_ARCACHE;
    sc_out< sc_lv<3> > m_axi_weights5_ARPROT;
    sc_out< sc_lv<4> > m_axi_weights5_ARQOS;
    sc_out< sc_lv<4> > m_axi_weights5_ARREGION;
    sc_out< sc_lv<1> > m_axi_weights5_ARUSER;
    sc_in< sc_logic > m_axi_weights5_RVALID;
    sc_out< sc_logic > m_axi_weights5_RREADY;
    sc_in< sc_lv<32> > m_axi_weights5_RDATA;
    sc_in< sc_logic > m_axi_weights5_RLAST;
    sc_in< sc_lv<1> > m_axi_weights5_RID;
    sc_in< sc_lv<1> > m_axi_weights5_RUSER;
    sc_in< sc_lv<2> > m_axi_weights5_RRESP;
    sc_in< sc_logic > m_axi_weights5_BVALID;
    sc_out< sc_logic > m_axi_weights5_BREADY;
    sc_in< sc_lv<2> > m_axi_weights5_BRESP;
    sc_in< sc_lv<1> > m_axi_weights5_BID;
    sc_in< sc_lv<1> > m_axi_weights5_BUSER;
    sc_in< sc_lv<30> > weights5_offset;
    sc_out< sc_lv<16> > weights5_buf_address0;
    sc_out< sc_logic > weights5_buf_ce0;
    sc_out< sc_logic > weights5_buf_we0;
    sc_out< sc_lv<32> > weights5_buf_d0;


    // Module declarations
    ld_weights5(sc_module_name name);
    SC_HAS_PROCESS(ld_weights5);

    ~ld_weights5();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<13> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > weights5_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > weights5_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<1> > icmp_ln166_fu_258_p2;
    sc_signal< sc_lv<64> > zext_ln167_fu_143_p1;
    sc_signal< sc_lv<64> > zext_ln167_reg_279;
    sc_signal< sc_lv<7> > i_fu_153_p2;
    sc_signal< sc_lv<7> > i_reg_287;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<12> > zext_ln164_fu_167_p1;
    sc_signal< sc_lv<12> > zext_ln164_reg_292;
    sc_signal< sc_lv<1> > icmp_ln163_fu_147_p2;
    sc_signal< sc_lv<5> > j_fu_177_p2;
    sc_signal< sc_lv<5> > j_reg_300;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > add_ln167_1_fu_208_p2;
    sc_signal< sc_lv<64> > add_ln167_1_reg_305;
    sc_signal< sc_lv<1> > icmp_ln164_fu_171_p2;
    sc_signal< sc_lv<3> > k_fu_220_p2;
    sc_signal< sc_lv<3> > k_reg_313;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > add_ln167_3_fu_241_p2;
    sc_signal< sc_lv<64> > add_ln167_3_reg_318;
    sc_signal< sc_lv<1> > icmp_ln165_fu_214_p2;
    sc_signal< sc_lv<32> > weights5_addr_reg_323;
    sc_signal< sc_lv<3> > l_fu_264_p2;
    sc_signal< sc_lv<3> > l_reg_332;
    sc_signal< bool > ap_block_state12;
    sc_signal< sc_lv<64> > add_ln167_4_fu_274_p2;
    sc_signal< sc_lv<64> > add_ln167_4_reg_337;
    sc_signal< sc_lv<32> > weights5_addr_read_reg_342;
    sc_signal< sc_lv<7> > i_0_reg_99;
    sc_signal< sc_lv<5> > j_0_reg_110;
    sc_signal< sc_lv<3> > k_0_reg_121;
    sc_signal< sc_lv<3> > l_0_reg_132;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<64> > add_ln167_5_fu_247_p2;
    sc_signal< sc_lv<11> > tmp_fu_159_p3;
    sc_signal< sc_lv<12> > zext_ln167_1_fu_183_p1;
    sc_signal< sc_lv<12> > add_ln167_fu_187_p2;
    sc_signal< sc_lv<14> > tmp_1_fu_196_p3;
    sc_signal< sc_lv<64> > zext_ln167_4_fu_192_p1;
    sc_signal< sc_lv<64> > zext_ln167_5_fu_204_p1;
    sc_signal< sc_lv<64> > zext_ln167_2_fu_226_p1;
    sc_signal< sc_lv<64> > add_ln167_2_fu_230_p2;
    sc_signal< sc_lv<64> > shl_ln167_fu_235_p2;
    sc_signal< sc_lv<64> > zext_ln167_3_fu_270_p1;
    sc_signal< sc_lv<13> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<13> ap_ST_fsm_state1;
    static const sc_lv<13> ap_ST_fsm_state2;
    static const sc_lv<13> ap_ST_fsm_state3;
    static const sc_lv<13> ap_ST_fsm_state4;
    static const sc_lv<13> ap_ST_fsm_state5;
    static const sc_lv<13> ap_ST_fsm_state6;
    static const sc_lv<13> ap_ST_fsm_state7;
    static const sc_lv<13> ap_ST_fsm_state8;
    static const sc_lv<13> ap_ST_fsm_state9;
    static const sc_lv<13> ap_ST_fsm_state10;
    static const sc_lv<13> ap_ST_fsm_state11;
    static const sc_lv<13> ap_ST_fsm_state12;
    static const sc_lv<13> ap_ST_fsm_state13;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<7> ap_const_lv7_78;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln167_1_fu_208_p2();
    void thread_add_ln167_2_fu_230_p2();
    void thread_add_ln167_3_fu_241_p2();
    void thread_add_ln167_4_fu_274_p2();
    void thread_add_ln167_5_fu_247_p2();
    void thread_add_ln167_fu_187_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_state12();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_153_p2();
    void thread_icmp_ln163_fu_147_p2();
    void thread_icmp_ln164_fu_171_p2();
    void thread_icmp_ln165_fu_214_p2();
    void thread_icmp_ln166_fu_258_p2();
    void thread_j_fu_177_p2();
    void thread_k_fu_220_p2();
    void thread_l_fu_264_p2();
    void thread_m_axi_weights5_ARADDR();
    void thread_m_axi_weights5_ARBURST();
    void thread_m_axi_weights5_ARCACHE();
    void thread_m_axi_weights5_ARID();
    void thread_m_axi_weights5_ARLEN();
    void thread_m_axi_weights5_ARLOCK();
    void thread_m_axi_weights5_ARPROT();
    void thread_m_axi_weights5_ARQOS();
    void thread_m_axi_weights5_ARREGION();
    void thread_m_axi_weights5_ARSIZE();
    void thread_m_axi_weights5_ARUSER();
    void thread_m_axi_weights5_ARVALID();
    void thread_m_axi_weights5_AWADDR();
    void thread_m_axi_weights5_AWBURST();
    void thread_m_axi_weights5_AWCACHE();
    void thread_m_axi_weights5_AWID();
    void thread_m_axi_weights5_AWLEN();
    void thread_m_axi_weights5_AWLOCK();
    void thread_m_axi_weights5_AWPROT();
    void thread_m_axi_weights5_AWQOS();
    void thread_m_axi_weights5_AWREGION();
    void thread_m_axi_weights5_AWSIZE();
    void thread_m_axi_weights5_AWUSER();
    void thread_m_axi_weights5_AWVALID();
    void thread_m_axi_weights5_BREADY();
    void thread_m_axi_weights5_RREADY();
    void thread_m_axi_weights5_WDATA();
    void thread_m_axi_weights5_WID();
    void thread_m_axi_weights5_WLAST();
    void thread_m_axi_weights5_WSTRB();
    void thread_m_axi_weights5_WUSER();
    void thread_m_axi_weights5_WVALID();
    void thread_shl_ln167_fu_235_p2();
    void thread_tmp_1_fu_196_p3();
    void thread_tmp_fu_159_p3();
    void thread_weights5_blk_n_AR();
    void thread_weights5_blk_n_R();
    void thread_weights5_buf_address0();
    void thread_weights5_buf_ce0();
    void thread_weights5_buf_d0();
    void thread_weights5_buf_we0();
    void thread_zext_ln164_fu_167_p1();
    void thread_zext_ln167_1_fu_183_p1();
    void thread_zext_ln167_2_fu_226_p1();
    void thread_zext_ln167_3_fu_270_p1();
    void thread_zext_ln167_4_fu_192_p1();
    void thread_zext_ln167_5_fu_204_p1();
    void thread_zext_ln167_fu_143_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
