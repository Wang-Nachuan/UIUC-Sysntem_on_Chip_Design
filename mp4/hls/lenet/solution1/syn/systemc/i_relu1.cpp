// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "i_relu1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic i_relu1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic i_relu1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> i_relu1::ap_ST_fsm_state1 = "1";
const sc_lv<6> i_relu1::ap_ST_fsm_state2 = "10";
const sc_lv<6> i_relu1::ap_ST_fsm_state3 = "100";
const sc_lv<6> i_relu1::ap_ST_fsm_state4 = "1000";
const sc_lv<6> i_relu1::ap_ST_fsm_state5 = "10000";
const sc_lv<6> i_relu1::ap_ST_fsm_state6 = "100000";
const sc_lv<32> i_relu1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> i_relu1::ap_const_lv32_1 = "1";
const sc_lv<1> i_relu1::ap_const_lv1_0 = "0";
const sc_lv<32> i_relu1::ap_const_lv32_2 = "10";
const sc_lv<32> i_relu1::ap_const_lv32_3 = "11";
const sc_lv<32> i_relu1::ap_const_lv32_4 = "100";
const sc_lv<3> i_relu1::ap_const_lv3_0 = "000";
const sc_lv<1> i_relu1::ap_const_lv1_1 = "1";
const sc_lv<5> i_relu1::ap_const_lv5_0 = "00000";
const sc_lv<32> i_relu1::ap_const_lv32_5 = "101";
const sc_lv<3> i_relu1::ap_const_lv3_6 = "110";
const sc_lv<3> i_relu1::ap_const_lv3_1 = "1";
const sc_lv<2> i_relu1::ap_const_lv2_0 = "00";
const sc_lv<5> i_relu1::ap_const_lv5_1C = "11100";
const sc_lv<5> i_relu1::ap_const_lv5_1 = "1";
const sc_lv<32> i_relu1::ap_const_lv32_17 = "10111";
const sc_lv<32> i_relu1::ap_const_lv32_1E = "11110";
const sc_lv<8> i_relu1::ap_const_lv8_FF = "11111111";
const sc_lv<23> i_relu1::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> i_relu1::ap_const_lv5_4 = "100";
const bool i_relu1::ap_const_boolean_1 = true;

i_relu1::i_relu1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    lenet_top_fcmp_32dEe_U15 = new lenet_top_fcmp_32dEe<1,2,32,32,1>("lenet_top_fcmp_32dEe_U15");
    lenet_top_fcmp_32dEe_U15->clk(ap_clk);
    lenet_top_fcmp_32dEe_U15->reset(ap_rst);
    lenet_top_fcmp_32dEe_U15->din0(input_r_q0);
    lenet_top_fcmp_32dEe_U15->din1(ap_var_for_const0);
    lenet_top_fcmp_32dEe_U15->ce(ap_var_for_const1);
    lenet_top_fcmp_32dEe_U15->opcode(ap_var_for_const2);
    lenet_top_fcmp_32dEe_U15->dout(grp_fu_91_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln33_1_fu_210_p2);
    sensitive << ( sub_ln33_1_reg_281 );
    sensitive << ( zext_ln33_3_fu_206_p1 );

    SC_METHOD(thread_add_ln33_fu_159_p2);
    sensitive << ( sext_ln33_reg_268 );
    sensitive << ( zext_ln33_2_fu_155_p1 );

    SC_METHOD(thread_and_ln33_fu_254_p2);
    sensitive << ( or_ln33_fu_250_p2 );
    sensitive << ( grp_fu_91_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_97_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_97_p2 );

    SC_METHOD(thread_bitcast_ln33_fu_220_p1);
    sensitive << ( input_r_q0 );

    SC_METHOD(thread_i_fu_103_p2);
    sensitive << ( i_0_reg_58 );

    SC_METHOD(thread_icmp_ln30_fu_97_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_58 );

    SC_METHOD(thread_icmp_ln31_fu_143_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_69 );

    SC_METHOD(thread_icmp_ln32_fu_194_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( k_0_reg_80 );

    SC_METHOD(thread_icmp_ln33_1_fu_244_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( trunc_ln33_1_fu_234_p1 );

    SC_METHOD(thread_icmp_ln33_fu_238_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_fu_224_p4 );

    SC_METHOD(thread_input_r_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( input_addr_reg_294 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln33_4_fu_215_p1 );

    SC_METHOD(thread_input_r_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_input_r_d0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_input_r_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( and_ln33_fu_254_p2 );

    SC_METHOD(thread_j_fu_149_p2);
    sensitive << ( j_0_reg_69 );

    SC_METHOD(thread_k_fu_200_p2);
    sensitive << ( k_0_reg_80 );

    SC_METHOD(thread_or_ln33_fu_250_p2);
    sensitive << ( icmp_ln33_reg_304 );
    sensitive << ( icmp_ln33_1_reg_309 );

    SC_METHOD(thread_p_shl2_cast_fu_168_p3);
    sensitive << ( trunc_ln33_fu_164_p1 );

    SC_METHOD(thread_sext_ln33_1_fu_184_p1);
    sensitive << ( tmp_6_fu_176_p3 );

    SC_METHOD(thread_sext_ln33_fu_139_p1);
    sensitive << ( sub_ln33_fu_133_p2 );

    SC_METHOD(thread_sub_ln33_1_fu_188_p2);
    sensitive << ( p_shl2_cast_fu_168_p3 );
    sensitive << ( sext_ln33_1_fu_184_p1 );

    SC_METHOD(thread_sub_ln33_fu_133_p2);
    sensitive << ( zext_ln33_fu_117_p1 );
    sensitive << ( zext_ln33_1_fu_129_p1 );

    SC_METHOD(thread_tmp_3_fu_121_p3);
    sensitive << ( i_0_reg_58 );

    SC_METHOD(thread_tmp_6_fu_176_p3);
    sensitive << ( add_ln33_fu_159_p2 );

    SC_METHOD(thread_tmp_fu_224_p4);
    sensitive << ( bitcast_ln33_fu_220_p1 );

    SC_METHOD(thread_tmp_s_fu_109_p3);
    sensitive << ( i_0_reg_58 );

    SC_METHOD(thread_trunc_ln33_1_fu_234_p1);
    sensitive << ( bitcast_ln33_fu_220_p1 );

    SC_METHOD(thread_trunc_ln33_fu_164_p1);
    sensitive << ( add_ln33_fu_159_p2 );

    SC_METHOD(thread_zext_ln33_1_fu_129_p1);
    sensitive << ( tmp_3_fu_121_p3 );

    SC_METHOD(thread_zext_ln33_2_fu_155_p1);
    sensitive << ( j_0_reg_69 );

    SC_METHOD(thread_zext_ln33_3_fu_206_p1);
    sensitive << ( k_0_reg_80 );

    SC_METHOD(thread_zext_ln33_4_fu_215_p1);
    sensitive << ( add_ln33_1_fu_210_p2 );

    SC_METHOD(thread_zext_ln33_fu_117_p1);
    sensitive << ( tmp_s_fu_109_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_97_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln31_fu_143_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln32_fu_194_p2 );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "i_relu1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_r_address0, "(port)input_r_address0");
    sc_trace(mVcdFile, input_r_ce0, "(port)input_r_ce0");
    sc_trace(mVcdFile, input_r_we0, "(port)input_r_we0");
    sc_trace(mVcdFile, input_r_d0, "(port)input_r_d0");
    sc_trace(mVcdFile, input_r_q0, "(port)input_r_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_103_p2, "i_fu_103_p2");
    sc_trace(mVcdFile, i_reg_263, "i_reg_263");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, sext_ln33_fu_139_p1, "sext_ln33_fu_139_p1");
    sc_trace(mVcdFile, sext_ln33_reg_268, "sext_ln33_reg_268");
    sc_trace(mVcdFile, icmp_ln30_fu_97_p2, "icmp_ln30_fu_97_p2");
    sc_trace(mVcdFile, j_fu_149_p2, "j_fu_149_p2");
    sc_trace(mVcdFile, j_reg_276, "j_reg_276");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, sub_ln33_1_fu_188_p2, "sub_ln33_1_fu_188_p2");
    sc_trace(mVcdFile, sub_ln33_1_reg_281, "sub_ln33_1_reg_281");
    sc_trace(mVcdFile, icmp_ln31_fu_143_p2, "icmp_ln31_fu_143_p2");
    sc_trace(mVcdFile, k_fu_200_p2, "k_fu_200_p2");
    sc_trace(mVcdFile, k_reg_289, "k_reg_289");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, input_addr_reg_294, "input_addr_reg_294");
    sc_trace(mVcdFile, icmp_ln32_fu_194_p2, "icmp_ln32_fu_194_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln33_fu_238_p2, "icmp_ln33_fu_238_p2");
    sc_trace(mVcdFile, icmp_ln33_reg_304, "icmp_ln33_reg_304");
    sc_trace(mVcdFile, icmp_ln33_1_fu_244_p2, "icmp_ln33_1_fu_244_p2");
    sc_trace(mVcdFile, icmp_ln33_1_reg_309, "icmp_ln33_1_reg_309");
    sc_trace(mVcdFile, i_0_reg_58, "i_0_reg_58");
    sc_trace(mVcdFile, j_0_reg_69, "j_0_reg_69");
    sc_trace(mVcdFile, k_0_reg_80, "k_0_reg_80");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln33_4_fu_215_p1, "zext_ln33_4_fu_215_p1");
    sc_trace(mVcdFile, and_ln33_fu_254_p2, "and_ln33_fu_254_p2");
    sc_trace(mVcdFile, tmp_s_fu_109_p3, "tmp_s_fu_109_p3");
    sc_trace(mVcdFile, tmp_3_fu_121_p3, "tmp_3_fu_121_p3");
    sc_trace(mVcdFile, zext_ln33_fu_117_p1, "zext_ln33_fu_117_p1");
    sc_trace(mVcdFile, zext_ln33_1_fu_129_p1, "zext_ln33_1_fu_129_p1");
    sc_trace(mVcdFile, sub_ln33_fu_133_p2, "sub_ln33_fu_133_p2");
    sc_trace(mVcdFile, zext_ln33_2_fu_155_p1, "zext_ln33_2_fu_155_p1");
    sc_trace(mVcdFile, add_ln33_fu_159_p2, "add_ln33_fu_159_p2");
    sc_trace(mVcdFile, trunc_ln33_fu_164_p1, "trunc_ln33_fu_164_p1");
    sc_trace(mVcdFile, tmp_6_fu_176_p3, "tmp_6_fu_176_p3");
    sc_trace(mVcdFile, p_shl2_cast_fu_168_p3, "p_shl2_cast_fu_168_p3");
    sc_trace(mVcdFile, sext_ln33_1_fu_184_p1, "sext_ln33_1_fu_184_p1");
    sc_trace(mVcdFile, zext_ln33_3_fu_206_p1, "zext_ln33_3_fu_206_p1");
    sc_trace(mVcdFile, add_ln33_1_fu_210_p2, "add_ln33_1_fu_210_p2");
    sc_trace(mVcdFile, bitcast_ln33_fu_220_p1, "bitcast_ln33_fu_220_p1");
    sc_trace(mVcdFile, tmp_fu_224_p4, "tmp_fu_224_p4");
    sc_trace(mVcdFile, trunc_ln33_1_fu_234_p1, "trunc_ln33_1_fu_234_p1");
    sc_trace(mVcdFile, or_ln33_fu_250_p2, "or_ln33_fu_250_p2");
    sc_trace(mVcdFile, grp_fu_91_p2, "grp_fu_91_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

i_relu1::~i_relu1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete lenet_top_fcmp_32dEe_U15;
}

void i_relu1::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void i_relu1::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_0;
}

void i_relu1::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_4;
}

void i_relu1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln31_fu_143_p2.read(), ap_const_lv1_1))) {
        i_0_reg_58 = i_reg_263.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_58 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln32_fu_194_p2.read(), ap_const_lv1_1))) {
        j_0_reg_69 = j_reg_276.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln30_fu_97_p2.read(), ap_const_lv1_0))) {
        j_0_reg_69 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln31_fu_143_p2.read()))) {
        k_0_reg_80 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        k_0_reg_80 = k_reg_289.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_263 = i_fu_103_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        icmp_ln33_1_reg_309 = icmp_ln33_1_fu_244_p2.read();
        icmp_ln33_reg_304 = icmp_ln33_fu_238_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln32_fu_194_p2.read()))) {
        input_addr_reg_294 =  (sc_lv<13>) (zext_ln33_4_fu_215_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_276 = j_fu_149_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_reg_289 = k_fu_200_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln30_fu_97_p2.read(), ap_const_lv1_0))) {
        sext_ln33_reg_268 = sext_ln33_fu_139_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln31_fu_143_p2.read()))) {
        sub_ln33_1_reg_281 = sub_ln33_1_fu_188_p2.read();
    }
}

void i_relu1::thread_add_ln33_1_fu_210_p2() {
    add_ln33_1_fu_210_p2 = (!sub_ln33_1_reg_281.read().is_01() || !zext_ln33_3_fu_206_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(sub_ln33_1_reg_281.read()) + sc_biguint<14>(zext_ln33_3_fu_206_p1.read()));
}

void i_relu1::thread_add_ln33_fu_159_p2() {
    add_ln33_fu_159_p2 = (!sext_ln33_reg_268.read().is_01() || !zext_ln33_2_fu_155_p1.read().is_01())? sc_lv<10>(): (sc_bigint<10>(sext_ln33_reg_268.read()) + sc_biguint<10>(zext_ln33_2_fu_155_p1.read()));
}

void i_relu1::thread_and_ln33_fu_254_p2() {
    and_ln33_fu_254_p2 = (or_ln33_fu_250_p2.read() & grp_fu_91_p2.read());
}

void i_relu1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void i_relu1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void i_relu1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void i_relu1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void i_relu1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void i_relu1::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void i_relu1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln30_fu_97_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void i_relu1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void i_relu1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln30_fu_97_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void i_relu1::thread_bitcast_ln33_fu_220_p1() {
    bitcast_ln33_fu_220_p1 = input_r_q0.read();
}

void i_relu1::thread_i_fu_103_p2() {
    i_fu_103_p2 = (!i_0_reg_58.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_reg_58.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void i_relu1::thread_icmp_ln30_fu_97_p2() {
    icmp_ln30_fu_97_p2 = (!i_0_reg_58.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_58.read() == ap_const_lv3_6);
}

void i_relu1::thread_icmp_ln31_fu_143_p2() {
    icmp_ln31_fu_143_p2 = (!j_0_reg_69.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_69.read() == ap_const_lv5_1C);
}

void i_relu1::thread_icmp_ln32_fu_194_p2() {
    icmp_ln32_fu_194_p2 = (!k_0_reg_80.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_80.read() == ap_const_lv5_1C);
}

void i_relu1::thread_icmp_ln33_1_fu_244_p2() {
    icmp_ln33_1_fu_244_p2 = (!trunc_ln33_1_fu_234_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln33_1_fu_234_p1.read() == ap_const_lv23_0);
}

void i_relu1::thread_icmp_ln33_fu_238_p2() {
    icmp_ln33_fu_238_p2 = (!tmp_fu_224_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_224_p4.read() != ap_const_lv8_FF);
}

void i_relu1::thread_input_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        input_r_address0 = input_addr_reg_294.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        input_r_address0 =  (sc_lv<13>) (zext_ln33_4_fu_215_p1.read());
    } else {
        input_r_address0 = "XXXXXXXXXXXXX";
    }
}

void i_relu1::thread_input_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        input_r_ce0 = ap_const_logic_1;
    } else {
        input_r_ce0 = ap_const_logic_0;
    }
}

void i_relu1::thread_input_r_d0() {
    input_r_d0 = ap_const_lv32_0;
}

void i_relu1::thread_input_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, and_ln33_fu_254_p2.read()))) {
        input_r_we0 = ap_const_logic_1;
    } else {
        input_r_we0 = ap_const_logic_0;
    }
}

void i_relu1::thread_j_fu_149_p2() {
    j_fu_149_p2 = (!j_0_reg_69.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_0_reg_69.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void i_relu1::thread_k_fu_200_p2() {
    k_fu_200_p2 = (!k_0_reg_80.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(k_0_reg_80.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void i_relu1::thread_or_ln33_fu_250_p2() {
    or_ln33_fu_250_p2 = (icmp_ln33_1_reg_309.read() | icmp_ln33_reg_304.read());
}

void i_relu1::thread_p_shl2_cast_fu_168_p3() {
    p_shl2_cast_fu_168_p3 = esl_concat<9,5>(trunc_ln33_fu_164_p1.read(), ap_const_lv5_0);
}

void i_relu1::thread_sext_ln33_1_fu_184_p1() {
    sext_ln33_1_fu_184_p1 = esl_sext<14,12>(tmp_6_fu_176_p3.read());
}

void i_relu1::thread_sext_ln33_fu_139_p1() {
    sext_ln33_fu_139_p1 = esl_sext<10,9>(sub_ln33_fu_133_p2.read());
}

void i_relu1::thread_sub_ln33_1_fu_188_p2() {
    sub_ln33_1_fu_188_p2 = (!p_shl2_cast_fu_168_p3.read().is_01() || !sext_ln33_1_fu_184_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(p_shl2_cast_fu_168_p3.read()) - sc_bigint<14>(sext_ln33_1_fu_184_p1.read()));
}

void i_relu1::thread_sub_ln33_fu_133_p2() {
    sub_ln33_fu_133_p2 = (!zext_ln33_fu_117_p1.read().is_01() || !zext_ln33_1_fu_129_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln33_fu_117_p1.read()) - sc_biguint<9>(zext_ln33_1_fu_129_p1.read()));
}

void i_relu1::thread_tmp_3_fu_121_p3() {
    tmp_3_fu_121_p3 = esl_concat<3,2>(i_0_reg_58.read(), ap_const_lv2_0);
}

void i_relu1::thread_tmp_6_fu_176_p3() {
    tmp_6_fu_176_p3 = esl_concat<10,2>(add_ln33_fu_159_p2.read(), ap_const_lv2_0);
}

void i_relu1::thread_tmp_fu_224_p4() {
    tmp_fu_224_p4 = bitcast_ln33_fu_220_p1.read().range(30, 23);
}

void i_relu1::thread_tmp_s_fu_109_p3() {
    tmp_s_fu_109_p3 = esl_concat<3,5>(i_0_reg_58.read(), ap_const_lv5_0);
}

void i_relu1::thread_trunc_ln33_1_fu_234_p1() {
    trunc_ln33_1_fu_234_p1 = bitcast_ln33_fu_220_p1.read().range(23-1, 0);
}

void i_relu1::thread_trunc_ln33_fu_164_p1() {
    trunc_ln33_fu_164_p1 = add_ln33_fu_159_p2.read().range(9-1, 0);
}

void i_relu1::thread_zext_ln33_1_fu_129_p1() {
    zext_ln33_1_fu_129_p1 = esl_zext<9,5>(tmp_3_fu_121_p3.read());
}

void i_relu1::thread_zext_ln33_2_fu_155_p1() {
    zext_ln33_2_fu_155_p1 = esl_zext<10,5>(j_0_reg_69.read());
}

void i_relu1::thread_zext_ln33_3_fu_206_p1() {
    zext_ln33_3_fu_206_p1 = esl_zext<14,5>(k_0_reg_80.read());
}

void i_relu1::thread_zext_ln33_4_fu_215_p1() {
    zext_ln33_4_fu_215_p1 = esl_zext<64,14>(add_ln33_1_fu_210_p2.read());
}

void i_relu1::thread_zext_ln33_fu_117_p1() {
    zext_ln33_fu_117_p1 = esl_zext<9,8>(tmp_s_fu_109_p3.read());
}

void i_relu1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln30_fu_97_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln31_fu_143_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln32_fu_194_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

