// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _i_relu4_HH_
#define _i_relu4_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "lenet_top_fcmp_32dEe.h"

namespace ap_rtl {

struct i_relu4 : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<9> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_out< sc_logic > input_r_we0;
    sc_out< sc_lv<32> > input_r_d0;
    sc_in< sc_lv<32> > input_r_q0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const0;
    sc_signal< sc_lv<5> > ap_var_for_const2;


    // Module declarations
    i_relu4(sc_module_name name);
    SC_HAS_PROCESS(i_relu4);

    ~i_relu4();

    sc_trace_file* mVcdFile;

    lenet_top_fcmp_32dEe<1,2,32,32,1>* lenet_top_fcmp_32dEe_U34;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_fu_99_p2;
    sc_signal< sc_lv<5> > i_reg_235;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > add_ln116_fu_121_p2;
    sc_signal< sc_lv<8> > add_ln116_reg_240;
    sc_signal< sc_lv<1> > icmp_ln113_fu_93_p2;
    sc_signal< sc_lv<3> > j_fu_133_p2;
    sc_signal< sc_lv<3> > j_reg_248;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<10> > add_ln116_2_fu_160_p2;
    sc_signal< sc_lv<10> > add_ln116_2_reg_253;
    sc_signal< sc_lv<1> > icmp_ln114_fu_127_p2;
    sc_signal< sc_lv<3> > k_fu_172_p2;
    sc_signal< sc_lv<3> > k_reg_261;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<9> > input_addr_reg_266;
    sc_signal< sc_lv<1> > icmp_ln115_fu_166_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln116_fu_210_p2;
    sc_signal< sc_lv<1> > icmp_ln116_reg_276;
    sc_signal< sc_lv<1> > icmp_ln116_1_fu_216_p2;
    sc_signal< sc_lv<1> > icmp_ln116_1_reg_281;
    sc_signal< sc_lv<5> > i_0_reg_54;
    sc_signal< sc_lv<3> > j_0_reg_65;
    sc_signal< sc_lv<3> > k_0_reg_76;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > zext_ln116_5_fu_187_p1;
    sc_signal< sc_lv<1> > and_ln116_fu_226_p2;
    sc_signal< sc_lv<7> > tmp_s_fu_109_p3;
    sc_signal< sc_lv<8> > zext_ln116_fu_105_p1;
    sc_signal< sc_lv<8> > zext_ln116_1_fu_117_p1;
    sc_signal< sc_lv<8> > zext_ln116_2_fu_139_p1;
    sc_signal< sc_lv<8> > add_ln116_1_fu_143_p2;
    sc_signal< sc_lv<10> > zext_ln116_3_fu_148_p1;
    sc_signal< sc_lv<10> > p_shl1_cast_fu_152_p3;
    sc_signal< sc_lv<10> > zext_ln116_4_fu_178_p1;
    sc_signal< sc_lv<10> > add_ln116_3_fu_182_p2;
    sc_signal< sc_lv<32> > bitcast_ln116_fu_192_p1;
    sc_signal< sc_lv<8> > tmp_fu_196_p4;
    sc_signal< sc_lv<23> > trunc_ln116_fu_206_p1;
    sc_signal< sc_lv<1> > or_ln116_fu_222_p2;
    sc_signal< sc_lv<1> > grp_fu_87_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const2();
    void thread_ap_clk_no_reset_();
    void thread_add_ln116_1_fu_143_p2();
    void thread_add_ln116_2_fu_160_p2();
    void thread_add_ln116_3_fu_182_p2();
    void thread_add_ln116_fu_121_p2();
    void thread_and_ln116_fu_226_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_bitcast_ln116_fu_192_p1();
    void thread_i_fu_99_p2();
    void thread_icmp_ln113_fu_93_p2();
    void thread_icmp_ln114_fu_127_p2();
    void thread_icmp_ln115_fu_166_p2();
    void thread_icmp_ln116_1_fu_216_p2();
    void thread_icmp_ln116_fu_210_p2();
    void thread_input_r_address0();
    void thread_input_r_ce0();
    void thread_input_r_d0();
    void thread_input_r_we0();
    void thread_j_fu_133_p2();
    void thread_k_fu_172_p2();
    void thread_or_ln116_fu_222_p2();
    void thread_p_shl1_cast_fu_152_p3();
    void thread_tmp_fu_196_p4();
    void thread_tmp_s_fu_109_p3();
    void thread_trunc_ln116_fu_206_p1();
    void thread_zext_ln116_1_fu_117_p1();
    void thread_zext_ln116_2_fu_139_p1();
    void thread_zext_ln116_3_fu_148_p1();
    void thread_zext_ln116_4_fu_178_p1();
    void thread_zext_ln116_5_fu_187_p1();
    void thread_zext_ln116_fu_105_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
