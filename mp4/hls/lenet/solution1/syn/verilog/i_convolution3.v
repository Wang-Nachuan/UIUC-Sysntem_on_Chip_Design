// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module i_convolution3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weights_address0,
        weights_ce0,
        weights_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [11:0] weights_address0;
output   weights_ce0;
input  [31:0] weights_q0;
output  [3:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weights_ce0;
reg bias_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] co_fu_235_p2;
reg   [4:0] co_reg_577;
wire    ap_CS_fsm_state2;
wire  signed [9:0] sext_ln77_fu_276_p1;
reg  signed [9:0] sext_ln77_reg_582;
wire   [0:0] icmp_ln68_fu_229_p2;
wire   [8:0] add_ln79_fu_280_p2;
reg   [8:0] add_ln79_reg_587;
reg   [3:0] bias_addr_reg_592;
wire   [3:0] h_fu_292_p2;
reg   [3:0] h_reg_600;
wire    ap_CS_fsm_state3;
wire   [11:0] add_ln79_2_fu_327_p2;
reg   [11:0] add_ln79_2_reg_605;
wire   [0:0] icmp_ln69_fu_286_p2;
wire   [3:0] w_fu_339_p2;
reg   [3:0] w_reg_613;
wire    ap_CS_fsm_state4;
wire   [2:0] m_fu_355_p2;
reg   [2:0] m_reg_621;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln77_1_fu_361_p1;
reg   [63:0] zext_ln77_1_reg_626;
wire   [0:0] icmp_ln73_fu_349_p2;
wire   [8:0] zext_ln75_1_fu_371_p1;
reg   [8:0] zext_ln75_1_reg_631;
wire   [2:0] n_fu_385_p2;
reg   [2:0] n_reg_639;
wire    ap_CS_fsm_state6;
wire   [12:0] zext_ln77_4_fu_391_p1;
reg   [12:0] zext_ln77_4_reg_644;
wire   [0:0] icmp_ln75_fu_379_p2;
wire   [11:0] zext_ln76_fu_401_p1;
reg   [11:0] zext_ln76_reg_649;
wire   [2:0] ci_fu_411_p2;
reg   [2:0] ci_reg_657;
wire    ap_CS_fsm_state7;
wire   [11:0] add_ln77_3_fu_490_p2;
reg   [11:0] add_ln77_3_reg_662;
wire   [0:0] icmp_ln76_fu_405_p2;
wire   [12:0] trunc_ln77_1_fu_527_p1;
reg   [12:0] trunc_ln77_1_reg_667;
wire   [10:0] trunc_ln77_2_fu_531_p1;
reg   [10:0] trunc_ln77_2_reg_672;
wire    ap_CS_fsm_state8;
reg   [31:0] weights_load_reg_687;
wire    ap_CS_fsm_state9;
reg   [31:0] input_load_reg_692;
wire   [31:0] grp_fu_225_p2;
reg   [31:0] tmp_5_reg_697;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_219_p2;
wire    ap_CS_fsm_state18;
reg   [31:0] bias_load_reg_707;
wire    ap_CS_fsm_state19;
wire   [11:0] add_ln79_3_fu_565_p2;
reg   [11:0] add_ln79_3_reg_712;
reg   [31:0] tmp_reg_717;
wire    ap_CS_fsm_state24;
reg   [4:0] co_0_reg_115;
reg   [3:0] h_0_reg_126;
wire   [0:0] icmp_ln70_fu_333_p2;
reg   [3:0] w_0_reg_138;
wire    ap_CS_fsm_state25;
reg   [31:0] sum_0_reg_150;
reg   [2:0] m_0_reg_162;
reg   [31:0] sum_1_reg_173;
reg   [2:0] n_0_reg_185;
reg   [31:0] sum_2_reg_196;
reg   [2:0] ci_0_reg_208;
wire   [63:0] zext_ln77_fu_241_p1;
wire   [63:0] zext_ln77_8_fu_535_p1;
wire   [63:0] zext_ln77_9_fu_556_p1;
wire   [63:0] zext_ln79_3_fu_570_p1;
reg   [31:0] grp_fu_219_p0;
reg   [31:0] grp_fu_219_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state10;
wire   [7:0] tmp_s_fu_246_p3;
wire   [5:0] tmp_11_fu_258_p3;
wire   [8:0] zext_ln77_2_fu_254_p1;
wire   [8:0] zext_ln77_3_fu_266_p1;
wire   [8:0] sub_ln77_fu_270_p2;
wire   [8:0] zext_ln79_fu_298_p1;
wire   [8:0] add_ln79_1_fu_302_p2;
wire   [9:0] tmp_13_fu_315_p3;
wire   [11:0] p_shl4_cast_fu_307_p3;
wire   [11:0] zext_ln79_1_fu_323_p1;
wire   [3:0] zext_ln73_fu_345_p1;
wire   [3:0] add_ln77_fu_365_p2;
wire   [3:0] zext_ln75_fu_375_p1;
wire   [3:0] add_ln77_1_fu_395_p2;
wire   [6:0] tmp_12_fu_421_p3;
wire   [3:0] tmp_14_fu_433_p3;
wire   [7:0] zext_ln77_6_fu_429_p1;
wire   [7:0] zext_ln77_7_fu_441_p1;
wire   [7:0] sub_ln77_1_fu_445_p2;
wire  signed [8:0] sext_ln77_1_fu_451_p1;
wire   [8:0] add_ln77_2_fu_455_p2;
wire   [7:0] trunc_ln77_fu_460_p1;
wire   [9:0] tmp_15_fu_472_p3;
wire   [11:0] p_shl8_cast_fu_464_p3;
wire  signed [11:0] sext_ln77_2_fu_480_p1;
wire   [11:0] sub_ln77_2_fu_484_p2;
wire   [9:0] zext_ln77_5_fu_417_p1;
wire  signed [9:0] add_ln77_4_fu_495_p2;
wire   [11:0] tmp_16_fu_504_p3;
wire  signed [63:0] sext_ln77_3_fu_500_p1;
wire  signed [63:0] sext_ln77_4_fu_512_p1;
wire   [63:0] add_ln77_5_fu_516_p2;
wire   [63:0] add_ln77_6_fu_522_p2;
wire   [12:0] p_shl6_cast_fu_539_p3;
wire   [12:0] add_ln77_7_fu_546_p2;
wire   [12:0] add_ln77_8_fu_551_p2;
wire   [11:0] zext_ln79_2_fu_561_p1;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
end

lenet_top_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_top_fadd_32bkb_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_219_p0),
    .din1(grp_fu_219_p1),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

lenet_top_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_top_fmul_32cud_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_load_reg_687),
    .din1(input_load_reg_692),
    .ce(1'b1),
    .dout(grp_fu_225_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_379_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ci_0_reg_208 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        ci_0_reg_208 <= ci_reg_657;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_286_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        co_0_reg_115 <= co_reg_577;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        co_0_reg_115 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln70_fu_333_p2 == 1'd1))) begin
        h_0_reg_126 <= h_reg_600;
    end else if (((icmp_ln68_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        h_0_reg_126 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        m_0_reg_162 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln75_fu_379_p2 == 1'd1))) begin
        m_0_reg_162 <= m_reg_621;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln76_fu_405_p2 == 1'd1))) begin
        n_0_reg_185 <= n_reg_639;
    end else if (((icmp_ln73_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        n_0_reg_185 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_0_reg_150 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln75_fu_379_p2 == 1'd1))) begin
        sum_0_reg_150 <= sum_1_reg_173;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln76_fu_405_p2 == 1'd1))) begin
        sum_1_reg_173 <= sum_2_reg_196;
    end else if (((icmp_ln73_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sum_1_reg_173 <= sum_0_reg_150;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_379_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sum_2_reg_196 <= sum_1_reg_173;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        sum_2_reg_196 <= grp_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_286_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        w_0_reg_138 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        w_0_reg_138 <= w_reg_613;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln77_3_reg_662 <= add_ln77_3_fu_490_p2;
        trunc_ln77_1_reg_667 <= trunc_ln77_1_fu_527_p1;
        trunc_ln77_2_reg_672 <= trunc_ln77_2_fu_531_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_286_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln79_2_reg_605[11 : 1] <= add_ln79_2_fu_327_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln79_3_reg_712 <= add_ln79_3_fu_565_p2;
        bias_load_reg_707 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln79_reg_587[8 : 1] <= add_ln79_fu_280_p2[8 : 1];
        bias_addr_reg_592 <= zext_ln77_fu_241_p1;
        sext_ln77_reg_582[9 : 1] <= sext_ln77_fu_276_p1[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ci_reg_657 <= ci_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_reg_577 <= co_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_reg_600 <= h_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_load_reg_692 <= input_r_q0;
        weights_load_reg_687 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_reg_621 <= m_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_reg_639 <= n_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_5_reg_697 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_reg_717 <= grp_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_reg_613 <= w_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln75_1_reg_631[3 : 0] <= zext_ln75_1_fu_371_p1[3 : 0];
        zext_ln77_1_reg_626[2 : 0] <= zext_ln77_1_fu_361_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_379_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        zext_ln76_reg_649[3 : 0] <= zext_ln76_fu_401_p1[3 : 0];
        zext_ln77_4_reg_644[2 : 0] <= zext_ln77_4_fu_391_p1[2 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln68_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_219_p0 = sum_0_reg_150;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_219_p0 = sum_2_reg_196;
    end else begin
        grp_fu_219_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_219_p1 = bias_load_reg_707;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_219_p1 = tmp_5_reg_697;
    end else begin
        grp_fu_219_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln68_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln69_fu_286_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln70_fu_333_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln73_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln75_fu_379_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln76_fu_405_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln77_1_fu_395_p2 = (zext_ln75_fu_375_p1 + w_0_reg_138);

assign add_ln77_2_fu_455_p2 = ($signed(sext_ln77_1_fu_451_p1) + $signed(zext_ln75_1_reg_631));

assign add_ln77_3_fu_490_p2 = (sub_ln77_2_fu_484_p2 + zext_ln76_reg_649);

assign add_ln77_4_fu_495_p2 = ($signed(sext_ln77_reg_582) + $signed(zext_ln77_5_fu_417_p1));

assign add_ln77_5_fu_516_p2 = ($signed(sext_ln77_3_fu_500_p1) + $signed(sext_ln77_4_fu_512_p1));

assign add_ln77_6_fu_522_p2 = (add_ln77_5_fu_516_p2 + zext_ln77_1_reg_626);

assign add_ln77_7_fu_546_p2 = (trunc_ln77_1_reg_667 + p_shl6_cast_fu_539_p3);

assign add_ln77_8_fu_551_p2 = (add_ln77_7_fu_546_p2 + zext_ln77_4_reg_644);

assign add_ln77_fu_365_p2 = (zext_ln73_fu_345_p1 + h_0_reg_126);

assign add_ln79_1_fu_302_p2 = (zext_ln79_fu_298_p1 + add_ln79_reg_587);

assign add_ln79_2_fu_327_p2 = (p_shl4_cast_fu_307_p3 + zext_ln79_1_fu_323_p1);

assign add_ln79_3_fu_565_p2 = (add_ln79_2_reg_605 + zext_ln79_2_fu_561_p1);

assign add_ln79_fu_280_p2 = (zext_ln77_3_fu_266_p1 + zext_ln77_2_fu_254_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_592;

assign ci_fu_411_p2 = (ci_0_reg_208 + 3'd1);

assign co_fu_235_p2 = (co_0_reg_115 + 5'd1);

assign h_fu_292_p2 = (h_0_reg_126 + 4'd1);

assign icmp_ln68_fu_229_p2 = ((co_0_reg_115 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_286_p2 = ((h_0_reg_126 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_333_p2 = ((w_0_reg_138 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_349_p2 = ((m_0_reg_162 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_379_p2 = ((n_0_reg_185 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_405_p2 = ((ci_0_reg_208 == 3'd6) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln77_8_fu_535_p1;

assign m_fu_355_p2 = (m_0_reg_162 + 3'd1);

assign n_fu_385_p2 = (n_0_reg_185 + 3'd1);

assign output_r_address0 = zext_ln79_3_fu_570_p1;

assign output_r_d0 = tmp_reg_717;

assign p_shl4_cast_fu_307_p3 = {{add_ln79_1_fu_302_p2}, {3'd0}};

assign p_shl6_cast_fu_539_p3 = {{trunc_ln77_2_reg_672}, {2'd0}};

assign p_shl8_cast_fu_464_p3 = {{trunc_ln77_fu_460_p1}, {4'd0}};

assign sext_ln77_1_fu_451_p1 = $signed(sub_ln77_1_fu_445_p2);

assign sext_ln77_2_fu_480_p1 = $signed(tmp_15_fu_472_p3);

assign sext_ln77_3_fu_500_p1 = add_ln77_4_fu_495_p2;

assign sext_ln77_4_fu_512_p1 = $signed(tmp_16_fu_504_p3);

assign sext_ln77_fu_276_p1 = $signed(sub_ln77_fu_270_p2);

assign sub_ln77_1_fu_445_p2 = (zext_ln77_6_fu_429_p1 - zext_ln77_7_fu_441_p1);

assign sub_ln77_2_fu_484_p2 = ($signed(p_shl8_cast_fu_464_p3) - $signed(sext_ln77_2_fu_480_p1));

assign sub_ln77_fu_270_p2 = (zext_ln77_2_fu_254_p1 - zext_ln77_3_fu_266_p1);

assign tmp_11_fu_258_p3 = {{co_0_reg_115}, {1'd0}};

assign tmp_12_fu_421_p3 = {{ci_0_reg_208}, {4'd0}};

assign tmp_13_fu_315_p3 = {{add_ln79_1_fu_302_p2}, {1'd0}};

assign tmp_14_fu_433_p3 = {{ci_0_reg_208}, {1'd0}};

assign tmp_15_fu_472_p3 = {{add_ln77_2_fu_455_p2}, {1'd0}};

assign tmp_16_fu_504_p3 = {{add_ln77_4_fu_495_p2}, {2'd0}};

assign tmp_s_fu_246_p3 = {{co_0_reg_115}, {3'd0}};

assign trunc_ln77_1_fu_527_p1 = add_ln77_6_fu_522_p2[12:0];

assign trunc_ln77_2_fu_531_p1 = add_ln77_6_fu_522_p2[10:0];

assign trunc_ln77_fu_460_p1 = add_ln77_2_fu_455_p2[7:0];

assign w_fu_339_p2 = (w_0_reg_138 + 4'd1);

assign weights_address0 = zext_ln77_9_fu_556_p1;

assign zext_ln73_fu_345_p1 = m_0_reg_162;

assign zext_ln75_1_fu_371_p1 = add_ln77_fu_365_p2;

assign zext_ln75_fu_375_p1 = n_0_reg_185;

assign zext_ln76_fu_401_p1 = add_ln77_1_fu_395_p2;

assign zext_ln77_1_fu_361_p1 = m_0_reg_162;

assign zext_ln77_2_fu_254_p1 = tmp_s_fu_246_p3;

assign zext_ln77_3_fu_266_p1 = tmp_11_fu_258_p3;

assign zext_ln77_4_fu_391_p1 = n_0_reg_185;

assign zext_ln77_5_fu_417_p1 = ci_0_reg_208;

assign zext_ln77_6_fu_429_p1 = tmp_12_fu_421_p3;

assign zext_ln77_7_fu_441_p1 = tmp_14_fu_433_p3;

assign zext_ln77_8_fu_535_p1 = add_ln77_3_reg_662;

assign zext_ln77_9_fu_556_p1 = add_ln77_8_fu_551_p2;

assign zext_ln77_fu_241_p1 = co_0_reg_115;

assign zext_ln79_1_fu_323_p1 = tmp_13_fu_315_p3;

assign zext_ln79_2_fu_561_p1 = w_0_reg_138;

assign zext_ln79_3_fu_570_p1 = add_ln79_3_reg_712;

assign zext_ln79_fu_298_p1 = h_0_reg_126;

always @ (posedge ap_clk) begin
    sext_ln77_reg_582[0] <= 1'b0;
    add_ln79_reg_587[0] <= 1'b0;
    add_ln79_2_reg_605[0] <= 1'b0;
    zext_ln77_1_reg_626[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln75_1_reg_631[8:4] <= 5'b00000;
    zext_ln77_4_reg_644[12:3] <= 10'b0000000000;
    zext_ln76_reg_649[11:4] <= 8'b00000000;
end

endmodule //i_convolution3
