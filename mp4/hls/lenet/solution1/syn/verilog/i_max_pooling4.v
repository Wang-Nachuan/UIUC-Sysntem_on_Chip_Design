// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module i_max_pooling4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [8:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] c_fu_179_p2;
reg   [4:0] c_reg_502;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln104_2_fu_213_p2;
reg   [8:0] add_ln104_2_reg_507;
wire   [0:0] icmp_ln96_fu_173_p2;
wire   [7:0] add_ln106_fu_231_p2;
reg   [7:0] add_ln106_reg_512;
wire   [2:0] h_fu_243_p2;
reg   [2:0] h_reg_520;
wire    ap_CS_fsm_state3;
wire   [3:0] shl_ln_fu_249_p3;
reg   [3:0] shl_ln_reg_525;
wire   [0:0] icmp_ln97_fu_237_p2;
wire   [9:0] add_ln106_2_fu_278_p2;
reg   [9:0] add_ln106_2_reg_530;
wire   [2:0] w_fu_290_p2;
reg   [2:0] w_reg_538;
wire    ap_CS_fsm_state4;
wire   [3:0] shl_ln104_1_fu_296_p3;
reg   [3:0] shl_ln104_1_reg_543;
wire   [0:0] icmp_ln98_fu_284_p2;
wire   [1:0] i_fu_314_p2;
reg   [1:0] i_reg_551;
wire    ap_CS_fsm_state5;
wire   [11:0] add_ln104_4_fu_354_p2;
reg   [11:0] add_ln104_4_reg_556;
wire   [0:0] icmp_ln101_fu_308_p2;
wire   [1:0] j_fu_384_p2;
reg   [1:0] j_reg_564;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln103_fu_378_p2;
reg   [31:0] input_load_reg_574;
wire    ap_CS_fsm_state7;
wire   [31:0] max_value_fu_492_p3;
wire    ap_CS_fsm_state8;
reg   [4:0] c_0_reg_86;
reg   [2:0] h_0_reg_97;
reg   [2:0] w_0_reg_108;
reg   [31:0] max_value_0_reg_120;
reg   [1:0] i_0_reg_133;
reg   [31:0] max_value_1_reg_144;
reg   [1:0] j_0_reg_156;
wire   [63:0] zext_ln106_4_fu_369_p1;
wire   [63:0] zext_ln104_6_fu_404_p1;
wire   [7:0] tmp_s_fu_189_p3;
wire   [5:0] tmp_4_fu_201_p3;
wire   [8:0] zext_ln104_2_fu_209_p1;
wire   [8:0] zext_ln104_1_fu_197_p1;
wire   [6:0] tmp_5_fu_219_p3;
wire   [7:0] zext_ln104_fu_185_p1;
wire   [7:0] zext_ln106_fu_227_p1;
wire   [7:0] zext_ln106_1_fu_257_p1;
wire   [7:0] add_ln106_1_fu_261_p2;
wire   [9:0] p_shl3_cast_fu_270_p3;
wire   [9:0] zext_ln106_2_fu_266_p1;
wire   [3:0] zext_ln101_fu_304_p1;
wire   [3:0] add_ln104_fu_320_p2;
wire   [8:0] zext_ln104_3_fu_325_p1;
wire   [8:0] add_ln104_3_fu_329_p2;
wire   [9:0] tmp_7_fu_342_p3;
wire   [11:0] p_shl4_cast_fu_334_p3;
wire   [11:0] zext_ln104_4_fu_350_p1;
wire   [9:0] zext_ln106_3_fu_360_p1;
wire   [9:0] add_ln106_3_fu_364_p2;
wire   [3:0] zext_ln103_fu_374_p1;
wire   [3:0] add_ln104_1_fu_390_p2;
wire   [11:0] zext_ln104_5_fu_395_p1;
wire   [11:0] add_ln104_5_fu_399_p2;
wire   [31:0] bitcast_ln104_fu_409_p1;
wire   [31:0] bitcast_ln104_1_fu_427_p1;
wire   [7:0] tmp_fu_413_p4;
wire   [22:0] trunc_ln104_fu_423_p1;
wire   [0:0] icmp_ln104_1_fu_450_p2;
wire   [0:0] icmp_ln104_fu_444_p2;
wire   [7:0] tmp_8_fu_430_p4;
wire   [22:0] trunc_ln104_1_fu_440_p1;
wire   [0:0] icmp_ln104_3_fu_468_p2;
wire   [0:0] icmp_ln104_2_fu_462_p2;
wire   [0:0] or_ln104_fu_456_p2;
wire   [0:0] or_ln104_1_fu_474_p2;
wire   [0:0] and_ln104_fu_480_p2;
wire   [0:0] grp_fu_167_p2;
wire   [0:0] and_ln104_1_fu_486_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

lenet_top_fcmp_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
lenet_top_fcmp_32dEe_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(max_value_1_reg_144),
    .din1(input_r_q0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_167_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_86 <= c_reg_502;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_86 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        h_0_reg_97 <= h_reg_520;
    end else if (((icmp_ln96_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        h_0_reg_97 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln103_fu_378_p2 == 1'd1))) begin
        i_0_reg_133 <= i_reg_551;
    end else if (((icmp_ln98_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_133 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_reg_156 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_0_reg_156 <= j_reg_564;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln103_fu_378_p2 == 1'd1))) begin
        max_value_0_reg_120 <= max_value_1_reg_144;
    end else if (((icmp_ln98_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_value_0_reg_120 <= 32'd3546862757;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        max_value_1_reg_144 <= max_value_0_reg_120;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        max_value_1_reg_144 <= max_value_fu_492_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        w_0_reg_108 <= 3'd0;
    end else if (((icmp_ln101_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        w_0_reg_108 <= w_reg_538;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln104_2_reg_507[8 : 1] <= add_ln104_2_fu_213_p2[8 : 1];
        add_ln106_reg_512 <= add_ln106_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln104_4_reg_556[11 : 1] <= add_ln104_4_fu_354_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln106_2_reg_530 <= add_ln106_2_fu_278_p2;
        shl_ln_reg_525[3 : 1] <= shl_ln_fu_249_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_reg_502 <= c_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_reg_520 <= h_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_551 <= i_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_load_reg_574 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_564 <= j_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln104_1_reg_543[3 : 1] <= shl_ln104_1_fu_296_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_reg_538 <= w_fu_290_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln96_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln96_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln101_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln96_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln97_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln98_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln101_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln103_fu_378_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln104_1_fu_390_p2 = (zext_ln103_fu_374_p1 + shl_ln104_1_reg_543);

assign add_ln104_2_fu_213_p2 = (zext_ln104_2_fu_209_p1 + zext_ln104_1_fu_197_p1);

assign add_ln104_3_fu_329_p2 = (zext_ln104_3_fu_325_p1 + add_ln104_2_reg_507);

assign add_ln104_4_fu_354_p2 = (p_shl4_cast_fu_334_p3 + zext_ln104_4_fu_350_p1);

assign add_ln104_5_fu_399_p2 = (add_ln104_4_reg_556 + zext_ln104_5_fu_395_p1);

assign add_ln104_fu_320_p2 = (shl_ln_reg_525 + zext_ln101_fu_304_p1);

assign add_ln106_1_fu_261_p2 = (zext_ln106_1_fu_257_p1 + add_ln106_reg_512);

assign add_ln106_2_fu_278_p2 = (p_shl3_cast_fu_270_p3 + zext_ln106_2_fu_266_p1);

assign add_ln106_3_fu_364_p2 = (add_ln106_2_reg_530 + zext_ln106_3_fu_360_p1);

assign add_ln106_fu_231_p2 = (zext_ln104_fu_185_p1 + zext_ln106_fu_227_p1);

assign and_ln104_1_fu_486_p2 = (grp_fu_167_p2 & and_ln104_fu_480_p2);

assign and_ln104_fu_480_p2 = (or_ln104_fu_456_p2 & or_ln104_1_fu_474_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln104_1_fu_427_p1 = input_load_reg_574;

assign bitcast_ln104_fu_409_p1 = max_value_1_reg_144;

assign c_fu_179_p2 = (c_0_reg_86 + 5'd1);

assign h_fu_243_p2 = (h_0_reg_97 + 3'd1);

assign i_fu_314_p2 = (i_0_reg_133 + 2'd1);

assign icmp_ln101_fu_308_p2 = ((i_0_reg_133 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln103_fu_378_p2 = ((j_0_reg_156 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln104_1_fu_450_p2 = ((trunc_ln104_fu_423_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln104_2_fu_462_p2 = ((tmp_8_fu_430_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln104_3_fu_468_p2 = ((trunc_ln104_1_fu_440_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln104_fu_444_p2 = ((tmp_fu_413_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_173_p2 = ((c_0_reg_86 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_237_p2 = ((h_0_reg_97 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_284_p2 = ((w_0_reg_108 == 3'd5) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln104_6_fu_404_p1;

assign j_fu_384_p2 = (j_0_reg_156 + 2'd1);

assign max_value_fu_492_p3 = ((and_ln104_1_fu_486_p2[0:0] === 1'b1) ? max_value_1_reg_144 : input_load_reg_574);

assign or_ln104_1_fu_474_p2 = (icmp_ln104_3_fu_468_p2 | icmp_ln104_2_fu_462_p2);

assign or_ln104_fu_456_p2 = (icmp_ln104_fu_444_p2 | icmp_ln104_1_fu_450_p2);

assign output_r_address0 = zext_ln106_4_fu_369_p1;

assign output_r_d0 = max_value_0_reg_120;

assign p_shl3_cast_fu_270_p3 = {{add_ln106_1_fu_261_p2}, {2'd0}};

assign p_shl4_cast_fu_334_p3 = {{add_ln104_3_fu_329_p2}, {3'd0}};

assign shl_ln104_1_fu_296_p3 = {{w_0_reg_108}, {1'd0}};

assign shl_ln_fu_249_p3 = {{h_0_reg_97}, {1'd0}};

assign tmp_4_fu_201_p3 = {{c_0_reg_86}, {1'd0}};

assign tmp_5_fu_219_p3 = {{c_0_reg_86}, {2'd0}};

assign tmp_7_fu_342_p3 = {{add_ln104_3_fu_329_p2}, {1'd0}};

assign tmp_8_fu_430_p4 = {{bitcast_ln104_1_fu_427_p1[30:23]}};

assign tmp_fu_413_p4 = {{bitcast_ln104_fu_409_p1[30:23]}};

assign tmp_s_fu_189_p3 = {{c_0_reg_86}, {3'd0}};

assign trunc_ln104_1_fu_440_p1 = bitcast_ln104_1_fu_427_p1[22:0];

assign trunc_ln104_fu_423_p1 = bitcast_ln104_fu_409_p1[22:0];

assign w_fu_290_p2 = (w_0_reg_108 + 3'd1);

assign zext_ln101_fu_304_p1 = i_0_reg_133;

assign zext_ln103_fu_374_p1 = j_0_reg_156;

assign zext_ln104_1_fu_197_p1 = tmp_s_fu_189_p3;

assign zext_ln104_2_fu_209_p1 = tmp_4_fu_201_p3;

assign zext_ln104_3_fu_325_p1 = add_ln104_fu_320_p2;

assign zext_ln104_4_fu_350_p1 = tmp_7_fu_342_p3;

assign zext_ln104_5_fu_395_p1 = add_ln104_1_fu_390_p2;

assign zext_ln104_6_fu_404_p1 = add_ln104_5_fu_399_p2;

assign zext_ln104_fu_185_p1 = c_0_reg_86;

assign zext_ln106_1_fu_257_p1 = h_0_reg_97;

assign zext_ln106_2_fu_266_p1 = add_ln106_1_fu_261_p2;

assign zext_ln106_3_fu_360_p1 = w_0_reg_108;

assign zext_ln106_4_fu_369_p1 = add_ln106_3_fu_364_p2;

assign zext_ln106_fu_227_p1 = tmp_5_fu_219_p3;

always @ (posedge ap_clk) begin
    add_ln104_2_reg_507[0] <= 1'b0;
    shl_ln_reg_525[0] <= 1'b0;
    shl_ln104_1_reg_543[0] <= 1'b0;
    add_ln104_4_reg_556[0] <= 1'b0;
end

endmodule //i_max_pooling4
