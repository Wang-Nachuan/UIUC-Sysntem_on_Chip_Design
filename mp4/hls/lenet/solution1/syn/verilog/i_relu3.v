// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module i_relu3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_we0,
        input_r_d0,
        input_r_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_r_address0;
output   input_r_ce0;
output   input_r_we0;
output  [31:0] input_r_d0;
input  [31:0] input_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] input_r_address0;
reg input_r_ce0;
reg input_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_fu_105_p2;
reg   [4:0] i_reg_257;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln89_fu_135_p2;
reg   [8:0] add_ln89_reg_262;
wire   [0:0] icmp_ln86_fu_99_p2;
wire   [3:0] j_fu_147_p2;
reg   [3:0] j_reg_270;
wire    ap_CS_fsm_state3;
wire   [11:0] add_ln89_2_fu_182_p2;
reg   [11:0] add_ln89_2_reg_275;
wire   [0:0] icmp_ln87_fu_141_p2;
wire   [3:0] k_fu_194_p2;
reg   [3:0] k_reg_283;
wire    ap_CS_fsm_state4;
reg   [10:0] input_addr_reg_288;
wire   [0:0] icmp_ln88_fu_188_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln89_fu_232_p2;
reg   [0:0] icmp_ln89_reg_298;
wire   [0:0] icmp_ln89_1_fu_238_p2;
reg   [0:0] icmp_ln89_1_reg_303;
reg   [4:0] i_0_reg_60;
reg   [3:0] j_0_reg_71;
reg   [3:0] k_0_reg_82;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln89_5_fu_209_p1;
wire   [0:0] and_ln89_fu_248_p2;
wire   [7:0] tmp_s_fu_111_p3;
wire   [5:0] tmp_1_fu_123_p3;
wire   [8:0] zext_ln89_1_fu_131_p1;
wire   [8:0] zext_ln89_fu_119_p1;
wire   [8:0] zext_ln89_2_fu_153_p1;
wire   [8:0] add_ln89_1_fu_157_p2;
wire   [9:0] tmp_4_fu_170_p3;
wire   [11:0] p_shl2_cast_fu_162_p3;
wire   [11:0] zext_ln89_3_fu_178_p1;
wire   [11:0] zext_ln89_4_fu_200_p1;
wire   [11:0] add_ln89_3_fu_204_p2;
wire   [31:0] bitcast_ln89_fu_214_p1;
wire   [7:0] tmp_fu_218_p4;
wire   [22:0] trunc_ln89_fu_228_p1;
wire   [0:0] or_ln89_fu_244_p2;
wire   [0:0] grp_fu_93_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

lenet_top_fcmp_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
lenet_top_fcmp_32dEe_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_r_q0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_93_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_60 <= i_reg_257;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_60 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln88_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_71 <= j_reg_270;
    end else if (((icmp_ln86_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_71 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_82 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        k_0_reg_82 <= k_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln89_2_reg_275[11 : 1] <= add_ln89_2_fu_182_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln89_reg_262[8 : 1] <= add_ln89_fu_135_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_257 <= i_fu_105_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln89_1_reg_303 <= icmp_ln89_1_fu_238_p2;
        icmp_ln89_reg_298 <= icmp_ln89_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln88_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        input_addr_reg_288 <= zext_ln89_5_fu_209_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_270 <= j_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_283 <= k_fu_194_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln86_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = input_addr_reg_288;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_address0 = zext_ln89_5_fu_209_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln89_fu_248_p2) & (1'b1 == ap_CS_fsm_state6))) begin
        input_r_we0 = 1'b1;
    end else begin
        input_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln86_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln87_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln88_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln89_1_fu_157_p2 = (zext_ln89_2_fu_153_p1 + add_ln89_reg_262);

assign add_ln89_2_fu_182_p2 = (p_shl2_cast_fu_162_p3 + zext_ln89_3_fu_178_p1);

assign add_ln89_3_fu_204_p2 = (add_ln89_2_reg_275 + zext_ln89_4_fu_200_p1);

assign add_ln89_fu_135_p2 = (zext_ln89_1_fu_131_p1 + zext_ln89_fu_119_p1);

assign and_ln89_fu_248_p2 = (or_ln89_fu_244_p2 & grp_fu_93_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign bitcast_ln89_fu_214_p1 = input_r_q0;

assign i_fu_105_p2 = (i_0_reg_60 + 5'd1);

assign icmp_ln86_fu_99_p2 = ((i_0_reg_60 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_141_p2 = ((j_0_reg_71 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_188_p2 = ((k_0_reg_82 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln89_1_fu_238_p2 = ((trunc_ln89_fu_228_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_232_p2 = ((tmp_fu_218_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_r_d0 = 32'd0;

assign j_fu_147_p2 = (j_0_reg_71 + 4'd1);

assign k_fu_194_p2 = (k_0_reg_82 + 4'd1);

assign or_ln89_fu_244_p2 = (icmp_ln89_reg_298 | icmp_ln89_1_reg_303);

assign p_shl2_cast_fu_162_p3 = {{add_ln89_1_fu_157_p2}, {3'd0}};

assign tmp_1_fu_123_p3 = {{i_0_reg_60}, {1'd0}};

assign tmp_4_fu_170_p3 = {{add_ln89_1_fu_157_p2}, {1'd0}};

assign tmp_fu_218_p4 = {{bitcast_ln89_fu_214_p1[30:23]}};

assign tmp_s_fu_111_p3 = {{i_0_reg_60}, {3'd0}};

assign trunc_ln89_fu_228_p1 = bitcast_ln89_fu_214_p1[22:0];

assign zext_ln89_1_fu_131_p1 = tmp_1_fu_123_p3;

assign zext_ln89_2_fu_153_p1 = j_0_reg_71;

assign zext_ln89_3_fu_178_p1 = tmp_4_fu_170_p3;

assign zext_ln89_4_fu_200_p1 = k_0_reg_82;

assign zext_ln89_5_fu_209_p1 = add_ln89_3_fu_204_p2;

assign zext_ln89_fu_119_p1 = tmp_s_fu_111_p3;

always @ (posedge ap_clk) begin
    add_ln89_reg_262[0] <= 1'b0;
    add_ln89_2_reg_275[0] <= 1'b0;
end

endmodule //i_relu3
