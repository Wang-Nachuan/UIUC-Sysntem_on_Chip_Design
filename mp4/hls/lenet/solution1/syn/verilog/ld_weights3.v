// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ld_weights3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_weights3_AWVALID,
        m_axi_weights3_AWREADY,
        m_axi_weights3_AWADDR,
        m_axi_weights3_AWID,
        m_axi_weights3_AWLEN,
        m_axi_weights3_AWSIZE,
        m_axi_weights3_AWBURST,
        m_axi_weights3_AWLOCK,
        m_axi_weights3_AWCACHE,
        m_axi_weights3_AWPROT,
        m_axi_weights3_AWQOS,
        m_axi_weights3_AWREGION,
        m_axi_weights3_AWUSER,
        m_axi_weights3_WVALID,
        m_axi_weights3_WREADY,
        m_axi_weights3_WDATA,
        m_axi_weights3_WSTRB,
        m_axi_weights3_WLAST,
        m_axi_weights3_WID,
        m_axi_weights3_WUSER,
        m_axi_weights3_ARVALID,
        m_axi_weights3_ARREADY,
        m_axi_weights3_ARADDR,
        m_axi_weights3_ARID,
        m_axi_weights3_ARLEN,
        m_axi_weights3_ARSIZE,
        m_axi_weights3_ARBURST,
        m_axi_weights3_ARLOCK,
        m_axi_weights3_ARCACHE,
        m_axi_weights3_ARPROT,
        m_axi_weights3_ARQOS,
        m_axi_weights3_ARREGION,
        m_axi_weights3_ARUSER,
        m_axi_weights3_RVALID,
        m_axi_weights3_RREADY,
        m_axi_weights3_RDATA,
        m_axi_weights3_RLAST,
        m_axi_weights3_RID,
        m_axi_weights3_RUSER,
        m_axi_weights3_RRESP,
        m_axi_weights3_BVALID,
        m_axi_weights3_BREADY,
        m_axi_weights3_BRESP,
        m_axi_weights3_BID,
        m_axi_weights3_BUSER,
        weights3_offset,
        weights3_buf_address0,
        weights3_buf_ce0,
        weights3_buf_we0,
        weights3_buf_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_weights3_AWVALID;
input   m_axi_weights3_AWREADY;
output  [31:0] m_axi_weights3_AWADDR;
output  [0:0] m_axi_weights3_AWID;
output  [31:0] m_axi_weights3_AWLEN;
output  [2:0] m_axi_weights3_AWSIZE;
output  [1:0] m_axi_weights3_AWBURST;
output  [1:0] m_axi_weights3_AWLOCK;
output  [3:0] m_axi_weights3_AWCACHE;
output  [2:0] m_axi_weights3_AWPROT;
output  [3:0] m_axi_weights3_AWQOS;
output  [3:0] m_axi_weights3_AWREGION;
output  [0:0] m_axi_weights3_AWUSER;
output   m_axi_weights3_WVALID;
input   m_axi_weights3_WREADY;
output  [31:0] m_axi_weights3_WDATA;
output  [3:0] m_axi_weights3_WSTRB;
output   m_axi_weights3_WLAST;
output  [0:0] m_axi_weights3_WID;
output  [0:0] m_axi_weights3_WUSER;
output   m_axi_weights3_ARVALID;
input   m_axi_weights3_ARREADY;
output  [31:0] m_axi_weights3_ARADDR;
output  [0:0] m_axi_weights3_ARID;
output  [31:0] m_axi_weights3_ARLEN;
output  [2:0] m_axi_weights3_ARSIZE;
output  [1:0] m_axi_weights3_ARBURST;
output  [1:0] m_axi_weights3_ARLOCK;
output  [3:0] m_axi_weights3_ARCACHE;
output  [2:0] m_axi_weights3_ARPROT;
output  [3:0] m_axi_weights3_ARQOS;
output  [3:0] m_axi_weights3_ARREGION;
output  [0:0] m_axi_weights3_ARUSER;
input   m_axi_weights3_RVALID;
output   m_axi_weights3_RREADY;
input  [31:0] m_axi_weights3_RDATA;
input   m_axi_weights3_RLAST;
input  [0:0] m_axi_weights3_RID;
input  [0:0] m_axi_weights3_RUSER;
input  [1:0] m_axi_weights3_RRESP;
input   m_axi_weights3_BVALID;
output   m_axi_weights3_BREADY;
input  [1:0] m_axi_weights3_BRESP;
input  [0:0] m_axi_weights3_BID;
input  [0:0] m_axi_weights3_BUSER;
input  [29:0] weights3_offset;
output  [11:0] weights3_buf_address0;
output   weights3_buf_ce0;
output   weights3_buf_we0;
output  [31:0] weights3_buf_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_weights3_ARVALID;
reg m_axi_weights3_RREADY;
reg weights3_buf_ce0;
reg weights3_buf_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weights3_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    weights3_blk_n_R;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln154_fu_278_p2;
wire   [63:0] zext_ln155_fu_141_p1;
reg   [63:0] zext_ln155_reg_299;
wire   [4:0] i_fu_151_p2;
reg   [4:0] i_reg_307;
wire    ap_CS_fsm_state2;
wire  signed [9:0] sext_ln155_fu_187_p1;
reg  signed [9:0] sext_ln155_reg_312;
wire   [0:0] icmp_ln151_fu_145_p2;
wire   [2:0] j_fu_197_p2;
reg   [2:0] j_reg_320;
wire    ap_CS_fsm_state3;
wire   [63:0] add_ln155_1_fu_228_p2;
reg   [63:0] add_ln155_1_reg_325;
wire   [0:0] icmp_ln152_fu_191_p2;
wire   [2:0] k_fu_240_p2;
reg   [2:0] k_reg_333;
wire    ap_CS_fsm_state4;
wire   [63:0] add_ln155_3_fu_261_p2;
reg   [63:0] add_ln155_3_reg_338;
wire   [0:0] icmp_ln153_fu_234_p2;
reg   [31:0] weights3_addr_reg_343;
wire   [2:0] l_fu_284_p2;
reg   [2:0] l_reg_352;
reg    ap_block_state12;
wire   [63:0] add_ln155_4_fu_294_p2;
reg   [63:0] add_ln155_4_reg_357;
reg   [31:0] weights3_addr_read_reg_362;
reg   [4:0] i_0_reg_97;
reg   [2:0] j_0_reg_108;
reg   [2:0] k_0_reg_119;
reg   [2:0] l_0_reg_130;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state11;
wire   [63:0] add_ln155_5_fu_267_p2;
wire   [7:0] tmp_fu_157_p3;
wire   [5:0] tmp_3_fu_169_p3;
wire   [8:0] zext_ln155_1_fu_165_p1;
wire   [8:0] zext_ln155_4_fu_177_p1;
wire   [8:0] sub_ln155_fu_181_p2;
wire   [9:0] zext_ln155_5_fu_203_p1;
wire  signed [9:0] add_ln155_fu_207_p2;
wire   [11:0] tmp_2_fu_216_p3;
wire  signed [63:0] sext_ln155_1_fu_212_p1;
wire  signed [63:0] sext_ln155_2_fu_224_p1;
wire   [63:0] zext_ln155_2_fu_246_p1;
wire   [63:0] add_ln155_2_fu_250_p2;
wire   [63:0] shl_ln155_fu_255_p2;
wire   [63:0] zext_ln155_3_fu_290_p1;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln152_fu_191_p2 == 1'd1))) begin
        i_0_reg_97 <= i_reg_307;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_97 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln153_fu_234_p2 == 1'd1))) begin
        j_0_reg_108 <= j_reg_320;
    end else if (((icmp_ln151_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_108 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln154_fu_278_p2 == 1'd0) & (m_axi_weights3_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln154_fu_278_p2 == 1'd1))) begin
        k_0_reg_119 <= k_reg_333;
    end else if (((icmp_ln152_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_119 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        l_0_reg_130 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        l_0_reg_130 <= l_reg_352;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln152_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln155_1_reg_325 <= add_ln155_1_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln153_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln155_3_reg_338 <= add_ln155_3_fu_261_p2;
        weights3_addr_reg_343 <= add_ln155_5_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln154_fu_278_p2 == 1'd0) & (m_axi_weights3_RVALID == 1'b0)) & (icmp_ln154_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        add_ln155_4_reg_357 <= add_ln155_4_fu_294_p2;
        weights3_addr_read_reg_362 <= m_axi_weights3_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_307 <= i_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_320 <= j_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_333 <= k_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln154_fu_278_p2 == 1'd0) & (m_axi_weights3_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
        l_reg_352 <= l_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln151_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln155_reg_312[9 : 1] <= sext_ln155_fu_187_p1[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        zext_ln155_reg_299[29 : 0] <= zext_ln155_fu_141_p1[29 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln151_fu_145_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln151_fu_145_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_weights3_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_weights3_ARVALID = 1'b1;
    end else begin
        m_axi_weights3_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln154_fu_278_p2 == 1'd0) & (m_axi_weights3_RVALID == 1'b0)) & (icmp_ln154_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_weights3_RREADY = 1'b1;
    end else begin
        m_axi_weights3_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights3_blk_n_AR = m_axi_weights3_ARREADY;
    end else begin
        weights3_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln154_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        weights3_blk_n_R = m_axi_weights3_RVALID;
    end else begin
        weights3_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weights3_buf_ce0 = 1'b1;
    end else begin
        weights3_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weights3_buf_we0 = 1'b1;
    end else begin
        weights3_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln151_fu_145_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln152_fu_191_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln153_fu_234_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_weights3_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if ((~((icmp_ln154_fu_278_p2 == 1'd0) & (m_axi_weights3_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln154_fu_278_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((icmp_ln154_fu_278_p2 == 1'd0) & (m_axi_weights3_RVALID == 1'b0)) & (icmp_ln154_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln155_1_fu_228_p2 = ($signed(sext_ln155_1_fu_212_p1) + $signed(sext_ln155_2_fu_224_p1));

assign add_ln155_2_fu_250_p2 = (add_ln155_1_reg_325 + zext_ln155_2_fu_246_p1);

assign add_ln155_3_fu_261_p2 = (add_ln155_2_fu_250_p2 + shl_ln155_fu_255_p2);

assign add_ln155_4_fu_294_p2 = (zext_ln155_3_fu_290_p1 + add_ln155_3_reg_338);

assign add_ln155_5_fu_267_p2 = (zext_ln155_reg_299 + add_ln155_3_fu_261_p2);

assign add_ln155_fu_207_p2 = ($signed(sext_ln155_reg_312) + $signed(zext_ln155_5_fu_203_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state12 = ((icmp_ln154_fu_278_p2 == 1'd0) & (m_axi_weights3_RVALID == 1'b0));
end

assign i_fu_151_p2 = (i_0_reg_97 + 5'd1);

assign icmp_ln151_fu_145_p2 = ((i_0_reg_97 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln152_fu_191_p2 = ((j_0_reg_108 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln153_fu_234_p2 = ((k_0_reg_119 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln154_fu_278_p2 = ((l_0_reg_130 == 3'd5) ? 1'b1 : 1'b0);

assign j_fu_197_p2 = (j_0_reg_108 + 3'd1);

assign k_fu_240_p2 = (k_0_reg_119 + 3'd1);

assign l_fu_284_p2 = (l_0_reg_130 + 3'd1);

assign m_axi_weights3_ARADDR = weights3_addr_reg_343;

assign m_axi_weights3_ARBURST = 2'd0;

assign m_axi_weights3_ARCACHE = 4'd0;

assign m_axi_weights3_ARID = 1'd0;

assign m_axi_weights3_ARLEN = 32'd5;

assign m_axi_weights3_ARLOCK = 2'd0;

assign m_axi_weights3_ARPROT = 3'd0;

assign m_axi_weights3_ARQOS = 4'd0;

assign m_axi_weights3_ARREGION = 4'd0;

assign m_axi_weights3_ARSIZE = 3'd0;

assign m_axi_weights3_ARUSER = 1'd0;

assign m_axi_weights3_AWADDR = 32'd0;

assign m_axi_weights3_AWBURST = 2'd0;

assign m_axi_weights3_AWCACHE = 4'd0;

assign m_axi_weights3_AWID = 1'd0;

assign m_axi_weights3_AWLEN = 32'd0;

assign m_axi_weights3_AWLOCK = 2'd0;

assign m_axi_weights3_AWPROT = 3'd0;

assign m_axi_weights3_AWQOS = 4'd0;

assign m_axi_weights3_AWREGION = 4'd0;

assign m_axi_weights3_AWSIZE = 3'd0;

assign m_axi_weights3_AWUSER = 1'd0;

assign m_axi_weights3_AWVALID = 1'b0;

assign m_axi_weights3_BREADY = 1'b0;

assign m_axi_weights3_WDATA = 32'd0;

assign m_axi_weights3_WID = 1'd0;

assign m_axi_weights3_WLAST = 1'b0;

assign m_axi_weights3_WSTRB = 4'd0;

assign m_axi_weights3_WUSER = 1'd0;

assign m_axi_weights3_WVALID = 1'b0;

assign sext_ln155_1_fu_212_p1 = add_ln155_fu_207_p2;

assign sext_ln155_2_fu_224_p1 = $signed(tmp_2_fu_216_p3);

assign sext_ln155_fu_187_p1 = $signed(sub_ln155_fu_181_p2);

assign shl_ln155_fu_255_p2 = add_ln155_2_fu_250_p2 << 64'd2;

assign sub_ln155_fu_181_p2 = (zext_ln155_1_fu_165_p1 - zext_ln155_4_fu_177_p1);

assign tmp_2_fu_216_p3 = {{add_ln155_fu_207_p2}, {2'd0}};

assign tmp_3_fu_169_p3 = {{i_0_reg_97}, {1'd0}};

assign tmp_fu_157_p3 = {{i_0_reg_97}, {3'd0}};

assign weights3_buf_address0 = add_ln155_4_reg_357;

assign weights3_buf_d0 = weights3_addr_read_reg_362;

assign zext_ln155_1_fu_165_p1 = tmp_fu_157_p3;

assign zext_ln155_2_fu_246_p1 = k_0_reg_119;

assign zext_ln155_3_fu_290_p1 = l_0_reg_130;

assign zext_ln155_4_fu_177_p1 = tmp_3_fu_169_p3;

assign zext_ln155_5_fu_203_p1 = j_0_reg_108;

assign zext_ln155_fu_141_p1 = weights3_offset;

always @ (posedge ap_clk) begin
    zext_ln155_reg_299[63:30] <= 34'b0000000000000000000000000000000000;
    sext_ln155_reg_312[0] <= 1'b0;
end

endmodule //ld_weights3
