// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lenet_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.685200,HLS_SYN_LAT=5149662,HLS_SYN_TPT=none,HLS_SYN_MEM=170,HLS_SYN_DSP=20,HLS_SYN_FF=4733,HLS_SYN_LUT=10387,HLS_VERSION=2019_1}" *)

module lenet_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weights1_address0,
        weights1_ce0,
        weights1_q0,
        bias1_address0,
        bias1_ce0,
        bias1_q0,
        weights3_address0,
        weights3_ce0,
        weights3_q0,
        bias3_address0,
        bias3_ce0,
        bias3_q0,
        weights5_address0,
        weights5_ce0,
        weights5_q0,
        bias5_address0,
        bias5_ce0,
        bias5_q0,
        weights6_address0,
        weights6_ce0,
        weights6_q0,
        bias6_address0,
        bias6_ce0,
        bias6_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 60'd1;
parameter    ap_ST_fsm_state2 = 60'd2;
parameter    ap_ST_fsm_state3 = 60'd4;
parameter    ap_ST_fsm_state4 = 60'd8;
parameter    ap_ST_fsm_state5 = 60'd16;
parameter    ap_ST_fsm_state6 = 60'd32;
parameter    ap_ST_fsm_state7 = 60'd64;
parameter    ap_ST_fsm_state8 = 60'd128;
parameter    ap_ST_fsm_state9 = 60'd256;
parameter    ap_ST_fsm_state10 = 60'd512;
parameter    ap_ST_fsm_state11 = 60'd1024;
parameter    ap_ST_fsm_state12 = 60'd2048;
parameter    ap_ST_fsm_state13 = 60'd4096;
parameter    ap_ST_fsm_state14 = 60'd8192;
parameter    ap_ST_fsm_state15 = 60'd16384;
parameter    ap_ST_fsm_state16 = 60'd32768;
parameter    ap_ST_fsm_state17 = 60'd65536;
parameter    ap_ST_fsm_state18 = 60'd131072;
parameter    ap_ST_fsm_state19 = 60'd262144;
parameter    ap_ST_fsm_state20 = 60'd524288;
parameter    ap_ST_fsm_state21 = 60'd1048576;
parameter    ap_ST_fsm_state22 = 60'd2097152;
parameter    ap_ST_fsm_state23 = 60'd4194304;
parameter    ap_ST_fsm_state24 = 60'd8388608;
parameter    ap_ST_fsm_state25 = 60'd16777216;
parameter    ap_ST_fsm_state26 = 60'd33554432;
parameter    ap_ST_fsm_state27 = 60'd67108864;
parameter    ap_ST_fsm_state28 = 60'd134217728;
parameter    ap_ST_fsm_state29 = 60'd268435456;
parameter    ap_ST_fsm_state30 = 60'd536870912;
parameter    ap_ST_fsm_state31 = 60'd1073741824;
parameter    ap_ST_fsm_state32 = 60'd2147483648;
parameter    ap_ST_fsm_state33 = 60'd4294967296;
parameter    ap_ST_fsm_state34 = 60'd8589934592;
parameter    ap_ST_fsm_state35 = 60'd17179869184;
parameter    ap_ST_fsm_state36 = 60'd34359738368;
parameter    ap_ST_fsm_state37 = 60'd68719476736;
parameter    ap_ST_fsm_state38 = 60'd137438953472;
parameter    ap_ST_fsm_state39 = 60'd274877906944;
parameter    ap_ST_fsm_state40 = 60'd549755813888;
parameter    ap_ST_fsm_state41 = 60'd1099511627776;
parameter    ap_ST_fsm_state42 = 60'd2199023255552;
parameter    ap_ST_fsm_state43 = 60'd4398046511104;
parameter    ap_ST_fsm_state44 = 60'd8796093022208;
parameter    ap_ST_fsm_state45 = 60'd17592186044416;
parameter    ap_ST_fsm_state46 = 60'd35184372088832;
parameter    ap_ST_fsm_state47 = 60'd70368744177664;
parameter    ap_ST_fsm_state48 = 60'd140737488355328;
parameter    ap_ST_fsm_state49 = 60'd281474976710656;
parameter    ap_ST_fsm_state50 = 60'd562949953421312;
parameter    ap_ST_fsm_state51 = 60'd1125899906842624;
parameter    ap_ST_fsm_state52 = 60'd2251799813685248;
parameter    ap_ST_fsm_state53 = 60'd4503599627370496;
parameter    ap_ST_fsm_state54 = 60'd9007199254740992;
parameter    ap_ST_fsm_state55 = 60'd18014398509481984;
parameter    ap_ST_fsm_state56 = 60'd36028797018963968;
parameter    ap_ST_fsm_state57 = 60'd72057594037927936;
parameter    ap_ST_fsm_state58 = 60'd144115188075855872;
parameter    ap_ST_fsm_state59 = 60'd288230376151711744;
parameter    ap_ST_fsm_state60 = 60'd576460752303423488;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [7:0] weights1_address0;
output   weights1_ce0;
input  [31:0] weights1_q0;
output  [2:0] bias1_address0;
output   bias1_ce0;
input  [31:0] bias1_q0;
output  [11:0] weights3_address0;
output   weights3_ce0;
input  [31:0] weights3_q0;
output  [3:0] bias3_address0;
output   bias3_ce0;
input  [31:0] bias3_q0;
output  [15:0] weights5_address0;
output   weights5_ce0;
input  [31:0] weights5_q0;
output  [6:0] bias5_address0;
output   bias5_ce0;
input  [31:0] bias5_q0;
output  [10:0] weights6_address0;
output   weights6_ce0;
input  [31:0] weights6_q0;
output  [3:0] bias6_address0;
output   bias6_ce0;
input  [31:0] bias6_q0;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg bias1_ce0;
reg bias3_ce0;
reg bias5_ce0;
reg weights6_ce0;
reg bias6_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [59:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] input6_inter_0_0_q0;
reg   [31:0] reg_654;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state39;
wire   [5:0] i_fu_666_p2;
reg   [5:0] i_reg_1058;
wire    ap_CS_fsm_state2;
wire   [11:0] zext_ln172_fu_680_p1;
reg   [11:0] zext_ln172_reg_1063;
wire   [0:0] icmp_ln171_fu_660_p2;
wire   [5:0] j_fu_690_p2;
reg   [5:0] j_reg_1071;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln173_1_fu_705_p1;
reg   [63:0] zext_ln173_1_reg_1076;
wire   [0:0] icmp_ln172_fu_684_p2;
wire   [3:0] i_2_fu_716_p2;
reg   [3:0] i_2_reg_1089;
wire    ap_CS_fsm_state6;
wire   [11:0] sub_ln215_fu_746_p2;
reg   [11:0] sub_ln215_reg_1094;
wire   [0:0] icmp_ln213_fu_710_p2;
wire   [6:0] j_1_fu_758_p2;
reg   [6:0] j_1_reg_1102;
wire    ap_CS_fsm_state7;
wire  signed [63:0] sext_ln215_fu_773_p1;
reg  signed [63:0] sext_ln215_reg_1107;
wire   [0:0] icmp_ln214_fu_752_p2;
wire   [2:0] i_9_fu_784_p2;
reg   [2:0] i_9_reg_1120;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln222_fu_790_p1;
reg   [63:0] zext_ln222_reg_1125;
wire   [0:0] icmp_ln221_fu_778_p2;
wire   [4:0] i_10_fu_801_p2;
reg   [4:0] i_10_reg_1138;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln228_fu_807_p1;
reg   [63:0] zext_ln228_reg_1143;
wire   [0:0] icmp_ln227_fu_795_p2;
wire   [6:0] i_11_fu_818_p2;
reg   [6:0] i_11_reg_1156;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln234_fu_824_p1;
reg   [63:0] zext_ln234_reg_1161;
wire   [0:0] icmp_ln233_fu_812_p2;
wire   [3:0] i_12_fu_835_p2;
reg   [3:0] i_12_reg_1174;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln240_fu_841_p1;
reg   [63:0] zext_ln240_reg_1179;
wire   [0:0] icmp_ln239_fu_829_p2;
wire   [6:0] i_13_fu_852_p2;
reg   [6:0] i_13_reg_1192;
wire    ap_CS_fsm_state34;
reg   [6:0] input6_inter_0_0_a_reg_1197;
wire   [0:0] icmp_ln141_fu_846_p2;
wire   [0:0] icmp_ln142_fu_881_p2;
reg   [0:0] icmp_ln142_reg_1202;
wire   [0:0] icmp_ln142_1_fu_887_p2;
reg   [0:0] icmp_ln142_1_reg_1207;
wire   [3:0] n_fu_909_p2;
reg   [3:0] n_reg_1218;
wire    ap_CS_fsm_state37;
wire   [63:0] zext_ln151_fu_915_p1;
reg   [63:0] zext_ln151_reg_1223;
wire   [0:0] icmp_ln149_fu_903_p2;
wire   [11:0] sub_ln154_fu_944_p2;
reg   [11:0] sub_ln154_reg_1228;
reg   [3:0] output_buf_addr_reg_1233;
wire   [6:0] c_fu_956_p2;
reg   [6:0] c_reg_1241;
wire    ap_CS_fsm_state38;
wire   [0:0] icmp_ln152_fu_950_p2;
wire   [31:0] weights6_buf_0_0_q0;
reg   [31:0] weights6_buf_0_0_l_reg_1261;
wire   [31:0] grp_fu_643_p2;
reg   [31:0] tmp_1_i_reg_1266;
wire    ap_CS_fsm_state43;
wire   [31:0] grp_fu_638_p2;
wire    ap_CS_fsm_state48;
wire   [31:0] bias6_buf_q0;
reg   [31:0] bias6_buf_load_reg_1276;
wire    ap_CS_fsm_state49;
reg   [31:0] tmp_i2_reg_1281;
wire    ap_CS_fsm_state54;
wire   [3:0] i_14_fu_987_p2;
reg   [3:0] i_14_reg_1289;
wire    ap_CS_fsm_state56;
reg   [3:0] output_buf_addr_1_reg_1294;
wire   [0:0] icmp_ln163_fu_981_p2;
wire   [31:0] output_buf_q0;
wire    ap_CS_fsm_state57;
wire   [0:0] icmp_ln164_fu_1016_p2;
reg   [0:0] icmp_ln164_reg_1304;
wire   [0:0] icmp_ln164_1_fu_1022_p2;
reg   [0:0] icmp_ln164_1_reg_1309;
wire   [3:0] i_15_fu_1044_p2;
reg   [3:0] i_15_reg_1320;
wire    ap_CS_fsm_state59;
wire   [63:0] zext_ln246_fu_1050_p1;
reg   [63:0] zext_ln246_reg_1325;
wire   [0:0] icmp_ln245_fu_1038_p2;
reg   [9:0] input_buf_0_address0;
reg    input_buf_0_ce0;
reg    input_buf_0_we0;
wire   [31:0] input_buf_0_q0;
reg   [7:0] weights1_buf_0_address0;
reg    weights1_buf_0_ce0;
reg    weights1_buf_0_we0;
wire   [31:0] weights1_buf_0_q0;
reg   [11:0] weights3_buf_address0;
reg    weights3_buf_ce0;
reg    weights3_buf_we0;
wire   [31:0] weights3_buf_q0;
reg   [15:0] weights5_buf_address0;
reg    weights5_buf_ce0;
reg    weights5_buf_we0;
wire   [31:0] weights5_buf_q0;
reg   [10:0] weights6_buf_0_0_address0;
reg    weights6_buf_0_0_ce0;
reg    weights6_buf_0_0_we0;
reg   [2:0] bias1_buf_address0;
reg    bias1_buf_ce0;
reg    bias1_buf_we0;
wire   [31:0] bias1_buf_q0;
reg   [3:0] bias3_buf_address0;
reg    bias3_buf_ce0;
reg    bias3_buf_we0;
wire   [31:0] bias3_buf_q0;
reg   [6:0] bias5_buf_address0;
reg    bias5_buf_ce0;
reg    bias5_buf_we0;
wire   [31:0] bias5_buf_q0;
reg   [3:0] bias6_buf_address0;
reg    bias6_buf_ce0;
reg    bias6_buf_we0;
reg   [3:0] output_buf_address0;
reg    output_buf_ce0;
reg    output_buf_we0;
reg   [31:0] output_buf_d0;
reg   [12:0] input2_inter_address0;
reg    input2_inter_ce0;
reg    input2_inter_we0;
reg   [31:0] input2_inter_d0;
wire   [31:0] input2_inter_q0;
reg   [10:0] input3_inter_address0;
reg    input3_inter_ce0;
reg    input3_inter_we0;
reg   [31:0] input3_inter_d0;
wire   [31:0] input3_inter_q0;
reg   [10:0] input4_inter_address0;
reg    input4_inter_ce0;
reg    input4_inter_we0;
reg   [31:0] input4_inter_d0;
wire   [31:0] input4_inter_q0;
reg   [8:0] input5_inter_address0;
reg    input5_inter_ce0;
reg    input5_inter_we0;
reg   [31:0] input5_inter_d0;
wire   [31:0] input5_inter_q0;
reg   [6:0] input6_inter_0_0_address0;
reg    input6_inter_0_0_ce0;
reg    input6_inter_0_0_we0;
reg   [31:0] input6_inter_0_0_d0;
wire    grp_i_convolution3_fu_561_ap_start;
wire    grp_i_convolution3_fu_561_ap_done;
wire    grp_i_convolution3_fu_561_ap_idle;
wire    grp_i_convolution3_fu_561_ap_ready;
wire   [10:0] grp_i_convolution3_fu_561_input_r_address0;
wire    grp_i_convolution3_fu_561_input_r_ce0;
wire   [11:0] grp_i_convolution3_fu_561_weights_address0;
wire    grp_i_convolution3_fu_561_weights_ce0;
wire   [3:0] grp_i_convolution3_fu_561_bias_address0;
wire    grp_i_convolution3_fu_561_bias_ce0;
wire   [10:0] grp_i_convolution3_fu_561_output_r_address0;
wire    grp_i_convolution3_fu_561_output_r_ce0;
wire    grp_i_convolution3_fu_561_output_r_we0;
wire   [31:0] grp_i_convolution3_fu_561_output_r_d0;
wire    grp_i_convolution5_fu_569_ap_start;
wire    grp_i_convolution5_fu_569_ap_done;
wire    grp_i_convolution5_fu_569_ap_idle;
wire    grp_i_convolution5_fu_569_ap_ready;
wire   [8:0] grp_i_convolution5_fu_569_input_r_address0;
wire    grp_i_convolution5_fu_569_input_r_ce0;
wire   [15:0] grp_i_convolution5_fu_569_weights_address0;
wire    grp_i_convolution5_fu_569_weights_ce0;
wire   [6:0] grp_i_convolution5_fu_569_bias_address0;
wire    grp_i_convolution5_fu_569_bias_ce0;
wire   [6:0] grp_i_convolution5_fu_569_output_0_0_address0;
wire    grp_i_convolution5_fu_569_output_0_0_ce0;
wire    grp_i_convolution5_fu_569_output_0_0_we0;
wire   [31:0] grp_i_convolution5_fu_569_output_0_0_d0;
wire    grp_i_convolution1_fu_577_ap_start;
wire    grp_i_convolution1_fu_577_ap_done;
wire    grp_i_convolution1_fu_577_ap_idle;
wire    grp_i_convolution1_fu_577_ap_ready;
wire   [9:0] grp_i_convolution1_fu_577_input_0_address0;
wire    grp_i_convolution1_fu_577_input_0_ce0;
wire   [7:0] grp_i_convolution1_fu_577_weights_0_address0;
wire    grp_i_convolution1_fu_577_weights_0_ce0;
wire   [2:0] grp_i_convolution1_fu_577_bias_address0;
wire    grp_i_convolution1_fu_577_bias_ce0;
wire   [12:0] grp_i_convolution1_fu_577_output_r_address0;
wire    grp_i_convolution1_fu_577_output_r_ce0;
wire    grp_i_convolution1_fu_577_output_r_we0;
wire   [31:0] grp_i_convolution1_fu_577_output_r_d0;
wire    grp_i_max_pooling2_fu_585_ap_start;
wire    grp_i_max_pooling2_fu_585_ap_done;
wire    grp_i_max_pooling2_fu_585_ap_idle;
wire    grp_i_max_pooling2_fu_585_ap_ready;
wire   [12:0] grp_i_max_pooling2_fu_585_input_r_address0;
wire    grp_i_max_pooling2_fu_585_input_r_ce0;
wire   [10:0] grp_i_max_pooling2_fu_585_output_r_address0;
wire    grp_i_max_pooling2_fu_585_output_r_ce0;
wire    grp_i_max_pooling2_fu_585_output_r_we0;
wire   [31:0] grp_i_max_pooling2_fu_585_output_r_d0;
wire    grp_i_max_pooling4_fu_591_ap_start;
wire    grp_i_max_pooling4_fu_591_ap_done;
wire    grp_i_max_pooling4_fu_591_ap_idle;
wire    grp_i_max_pooling4_fu_591_ap_ready;
wire   [10:0] grp_i_max_pooling4_fu_591_input_r_address0;
wire    grp_i_max_pooling4_fu_591_input_r_ce0;
wire   [8:0] grp_i_max_pooling4_fu_591_output_r_address0;
wire    grp_i_max_pooling4_fu_591_output_r_ce0;
wire    grp_i_max_pooling4_fu_591_output_r_we0;
wire   [31:0] grp_i_max_pooling4_fu_591_output_r_d0;
wire    grp_i_relu1_fu_597_ap_start;
wire    grp_i_relu1_fu_597_ap_done;
wire    grp_i_relu1_fu_597_ap_idle;
wire    grp_i_relu1_fu_597_ap_ready;
wire   [12:0] grp_i_relu1_fu_597_input_r_address0;
wire    grp_i_relu1_fu_597_input_r_ce0;
wire    grp_i_relu1_fu_597_input_r_we0;
wire   [31:0] grp_i_relu1_fu_597_input_r_d0;
wire    grp_i_relu3_fu_602_ap_start;
wire    grp_i_relu3_fu_602_ap_done;
wire    grp_i_relu3_fu_602_ap_idle;
wire    grp_i_relu3_fu_602_ap_ready;
wire   [10:0] grp_i_relu3_fu_602_input_r_address0;
wire    grp_i_relu3_fu_602_input_r_ce0;
wire    grp_i_relu3_fu_602_input_r_we0;
wire   [31:0] grp_i_relu3_fu_602_input_r_d0;
wire    grp_i_relu4_fu_607_ap_start;
wire    grp_i_relu4_fu_607_ap_done;
wire    grp_i_relu4_fu_607_ap_idle;
wire    grp_i_relu4_fu_607_ap_ready;
wire   [8:0] grp_i_relu4_fu_607_input_r_address0;
wire    grp_i_relu4_fu_607_input_r_ce0;
wire    grp_i_relu4_fu_607_input_r_we0;
wire   [31:0] grp_i_relu4_fu_607_input_r_d0;
wire    grp_i_relu2_fu_612_ap_start;
wire    grp_i_relu2_fu_612_ap_done;
wire    grp_i_relu2_fu_612_ap_idle;
wire    grp_i_relu2_fu_612_ap_ready;
wire   [10:0] grp_i_relu2_fu_612_input_r_address0;
wire    grp_i_relu2_fu_612_input_r_ce0;
wire    grp_i_relu2_fu_612_input_r_we0;
wire   [31:0] grp_i_relu2_fu_612_input_r_d0;
wire    grp_ld_weights5_fu_617_ap_start;
wire    grp_ld_weights5_fu_617_ap_done;
wire    grp_ld_weights5_fu_617_ap_idle;
wire    grp_ld_weights5_fu_617_ap_ready;
wire   [15:0] grp_ld_weights5_fu_617_weights5_address0;
wire    grp_ld_weights5_fu_617_weights5_ce0;
wire   [15:0] grp_ld_weights5_fu_617_weights5_buf_address0;
wire    grp_ld_weights5_fu_617_weights5_buf_ce0;
wire    grp_ld_weights5_fu_617_weights5_buf_we0;
wire   [31:0] grp_ld_weights5_fu_617_weights5_buf_d0;
wire    grp_ld_weights3_fu_624_ap_start;
wire    grp_ld_weights3_fu_624_ap_done;
wire    grp_ld_weights3_fu_624_ap_idle;
wire    grp_ld_weights3_fu_624_ap_ready;
wire   [11:0] grp_ld_weights3_fu_624_weights3_address0;
wire    grp_ld_weights3_fu_624_weights3_ce0;
wire   [11:0] grp_ld_weights3_fu_624_weights3_buf_address0;
wire    grp_ld_weights3_fu_624_weights3_buf_ce0;
wire    grp_ld_weights3_fu_624_weights3_buf_we0;
wire   [31:0] grp_ld_weights3_fu_624_weights3_buf_d0;
wire    grp_ld_weights1_fu_631_ap_start;
wire    grp_ld_weights1_fu_631_ap_done;
wire    grp_ld_weights1_fu_631_ap_idle;
wire    grp_ld_weights1_fu_631_ap_ready;
wire   [7:0] grp_ld_weights1_fu_631_weights1_address0;
wire    grp_ld_weights1_fu_631_weights1_ce0;
wire   [7:0] grp_ld_weights1_fu_631_weights1_buf_0_address0;
wire    grp_ld_weights1_fu_631_weights1_buf_0_ce0;
wire    grp_ld_weights1_fu_631_weights1_buf_0_we0;
wire   [31:0] grp_ld_weights1_fu_631_weights1_buf_0_d0;
reg   [5:0] i_0_i_reg_406;
reg   [5:0] j_0_i_reg_417;
wire    ap_CS_fsm_state4;
reg   [3:0] i_0_i10_reg_428;
wire    ap_CS_fsm_state5;
reg    ap_block_state5_on_subcall_done;
reg   [6:0] j_0_i12_reg_439;
wire    ap_CS_fsm_state8;
reg   [2:0] i_0_i16_reg_450;
wire    ap_CS_fsm_state10;
reg   [4:0] i_0_i18_reg_461;
wire    ap_CS_fsm_state12;
reg   [6:0] i_0_i20_reg_472;
wire    ap_CS_fsm_state14;
reg   [3:0] i_0_i22_reg_483;
wire    ap_CS_fsm_state16;
reg   [6:0] i_0_i24_reg_494;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state36;
reg   [3:0] n_0_i_reg_505;
wire    ap_CS_fsm_state55;
reg   [31:0] empty_14_reg_516;
reg   [6:0] c_0_i_reg_528;
reg   [3:0] i_0_i29_reg_539;
wire    ap_CS_fsm_state58;
reg   [3:0] i_0_i35_reg_550;
wire    ap_CS_fsm_state60;
reg    grp_i_convolution3_fu_561_ap_start_reg;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
reg    grp_i_convolution5_fu_569_ap_start_reg;
wire    ap_CS_fsm_state32;
reg    grp_i_convolution1_fu_577_ap_start_reg;
wire    ap_CS_fsm_state17;
reg    grp_i_max_pooling2_fu_585_ap_start_reg;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
reg    grp_i_max_pooling4_fu_591_ap_start_reg;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
reg    grp_i_relu1_fu_597_ap_start_reg;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
reg    grp_i_relu3_fu_602_ap_start_reg;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
reg    grp_i_relu4_fu_607_ap_start_reg;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
reg    grp_i_relu2_fu_612_ap_start_reg;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
reg    grp_ld_weights5_fu_617_ap_start_reg;
reg    grp_ld_weights3_fu_624_ap_start_reg;
reg    grp_ld_weights1_fu_631_ap_start_reg;
wire   [63:0] zext_ln142_fu_858_p1;
wire  signed [63:0] sext_ln154_fu_976_p1;
wire   [63:0] zext_ln154_fu_962_p1;
wire   [63:0] zext_ln164_fu_993_p1;
wire   [0:0] and_ln142_fu_897_p2;
wire   [0:0] and_ln164_fu_1032_p2;
reg   [31:0] grp_fu_638_p1;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state40;
reg   [31:0] grp_fu_647_p0;
wire   [10:0] tmp_4_fu_672_p3;
wire   [11:0] zext_ln173_fu_696_p1;
wire   [11:0] add_ln173_fu_700_p2;
wire   [10:0] tmp_5_fu_722_p3;
wire   [6:0] tmp_6_fu_734_p3;
wire   [11:0] zext_ln215_fu_730_p1;
wire   [11:0] zext_ln215_1_fu_742_p1;
wire   [11:0] zext_ln215_2_fu_764_p1;
wire   [11:0] add_ln215_fu_768_p2;
wire   [31:0] bitcast_ln142_fu_863_p1;
wire   [7:0] tmp_fu_867_p4;
wire   [22:0] trunc_ln142_fu_877_p1;
wire   [0:0] or_ln142_fu_893_p2;
wire   [0:0] grp_fu_647_p2;
wire   [10:0] tmp_7_fu_920_p3;
wire   [6:0] tmp_8_fu_932_p3;
wire   [11:0] zext_ln154_1_fu_928_p1;
wire   [11:0] zext_ln154_2_fu_940_p1;
wire   [11:0] zext_ln154_3_fu_967_p1;
wire   [11:0] add_ln154_fu_971_p2;
wire   [31:0] bitcast_ln164_fu_998_p1;
wire   [7:0] tmp_2_fu_1002_p4;
wire   [22:0] trunc_ln164_fu_1012_p1;
wire   [0:0] or_ln164_fu_1028_p2;
reg   [59:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 60'd1;
#0 grp_i_convolution3_fu_561_ap_start_reg = 1'b0;
#0 grp_i_convolution5_fu_569_ap_start_reg = 1'b0;
#0 grp_i_convolution1_fu_577_ap_start_reg = 1'b0;
#0 grp_i_max_pooling2_fu_585_ap_start_reg = 1'b0;
#0 grp_i_max_pooling4_fu_591_ap_start_reg = 1'b0;
#0 grp_i_relu1_fu_597_ap_start_reg = 1'b0;
#0 grp_i_relu3_fu_602_ap_start_reg = 1'b0;
#0 grp_i_relu4_fu_607_ap_start_reg = 1'b0;
#0 grp_i_relu2_fu_612_ap_start_reg = 1'b0;
#0 grp_ld_weights5_fu_617_ap_start_reg = 1'b0;
#0 grp_ld_weights3_fu_624_ap_start_reg = 1'b0;
#0 grp_ld_weights1_fu_631_ap_start_reg = 1'b0;
end

lenet_top_input_beOg #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
input_buf_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_buf_0_address0),
    .ce0(input_buf_0_ce0),
    .we0(input_buf_0_we0),
    .d0(input_r_q0),
    .q0(input_buf_0_q0)
);

lenet_top_weightsfYi #(
    .DataWidth( 32 ),
    .AddressRange( 150 ),
    .AddressWidth( 8 ))
weights1_buf_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights1_buf_0_address0),
    .ce0(weights1_buf_0_ce0),
    .we0(weights1_buf_0_we0),
    .d0(grp_ld_weights1_fu_631_weights1_buf_0_d0),
    .q0(weights1_buf_0_q0)
);

lenet_top_weightsg8j #(
    .DataWidth( 32 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
weights3_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights3_buf_address0),
    .ce0(weights3_buf_ce0),
    .we0(weights3_buf_we0),
    .d0(grp_ld_weights3_fu_624_weights3_buf_d0),
    .q0(weights3_buf_q0)
);

lenet_top_weightshbi #(
    .DataWidth( 32 ),
    .AddressRange( 48000 ),
    .AddressWidth( 16 ))
weights5_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights5_buf_address0),
    .ce0(weights5_buf_ce0),
    .we0(weights5_buf_we0),
    .d0(grp_ld_weights5_fu_617_weights5_buf_d0),
    .q0(weights5_buf_q0)
);

lenet_top_weightsibs #(
    .DataWidth( 32 ),
    .AddressRange( 1200 ),
    .AddressWidth( 11 ))
weights6_buf_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights6_buf_0_0_address0),
    .ce0(weights6_buf_0_0_ce0),
    .we0(weights6_buf_0_0_we0),
    .d0(weights6_q0),
    .q0(weights6_buf_0_0_q0)
);

lenet_top_bias1_buf #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
bias1_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias1_buf_address0),
    .ce0(bias1_buf_ce0),
    .we0(bias1_buf_we0),
    .d0(bias1_q0),
    .q0(bias1_buf_q0)
);

lenet_top_bias3_buf #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
bias3_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias3_buf_address0),
    .ce0(bias3_buf_ce0),
    .we0(bias3_buf_we0),
    .d0(bias3_q0),
    .q0(bias3_buf_q0)
);

lenet_top_bias5_buf #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
bias5_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias5_buf_address0),
    .ce0(bias5_buf_ce0),
    .we0(bias5_buf_we0),
    .d0(bias5_q0),
    .q0(bias5_buf_q0)
);

lenet_top_bias6_buf #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
bias6_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias6_buf_address0),
    .ce0(bias6_buf_ce0),
    .we0(bias6_buf_we0),
    .d0(bias6_q0),
    .q0(bias6_buf_q0)
);

lenet_top_bias6_buf #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
output_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_buf_address0),
    .ce0(output_buf_ce0),
    .we0(output_buf_we0),
    .d0(output_buf_d0),
    .q0(output_buf_q0)
);

lenet_top_input2_kbM #(
    .DataWidth( 32 ),
    .AddressRange( 4704 ),
    .AddressWidth( 13 ))
input2_inter_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input2_inter_address0),
    .ce0(input2_inter_ce0),
    .we0(input2_inter_we0),
    .d0(input2_inter_d0),
    .q0(input2_inter_q0)
);

lenet_top_input3_lbW #(
    .DataWidth( 32 ),
    .AddressRange( 1176 ),
    .AddressWidth( 11 ))
input3_inter_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input3_inter_address0),
    .ce0(input3_inter_ce0),
    .we0(input3_inter_we0),
    .d0(input3_inter_d0),
    .q0(input3_inter_q0)
);

lenet_top_input4_mb6 #(
    .DataWidth( 32 ),
    .AddressRange( 1600 ),
    .AddressWidth( 11 ))
input4_inter_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input4_inter_address0),
    .ce0(input4_inter_ce0),
    .we0(input4_inter_we0),
    .d0(input4_inter_d0),
    .q0(input4_inter_q0)
);

lenet_top_input5_ncg #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
input5_inter_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input5_inter_address0),
    .ce0(input5_inter_ce0),
    .we0(input5_inter_we0),
    .d0(input5_inter_d0),
    .q0(input5_inter_q0)
);

lenet_top_bias5_buf #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
input6_inter_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input6_inter_0_0_address0),
    .ce0(input6_inter_0_0_ce0),
    .we0(input6_inter_0_0_we0),
    .d0(input6_inter_0_0_d0),
    .q0(input6_inter_0_0_q0)
);

i_convolution3 grp_i_convolution3_fu_561(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_i_convolution3_fu_561_ap_start),
    .ap_done(grp_i_convolution3_fu_561_ap_done),
    .ap_idle(grp_i_convolution3_fu_561_ap_idle),
    .ap_ready(grp_i_convolution3_fu_561_ap_ready),
    .input_r_address0(grp_i_convolution3_fu_561_input_r_address0),
    .input_r_ce0(grp_i_convolution3_fu_561_input_r_ce0),
    .input_r_q0(input3_inter_q0),
    .weights_address0(grp_i_convolution3_fu_561_weights_address0),
    .weights_ce0(grp_i_convolution3_fu_561_weights_ce0),
    .weights_q0(weights3_buf_q0),
    .bias_address0(grp_i_convolution3_fu_561_bias_address0),
    .bias_ce0(grp_i_convolution3_fu_561_bias_ce0),
    .bias_q0(bias3_buf_q0),
    .output_r_address0(grp_i_convolution3_fu_561_output_r_address0),
    .output_r_ce0(grp_i_convolution3_fu_561_output_r_ce0),
    .output_r_we0(grp_i_convolution3_fu_561_output_r_we0),
    .output_r_d0(grp_i_convolution3_fu_561_output_r_d0)
);

i_convolution5 grp_i_convolution5_fu_569(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_i_convolution5_fu_569_ap_start),
    .ap_done(grp_i_convolution5_fu_569_ap_done),
    .ap_idle(grp_i_convolution5_fu_569_ap_idle),
    .ap_ready(grp_i_convolution5_fu_569_ap_ready),
    .input_r_address0(grp_i_convolution5_fu_569_input_r_address0),
    .input_r_ce0(grp_i_convolution5_fu_569_input_r_ce0),
    .input_r_q0(input5_inter_q0),
    .weights_address0(grp_i_convolution5_fu_569_weights_address0),
    .weights_ce0(grp_i_convolution5_fu_569_weights_ce0),
    .weights_q0(weights5_buf_q0),
    .bias_address0(grp_i_convolution5_fu_569_bias_address0),
    .bias_ce0(grp_i_convolution5_fu_569_bias_ce0),
    .bias_q0(bias5_buf_q0),
    .output_0_0_address0(grp_i_convolution5_fu_569_output_0_0_address0),
    .output_0_0_ce0(grp_i_convolution5_fu_569_output_0_0_ce0),
    .output_0_0_we0(grp_i_convolution5_fu_569_output_0_0_we0),
    .output_0_0_d0(grp_i_convolution5_fu_569_output_0_0_d0)
);

i_convolution1 grp_i_convolution1_fu_577(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_i_convolution1_fu_577_ap_start),
    .ap_done(grp_i_convolution1_fu_577_ap_done),
    .ap_idle(grp_i_convolution1_fu_577_ap_idle),
    .ap_ready(grp_i_convolution1_fu_577_ap_ready),
    .input_0_address0(grp_i_convolution1_fu_577_input_0_address0),
    .input_0_ce0(grp_i_convolution1_fu_577_input_0_ce0),
    .input_0_q0(input_buf_0_q0),
    .weights_0_address0(grp_i_convolution1_fu_577_weights_0_address0),
    .weights_0_ce0(grp_i_convolution1_fu_577_weights_0_ce0),
    .weights_0_q0(weights1_buf_0_q0),
    .bias_address0(grp_i_convolution1_fu_577_bias_address0),
    .bias_ce0(grp_i_convolution1_fu_577_bias_ce0),
    .bias_q0(bias1_buf_q0),
    .output_r_address0(grp_i_convolution1_fu_577_output_r_address0),
    .output_r_ce0(grp_i_convolution1_fu_577_output_r_ce0),
    .output_r_we0(grp_i_convolution1_fu_577_output_r_we0),
    .output_r_d0(grp_i_convolution1_fu_577_output_r_d0)
);

i_max_pooling2 grp_i_max_pooling2_fu_585(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_i_max_pooling2_fu_585_ap_start),
    .ap_done(grp_i_max_pooling2_fu_585_ap_done),
    .ap_idle(grp_i_max_pooling2_fu_585_ap_idle),
    .ap_ready(grp_i_max_pooling2_fu_585_ap_ready),
    .input_r_address0(grp_i_max_pooling2_fu_585_input_r_address0),
    .input_r_ce0(grp_i_max_pooling2_fu_585_input_r_ce0),
    .input_r_q0(input2_inter_q0),
    .output_r_address0(grp_i_max_pooling2_fu_585_output_r_address0),
    .output_r_ce0(grp_i_max_pooling2_fu_585_output_r_ce0),
    .output_r_we0(grp_i_max_pooling2_fu_585_output_r_we0),
    .output_r_d0(grp_i_max_pooling2_fu_585_output_r_d0)
);

i_max_pooling4 grp_i_max_pooling4_fu_591(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_i_max_pooling4_fu_591_ap_start),
    .ap_done(grp_i_max_pooling4_fu_591_ap_done),
    .ap_idle(grp_i_max_pooling4_fu_591_ap_idle),
    .ap_ready(grp_i_max_pooling4_fu_591_ap_ready),
    .input_r_address0(grp_i_max_pooling4_fu_591_input_r_address0),
    .input_r_ce0(grp_i_max_pooling4_fu_591_input_r_ce0),
    .input_r_q0(input4_inter_q0),
    .output_r_address0(grp_i_max_pooling4_fu_591_output_r_address0),
    .output_r_ce0(grp_i_max_pooling4_fu_591_output_r_ce0),
    .output_r_we0(grp_i_max_pooling4_fu_591_output_r_we0),
    .output_r_d0(grp_i_max_pooling4_fu_591_output_r_d0)
);

i_relu1 grp_i_relu1_fu_597(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_i_relu1_fu_597_ap_start),
    .ap_done(grp_i_relu1_fu_597_ap_done),
    .ap_idle(grp_i_relu1_fu_597_ap_idle),
    .ap_ready(grp_i_relu1_fu_597_ap_ready),
    .input_r_address0(grp_i_relu1_fu_597_input_r_address0),
    .input_r_ce0(grp_i_relu1_fu_597_input_r_ce0),
    .input_r_we0(grp_i_relu1_fu_597_input_r_we0),
    .input_r_d0(grp_i_relu1_fu_597_input_r_d0),
    .input_r_q0(input2_inter_q0)
);

i_relu3 grp_i_relu3_fu_602(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_i_relu3_fu_602_ap_start),
    .ap_done(grp_i_relu3_fu_602_ap_done),
    .ap_idle(grp_i_relu3_fu_602_ap_idle),
    .ap_ready(grp_i_relu3_fu_602_ap_ready),
    .input_r_address0(grp_i_relu3_fu_602_input_r_address0),
    .input_r_ce0(grp_i_relu3_fu_602_input_r_ce0),
    .input_r_we0(grp_i_relu3_fu_602_input_r_we0),
    .input_r_d0(grp_i_relu3_fu_602_input_r_d0),
    .input_r_q0(input4_inter_q0)
);

i_relu4 grp_i_relu4_fu_607(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_i_relu4_fu_607_ap_start),
    .ap_done(grp_i_relu4_fu_607_ap_done),
    .ap_idle(grp_i_relu4_fu_607_ap_idle),
    .ap_ready(grp_i_relu4_fu_607_ap_ready),
    .input_r_address0(grp_i_relu4_fu_607_input_r_address0),
    .input_r_ce0(grp_i_relu4_fu_607_input_r_ce0),
    .input_r_we0(grp_i_relu4_fu_607_input_r_we0),
    .input_r_d0(grp_i_relu4_fu_607_input_r_d0),
    .input_r_q0(input5_inter_q0)
);

i_relu2 grp_i_relu2_fu_612(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_i_relu2_fu_612_ap_start),
    .ap_done(grp_i_relu2_fu_612_ap_done),
    .ap_idle(grp_i_relu2_fu_612_ap_idle),
    .ap_ready(grp_i_relu2_fu_612_ap_ready),
    .input_r_address0(grp_i_relu2_fu_612_input_r_address0),
    .input_r_ce0(grp_i_relu2_fu_612_input_r_ce0),
    .input_r_we0(grp_i_relu2_fu_612_input_r_we0),
    .input_r_d0(grp_i_relu2_fu_612_input_r_d0),
    .input_r_q0(input3_inter_q0)
);

ld_weights5 grp_ld_weights5_fu_617(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ld_weights5_fu_617_ap_start),
    .ap_done(grp_ld_weights5_fu_617_ap_done),
    .ap_idle(grp_ld_weights5_fu_617_ap_idle),
    .ap_ready(grp_ld_weights5_fu_617_ap_ready),
    .weights5_address0(grp_ld_weights5_fu_617_weights5_address0),
    .weights5_ce0(grp_ld_weights5_fu_617_weights5_ce0),
    .weights5_q0(weights5_q0),
    .weights5_buf_address0(grp_ld_weights5_fu_617_weights5_buf_address0),
    .weights5_buf_ce0(grp_ld_weights5_fu_617_weights5_buf_ce0),
    .weights5_buf_we0(grp_ld_weights5_fu_617_weights5_buf_we0),
    .weights5_buf_d0(grp_ld_weights5_fu_617_weights5_buf_d0)
);

ld_weights3 grp_ld_weights3_fu_624(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ld_weights3_fu_624_ap_start),
    .ap_done(grp_ld_weights3_fu_624_ap_done),
    .ap_idle(grp_ld_weights3_fu_624_ap_idle),
    .ap_ready(grp_ld_weights3_fu_624_ap_ready),
    .weights3_address0(grp_ld_weights3_fu_624_weights3_address0),
    .weights3_ce0(grp_ld_weights3_fu_624_weights3_ce0),
    .weights3_q0(weights3_q0),
    .weights3_buf_address0(grp_ld_weights3_fu_624_weights3_buf_address0),
    .weights3_buf_ce0(grp_ld_weights3_fu_624_weights3_buf_ce0),
    .weights3_buf_we0(grp_ld_weights3_fu_624_weights3_buf_we0),
    .weights3_buf_d0(grp_ld_weights3_fu_624_weights3_buf_d0)
);

ld_weights1 grp_ld_weights1_fu_631(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ld_weights1_fu_631_ap_start),
    .ap_done(grp_ld_weights1_fu_631_ap_done),
    .ap_idle(grp_ld_weights1_fu_631_ap_idle),
    .ap_ready(grp_ld_weights1_fu_631_ap_ready),
    .weights1_address0(grp_ld_weights1_fu_631_weights1_address0),
    .weights1_ce0(grp_ld_weights1_fu_631_weights1_ce0),
    .weights1_q0(weights1_q0),
    .weights1_buf_0_address0(grp_ld_weights1_fu_631_weights1_buf_0_address0),
    .weights1_buf_0_ce0(grp_ld_weights1_fu_631_weights1_buf_0_ce0),
    .weights1_buf_0_we0(grp_ld_weights1_fu_631_weights1_buf_0_we0),
    .weights1_buf_0_d0(grp_ld_weights1_fu_631_weights1_buf_0_d0)
);

lenet_top_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_top_fadd_32bkb_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_14_reg_516),
    .din1(grp_fu_638_p1),
    .ce(1'b1),
    .dout(grp_fu_638_p2)
);

lenet_top_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_top_fmul_32cud_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights6_buf_0_0_l_reg_1261),
    .din1(reg_654),
    .ce(1'b1),
    .dout(grp_fu_643_p2)
);

lenet_top_fcmp_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
lenet_top_fcmp_32dEe_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_647_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_647_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_i_convolution1_fu_577_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln239_fu_829_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
            grp_i_convolution1_fu_577_ap_start_reg <= 1'b1;
        end else if ((grp_i_convolution1_fu_577_ap_ready == 1'b1)) begin
            grp_i_convolution1_fu_577_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_i_convolution3_fu_561_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state24)) begin
            grp_i_convolution3_fu_561_ap_start_reg <= 1'b1;
        end else if ((grp_i_convolution3_fu_561_ap_ready == 1'b1)) begin
            grp_i_convolution3_fu_561_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_i_convolution5_fu_569_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state32)) begin
            grp_i_convolution5_fu_569_ap_start_reg <= 1'b1;
        end else if ((grp_i_convolution5_fu_569_ap_ready == 1'b1)) begin
            grp_i_convolution5_fu_569_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_i_max_pooling2_fu_585_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            grp_i_max_pooling2_fu_585_ap_start_reg <= 1'b1;
        end else if ((grp_i_max_pooling2_fu_585_ap_ready == 1'b1)) begin
            grp_i_max_pooling2_fu_585_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_i_max_pooling4_fu_591_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state28)) begin
            grp_i_max_pooling4_fu_591_ap_start_reg <= 1'b1;
        end else if ((grp_i_max_pooling4_fu_591_ap_ready == 1'b1)) begin
            grp_i_max_pooling4_fu_591_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_i_relu1_fu_597_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            grp_i_relu1_fu_597_ap_start_reg <= 1'b1;
        end else if ((grp_i_relu1_fu_597_ap_ready == 1'b1)) begin
            grp_i_relu1_fu_597_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_i_relu2_fu_612_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            grp_i_relu2_fu_612_ap_start_reg <= 1'b1;
        end else if ((grp_i_relu2_fu_612_ap_ready == 1'b1)) begin
            grp_i_relu2_fu_612_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_i_relu3_fu_602_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            grp_i_relu3_fu_602_ap_start_reg <= 1'b1;
        end else if ((grp_i_relu3_fu_602_ap_ready == 1'b1)) begin
            grp_i_relu3_fu_602_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_i_relu4_fu_607_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            grp_i_relu4_fu_607_ap_start_reg <= 1'b1;
        end else if ((grp_i_relu4_fu_607_ap_ready == 1'b1)) begin
            grp_i_relu4_fu_607_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ld_weights1_fu_631_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_660_p2 == 1'd1))) begin
            grp_ld_weights1_fu_631_ap_start_reg <= 1'b1;
        end else if ((grp_ld_weights1_fu_631_ap_ready == 1'b1)) begin
            grp_ld_weights1_fu_631_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ld_weights3_fu_624_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_660_p2 == 1'd1))) begin
            grp_ld_weights3_fu_624_ap_start_reg <= 1'b1;
        end else if ((grp_ld_weights3_fu_624_ap_ready == 1'b1)) begin
            grp_ld_weights3_fu_624_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ld_weights5_fu_617_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_660_p2 == 1'd1))) begin
            grp_ld_weights5_fu_617_ap_start_reg <= 1'b1;
        end else if ((grp_ld_weights5_fu_617_ap_ready == 1'b1)) begin
            grp_ld_weights5_fu_617_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        c_0_i_reg_528 <= c_reg_1241;
    end else if (((1'b1 == ap_CS_fsm_state37) & (icmp_ln149_fu_903_p2 == 1'd0))) begin
        c_0_i_reg_528 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        empty_14_reg_516 <= grp_fu_638_p2;
    end else if (((1'b1 == ap_CS_fsm_state37) & (icmp_ln149_fu_903_p2 == 1'd0))) begin
        empty_14_reg_516 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln214_fu_752_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_0_i10_reg_428 <= i_2_reg_1089;
    end else if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_i10_reg_428 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln213_fu_710_p2 == 1'd1))) begin
        i_0_i16_reg_450 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_0_i16_reg_450 <= i_9_reg_1120;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln221_fu_778_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_0_i18_reg_461 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i_0_i18_reg_461 <= i_10_reg_1138;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln227_fu_795_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i_0_i20_reg_472 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i_0_i20_reg_472 <= i_11_reg_1156;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_fu_812_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        i_0_i22_reg_483 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_0_i22_reg_483 <= i_12_reg_1174;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        i_0_i24_reg_494 <= i_13_reg_1192;
    end else if (((grp_i_convolution5_fu_569_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        i_0_i24_reg_494 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln149_fu_903_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        i_0_i29_reg_539 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        i_0_i29_reg_539 <= i_14_reg_1289;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln163_fu_981_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
        i_0_i35_reg_550 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        i_0_i35_reg_550 <= i_15_reg_1320;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln172_fu_684_p2 == 1'd1))) begin
        i_0_i_reg_406 <= i_reg_1058;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_406 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln213_fu_710_p2 == 1'd0))) begin
        j_0_i12_reg_439 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_0_i12_reg_439 <= j_1_reg_1102;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_660_p2 == 1'd0))) begin
        j_0_i_reg_417 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_i_reg_417 <= j_reg_1071;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln141_fu_846_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        n_0_i_reg_505 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        n_0_i_reg_505 <= n_reg_1218;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        bias6_buf_load_reg_1276 <= bias6_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        c_reg_1241 <= c_fu_956_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_10_reg_1138 <= i_10_fu_801_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_11_reg_1156 <= i_11_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_12_reg_1174 <= i_12_fu_835_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        i_13_reg_1192 <= i_13_fu_852_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        i_14_reg_1289 <= i_14_fu_987_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        i_15_reg_1320 <= i_15_fu_1044_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_1089 <= i_2_fu_716_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_9_reg_1120 <= i_9_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1058 <= i_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        icmp_ln142_1_reg_1207 <= icmp_ln142_1_fu_887_p2;
        icmp_ln142_reg_1202 <= icmp_ln142_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        icmp_ln164_1_reg_1309 <= icmp_ln164_1_fu_1022_p2;
        icmp_ln164_reg_1304 <= icmp_ln164_fu_1016_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & (icmp_ln141_fu_846_p2 == 1'd0))) begin
        input6_inter_0_0_a_reg_1197 <= zext_ln142_fu_858_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_1_reg_1102 <= j_1_fu_758_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_1071 <= j_fu_690_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        n_reg_1218 <= n_fu_909_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln163_fu_981_p2 == 1'd0))) begin
        output_buf_addr_1_reg_1294 <= zext_ln164_fu_993_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (icmp_ln149_fu_903_p2 == 1'd0))) begin
        output_buf_addr_reg_1233 <= zext_ln151_fu_915_p1;
        sub_ln154_reg_1228[11 : 3] <= sub_ln154_fu_944_p2[11 : 3];
        zext_ln151_reg_1223[3 : 0] <= zext_ln151_fu_915_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35))) begin
        reg_654 <= input6_inter_0_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln214_fu_752_p2 == 1'd0))) begin
        sext_ln215_reg_1107 <= sext_ln215_fu_773_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln213_fu_710_p2 == 1'd0))) begin
        sub_ln215_reg_1094[11 : 3] <= sub_ln215_fu_746_p2[11 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        tmp_1_i_reg_1266 <= grp_fu_643_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        tmp_i2_reg_1281 <= grp_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        weights6_buf_0_0_l_reg_1261 <= weights6_buf_0_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_660_p2 == 1'd0))) begin
        zext_ln172_reg_1063[10 : 5] <= zext_ln172_fu_680_p1[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln172_fu_684_p2 == 1'd0))) begin
        zext_ln173_1_reg_1076[11 : 0] <= zext_ln173_1_fu_705_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln221_fu_778_p2 == 1'd0))) begin
        zext_ln222_reg_1125[2 : 0] <= zext_ln222_fu_790_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln227_fu_795_p2 == 1'd0))) begin
        zext_ln228_reg_1143[4 : 0] <= zext_ln228_fu_807_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln233_fu_812_p2 == 1'd0))) begin
        zext_ln234_reg_1161[6 : 0] <= zext_ln234_fu_824_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln239_fu_829_p2 == 1'd0))) begin
        zext_ln240_reg_1179[3 : 0] <= zext_ln240_fu_841_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) & (icmp_ln245_fu_1038_p2 == 1'd0))) begin
        zext_ln246_reg_1325[3 : 0] <= zext_ln246_fu_1050_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln245_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln245_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        bias1_buf_address0 = zext_ln222_reg_1125;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        bias1_buf_address0 = grp_i_convolution1_fu_577_bias_address0;
    end else begin
        bias1_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        bias1_buf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        bias1_buf_ce0 = grp_i_convolution1_fu_577_bias_ce0;
    end else begin
        bias1_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        bias1_buf_we0 = 1'b1;
    end else begin
        bias1_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bias1_ce0 = 1'b1;
    end else begin
        bias1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        bias3_buf_address0 = zext_ln228_reg_1143;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        bias3_buf_address0 = grp_i_convolution3_fu_561_bias_address0;
    end else begin
        bias3_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        bias3_buf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        bias3_buf_ce0 = grp_i_convolution3_fu_561_bias_ce0;
    end else begin
        bias3_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        bias3_buf_we0 = 1'b1;
    end else begin
        bias3_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bias3_ce0 = 1'b1;
    end else begin
        bias3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        bias5_buf_address0 = zext_ln234_reg_1161;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        bias5_buf_address0 = grp_i_convolution5_fu_569_bias_address0;
    end else begin
        bias5_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        bias5_buf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        bias5_buf_ce0 = grp_i_convolution5_fu_569_bias_ce0;
    end else begin
        bias5_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        bias5_buf_we0 = 1'b1;
    end else begin
        bias5_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        bias5_ce0 = 1'b1;
    end else begin
        bias5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        bias6_buf_address0 = zext_ln151_reg_1223;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        bias6_buf_address0 = zext_ln240_reg_1179;
    end else begin
        bias6_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state38))) begin
        bias6_buf_ce0 = 1'b1;
    end else begin
        bias6_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        bias6_buf_we0 = 1'b1;
    end else begin
        bias6_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        bias6_ce0 = 1'b1;
    end else begin
        bias6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_638_p1 = bias6_buf_load_reg_1276;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_638_p1 = tmp_1_i_reg_1266;
    end else begin
        grp_fu_638_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_647_p0 = output_buf_q0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_647_p0 = input6_inter_0_0_q0;
    end else begin
        grp_fu_647_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        input2_inter_address0 = grp_i_relu1_fu_597_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        input2_inter_address0 = grp_i_max_pooling2_fu_585_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        input2_inter_address0 = grp_i_convolution1_fu_577_output_r_address0;
    end else begin
        input2_inter_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        input2_inter_ce0 = grp_i_relu1_fu_597_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        input2_inter_ce0 = grp_i_max_pooling2_fu_585_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        input2_inter_ce0 = grp_i_convolution1_fu_577_output_r_ce0;
    end else begin
        input2_inter_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        input2_inter_d0 = grp_i_relu1_fu_597_input_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        input2_inter_d0 = grp_i_convolution1_fu_577_output_r_d0;
    end else begin
        input2_inter_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        input2_inter_we0 = grp_i_relu1_fu_597_input_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        input2_inter_we0 = grp_i_convolution1_fu_577_output_r_we0;
    end else begin
        input2_inter_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        input3_inter_address0 = grp_i_relu2_fu_612_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        input3_inter_address0 = grp_i_max_pooling2_fu_585_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        input3_inter_address0 = grp_i_convolution3_fu_561_input_r_address0;
    end else begin
        input3_inter_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        input3_inter_ce0 = grp_i_relu2_fu_612_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        input3_inter_ce0 = grp_i_max_pooling2_fu_585_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        input3_inter_ce0 = grp_i_convolution3_fu_561_input_r_ce0;
    end else begin
        input3_inter_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        input3_inter_d0 = grp_i_relu2_fu_612_input_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        input3_inter_d0 = grp_i_max_pooling2_fu_585_output_r_d0;
    end else begin
        input3_inter_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        input3_inter_we0 = grp_i_relu2_fu_612_input_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        input3_inter_we0 = grp_i_max_pooling2_fu_585_output_r_we0;
    end else begin
        input3_inter_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        input4_inter_address0 = grp_i_relu3_fu_602_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        input4_inter_address0 = grp_i_max_pooling4_fu_591_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        input4_inter_address0 = grp_i_convolution3_fu_561_output_r_address0;
    end else begin
        input4_inter_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        input4_inter_ce0 = grp_i_relu3_fu_602_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        input4_inter_ce0 = grp_i_max_pooling4_fu_591_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        input4_inter_ce0 = grp_i_convolution3_fu_561_output_r_ce0;
    end else begin
        input4_inter_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        input4_inter_d0 = grp_i_relu3_fu_602_input_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        input4_inter_d0 = grp_i_convolution3_fu_561_output_r_d0;
    end else begin
        input4_inter_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        input4_inter_we0 = grp_i_relu3_fu_602_input_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        input4_inter_we0 = grp_i_convolution3_fu_561_output_r_we0;
    end else begin
        input4_inter_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        input5_inter_address0 = grp_i_relu4_fu_607_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        input5_inter_address0 = grp_i_max_pooling4_fu_591_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        input5_inter_address0 = grp_i_convolution5_fu_569_input_r_address0;
    end else begin
        input5_inter_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        input5_inter_ce0 = grp_i_relu4_fu_607_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        input5_inter_ce0 = grp_i_max_pooling4_fu_591_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        input5_inter_ce0 = grp_i_convolution5_fu_569_input_r_ce0;
    end else begin
        input5_inter_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        input5_inter_d0 = grp_i_relu4_fu_607_input_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        input5_inter_d0 = grp_i_max_pooling4_fu_591_output_r_d0;
    end else begin
        input5_inter_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        input5_inter_we0 = grp_i_relu4_fu_607_input_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        input5_inter_we0 = grp_i_max_pooling4_fu_591_output_r_we0;
    end else begin
        input5_inter_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        input6_inter_0_0_address0 = zext_ln154_fu_962_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        input6_inter_0_0_address0 = input6_inter_0_0_a_reg_1197;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        input6_inter_0_0_address0 = zext_ln142_fu_858_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        input6_inter_0_0_address0 = grp_i_convolution5_fu_569_output_0_0_address0;
    end else begin
        input6_inter_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34))) begin
        input6_inter_0_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        input6_inter_0_0_ce0 = grp_i_convolution5_fu_569_output_0_0_ce0;
    end else begin
        input6_inter_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        input6_inter_0_0_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        input6_inter_0_0_d0 = grp_i_convolution5_fu_569_output_0_0_d0;
    end else begin
        input6_inter_0_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln142_fu_897_p2) & (1'b1 == ap_CS_fsm_state36))) begin
        input6_inter_0_0_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        input6_inter_0_0_we0 = grp_i_convolution5_fu_569_output_0_0_we0;
    end else begin
        input6_inter_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_buf_0_address0 = zext_ln173_1_reg_1076;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        input_buf_0_address0 = grp_i_convolution1_fu_577_input_0_address0;
    end else begin
        input_buf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_buf_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        input_buf_0_ce0 = grp_i_convolution1_fu_577_input_0_ce0;
    end else begin
        input_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_buf_0_we0 = 1'b1;
    end else begin
        input_buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        output_buf_address0 = zext_ln246_fu_1050_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        output_buf_address0 = output_buf_addr_1_reg_1294;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        output_buf_address0 = zext_ln164_fu_993_p1;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        output_buf_address0 = output_buf_addr_reg_1233;
    end else begin
        output_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state56))) begin
        output_buf_ce0 = 1'b1;
    end else begin
        output_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        output_buf_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        output_buf_d0 = tmp_i2_reg_1281;
    end else begin
        output_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | ((1'd1 == and_ln164_fu_1032_p2) & (1'b1 == ap_CS_fsm_state58)))) begin
        output_buf_we0 = 1'b1;
    end else begin
        output_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights1_buf_0_address0 = grp_ld_weights1_fu_631_weights1_buf_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        weights1_buf_0_address0 = grp_i_convolution1_fu_577_weights_0_address0;
    end else begin
        weights1_buf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights1_buf_0_ce0 = grp_ld_weights1_fu_631_weights1_buf_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        weights1_buf_0_ce0 = grp_i_convolution1_fu_577_weights_0_ce0;
    end else begin
        weights1_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights1_buf_0_we0 = grp_ld_weights1_fu_631_weights1_buf_0_we0;
    end else begin
        weights1_buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights3_buf_address0 = grp_ld_weights3_fu_624_weights3_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        weights3_buf_address0 = grp_i_convolution3_fu_561_weights_address0;
    end else begin
        weights3_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights3_buf_ce0 = grp_ld_weights3_fu_624_weights3_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        weights3_buf_ce0 = grp_i_convolution3_fu_561_weights_ce0;
    end else begin
        weights3_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights3_buf_we0 = grp_ld_weights3_fu_624_weights3_buf_we0;
    end else begin
        weights3_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights5_buf_address0 = grp_ld_weights5_fu_617_weights5_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        weights5_buf_address0 = grp_i_convolution5_fu_569_weights_address0;
    end else begin
        weights5_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights5_buf_ce0 = grp_ld_weights5_fu_617_weights5_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        weights5_buf_ce0 = grp_i_convolution5_fu_569_weights_ce0;
    end else begin
        weights5_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights5_buf_we0 = grp_ld_weights5_fu_617_weights5_buf_we0;
    end else begin
        weights5_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        weights6_buf_0_0_address0 = sext_ln154_fu_976_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        weights6_buf_0_0_address0 = sext_ln215_reg_1107;
    end else begin
        weights6_buf_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state38))) begin
        weights6_buf_0_0_ce0 = 1'b1;
    end else begin
        weights6_buf_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights6_buf_0_0_we0 = 1'b1;
    end else begin
        weights6_buf_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights6_ce0 = 1'b1;
    end else begin
        weights6_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_660_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln172_fu_684_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln213_fu_710_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln214_fu_752_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln221_fu_778_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln227_fu_795_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln233_fu_812_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln239_fu_829_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_i_convolution1_fu_577_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_i_relu1_fu_597_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_i_max_pooling2_fu_585_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((grp_i_relu2_fu_612_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_i_convolution3_fu_561_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((grp_i_relu3_fu_602_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((grp_i_max_pooling4_fu_591_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((grp_i_relu4_fu_607_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((grp_i_convolution5_fu_569_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((icmp_ln141_fu_846_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state37 : begin
            if (((icmp_ln149_fu_903_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((icmp_ln152_fu_950_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state56 : begin
            if (((icmp_ln163_fu_981_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state59 : begin
            if (((icmp_ln245_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln154_fu_971_p2 = (sub_ln154_reg_1228 + zext_ln154_3_fu_967_p1);

assign add_ln173_fu_700_p2 = (zext_ln172_reg_1063 + zext_ln173_fu_696_p1);

assign add_ln215_fu_768_p2 = (sub_ln215_reg_1094 + zext_ln215_2_fu_764_p1);

assign and_ln142_fu_897_p2 = (or_ln142_fu_893_p2 & grp_fu_647_p2);

assign and_ln164_fu_1032_p2 = (or_ln164_fu_1028_p2 & grp_fu_647_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state5_on_subcall_done = ((grp_ld_weights1_fu_631_ap_done == 1'b0) | (grp_ld_weights3_fu_624_ap_done == 1'b0) | (grp_ld_weights5_fu_617_ap_done == 1'b0));
end

assign ap_return = 32'd0;

assign bias1_address0 = zext_ln222_fu_790_p1;

assign bias3_address0 = zext_ln228_fu_807_p1;

assign bias5_address0 = zext_ln234_fu_824_p1;

assign bias6_address0 = zext_ln240_fu_841_p1;

assign bitcast_ln142_fu_863_p1 = input6_inter_0_0_q0;

assign bitcast_ln164_fu_998_p1 = output_buf_q0;

assign c_fu_956_p2 = (c_0_i_reg_528 + 7'd1);

assign grp_i_convolution1_fu_577_ap_start = grp_i_convolution1_fu_577_ap_start_reg;

assign grp_i_convolution3_fu_561_ap_start = grp_i_convolution3_fu_561_ap_start_reg;

assign grp_i_convolution5_fu_569_ap_start = grp_i_convolution5_fu_569_ap_start_reg;

assign grp_i_max_pooling2_fu_585_ap_start = grp_i_max_pooling2_fu_585_ap_start_reg;

assign grp_i_max_pooling4_fu_591_ap_start = grp_i_max_pooling4_fu_591_ap_start_reg;

assign grp_i_relu1_fu_597_ap_start = grp_i_relu1_fu_597_ap_start_reg;

assign grp_i_relu2_fu_612_ap_start = grp_i_relu2_fu_612_ap_start_reg;

assign grp_i_relu3_fu_602_ap_start = grp_i_relu3_fu_602_ap_start_reg;

assign grp_i_relu4_fu_607_ap_start = grp_i_relu4_fu_607_ap_start_reg;

assign grp_ld_weights1_fu_631_ap_start = grp_ld_weights1_fu_631_ap_start_reg;

assign grp_ld_weights3_fu_624_ap_start = grp_ld_weights3_fu_624_ap_start_reg;

assign grp_ld_weights5_fu_617_ap_start = grp_ld_weights5_fu_617_ap_start_reg;

assign i_10_fu_801_p2 = (i_0_i18_reg_461 + 5'd1);

assign i_11_fu_818_p2 = (i_0_i20_reg_472 + 7'd1);

assign i_12_fu_835_p2 = (i_0_i22_reg_483 + 4'd1);

assign i_13_fu_852_p2 = (i_0_i24_reg_494 + 7'd1);

assign i_14_fu_987_p2 = (i_0_i29_reg_539 + 4'd1);

assign i_15_fu_1044_p2 = (i_0_i35_reg_550 + 4'd1);

assign i_2_fu_716_p2 = (i_0_i10_reg_428 + 4'd1);

assign i_9_fu_784_p2 = (i_0_i16_reg_450 + 3'd1);

assign i_fu_666_p2 = (i_0_i_reg_406 + 6'd1);

assign icmp_ln141_fu_846_p2 = ((i_0_i24_reg_494 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln142_1_fu_887_p2 = ((trunc_ln142_fu_877_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln142_fu_881_p2 = ((tmp_fu_867_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln149_fu_903_p2 = ((n_0_i_reg_505 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln152_fu_950_p2 = ((c_0_i_reg_528 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln163_fu_981_p2 = ((i_0_i29_reg_539 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln164_1_fu_1022_p2 = ((trunc_ln164_fu_1012_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_1016_p2 = ((tmp_2_fu_1002_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_660_p2 = ((i_0_i_reg_406 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln172_fu_684_p2 = ((j_0_i_reg_417 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln213_fu_710_p2 = ((i_0_i10_reg_428 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln214_fu_752_p2 = ((j_0_i12_reg_439 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln221_fu_778_p2 = ((i_0_i16_reg_450 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln227_fu_795_p2 = ((i_0_i18_reg_461 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln233_fu_812_p2 = ((i_0_i20_reg_472 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln239_fu_829_p2 = ((i_0_i22_reg_483 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln245_fu_1038_p2 = ((i_0_i35_reg_550 == 4'd10) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln173_1_fu_705_p1;

assign j_1_fu_758_p2 = (j_0_i12_reg_439 + 7'd1);

assign j_fu_690_p2 = (j_0_i_reg_417 + 6'd1);

assign n_fu_909_p2 = (n_0_i_reg_505 + 4'd1);

assign or_ln142_fu_893_p2 = (icmp_ln142_reg_1202 | icmp_ln142_1_reg_1207);

assign or_ln164_fu_1028_p2 = (icmp_ln164_reg_1304 | icmp_ln164_1_reg_1309);

assign output_r_address0 = zext_ln246_reg_1325;

assign output_r_d0 = output_buf_q0;

assign sext_ln154_fu_976_p1 = $signed(add_ln154_fu_971_p2);

assign sext_ln215_fu_773_p1 = $signed(add_ln215_fu_768_p2);

assign sub_ln154_fu_944_p2 = (zext_ln154_1_fu_928_p1 - zext_ln154_2_fu_940_p1);

assign sub_ln215_fu_746_p2 = (zext_ln215_fu_730_p1 - zext_ln215_1_fu_742_p1);

assign tmp_2_fu_1002_p4 = {{bitcast_ln164_fu_998_p1[30:23]}};

assign tmp_4_fu_672_p3 = {{i_0_i_reg_406}, {5'd0}};

assign tmp_5_fu_722_p3 = {{i_0_i10_reg_428}, {7'd0}};

assign tmp_6_fu_734_p3 = {{i_0_i10_reg_428}, {3'd0}};

assign tmp_7_fu_920_p3 = {{n_0_i_reg_505}, {7'd0}};

assign tmp_8_fu_932_p3 = {{n_0_i_reg_505}, {3'd0}};

assign tmp_fu_867_p4 = {{bitcast_ln142_fu_863_p1[30:23]}};

assign trunc_ln142_fu_877_p1 = bitcast_ln142_fu_863_p1[22:0];

assign trunc_ln164_fu_1012_p1 = bitcast_ln164_fu_998_p1[22:0];

assign weights1_address0 = grp_ld_weights1_fu_631_weights1_address0;

assign weights1_ce0 = grp_ld_weights1_fu_631_weights1_ce0;

assign weights3_address0 = grp_ld_weights3_fu_624_weights3_address0;

assign weights3_ce0 = grp_ld_weights3_fu_624_weights3_ce0;

assign weights5_address0 = grp_ld_weights5_fu_617_weights5_address0;

assign weights5_ce0 = grp_ld_weights5_fu_617_weights5_ce0;

assign weights6_address0 = sext_ln215_fu_773_p1;

assign zext_ln142_fu_858_p1 = i_0_i24_reg_494;

assign zext_ln151_fu_915_p1 = n_0_i_reg_505;

assign zext_ln154_1_fu_928_p1 = tmp_7_fu_920_p3;

assign zext_ln154_2_fu_940_p1 = tmp_8_fu_932_p3;

assign zext_ln154_3_fu_967_p1 = c_0_i_reg_528;

assign zext_ln154_fu_962_p1 = c_0_i_reg_528;

assign zext_ln164_fu_993_p1 = i_0_i29_reg_539;

assign zext_ln172_fu_680_p1 = tmp_4_fu_672_p3;

assign zext_ln173_1_fu_705_p1 = add_ln173_fu_700_p2;

assign zext_ln173_fu_696_p1 = j_0_i_reg_417;

assign zext_ln215_1_fu_742_p1 = tmp_6_fu_734_p3;

assign zext_ln215_2_fu_764_p1 = j_0_i12_reg_439;

assign zext_ln215_fu_730_p1 = tmp_5_fu_722_p3;

assign zext_ln222_fu_790_p1 = i_0_i16_reg_450;

assign zext_ln228_fu_807_p1 = i_0_i18_reg_461;

assign zext_ln234_fu_824_p1 = i_0_i20_reg_472;

assign zext_ln240_fu_841_p1 = i_0_i22_reg_483;

assign zext_ln246_fu_1050_p1 = i_0_i35_reg_550;

always @ (posedge ap_clk) begin
    zext_ln172_reg_1063[4:0] <= 5'b00000;
    zext_ln172_reg_1063[11] <= 1'b0;
    zext_ln173_1_reg_1076[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    sub_ln215_reg_1094[2:0] <= 3'b000;
    zext_ln222_reg_1125[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln228_reg_1143[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln234_reg_1161[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln240_reg_1179[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln151_reg_1223[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    sub_ln154_reg_1228[2:0] <= 3'b000;
    zext_ln246_reg_1325[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //lenet_top
