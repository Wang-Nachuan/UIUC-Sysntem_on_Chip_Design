// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lenet_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.657680,HLS_SYN_LAT=551271,HLS_SYN_TPT=none,HLS_SYN_MEM=175,HLS_SYN_DSP=51,HLS_SYN_FF=44101,HLS_SYN_LUT=38645,HLS_VERSION=2019_1}" *)

module lenet_top (
        ap_clk,
        ap_rst_n,
        m_axi_DATA_INPUT_AWVALID,
        m_axi_DATA_INPUT_AWREADY,
        m_axi_DATA_INPUT_AWADDR,
        m_axi_DATA_INPUT_AWID,
        m_axi_DATA_INPUT_AWLEN,
        m_axi_DATA_INPUT_AWSIZE,
        m_axi_DATA_INPUT_AWBURST,
        m_axi_DATA_INPUT_AWLOCK,
        m_axi_DATA_INPUT_AWCACHE,
        m_axi_DATA_INPUT_AWPROT,
        m_axi_DATA_INPUT_AWQOS,
        m_axi_DATA_INPUT_AWREGION,
        m_axi_DATA_INPUT_AWUSER,
        m_axi_DATA_INPUT_WVALID,
        m_axi_DATA_INPUT_WREADY,
        m_axi_DATA_INPUT_WDATA,
        m_axi_DATA_INPUT_WSTRB,
        m_axi_DATA_INPUT_WLAST,
        m_axi_DATA_INPUT_WID,
        m_axi_DATA_INPUT_WUSER,
        m_axi_DATA_INPUT_ARVALID,
        m_axi_DATA_INPUT_ARREADY,
        m_axi_DATA_INPUT_ARADDR,
        m_axi_DATA_INPUT_ARID,
        m_axi_DATA_INPUT_ARLEN,
        m_axi_DATA_INPUT_ARSIZE,
        m_axi_DATA_INPUT_ARBURST,
        m_axi_DATA_INPUT_ARLOCK,
        m_axi_DATA_INPUT_ARCACHE,
        m_axi_DATA_INPUT_ARPROT,
        m_axi_DATA_INPUT_ARQOS,
        m_axi_DATA_INPUT_ARREGION,
        m_axi_DATA_INPUT_ARUSER,
        m_axi_DATA_INPUT_RVALID,
        m_axi_DATA_INPUT_RREADY,
        m_axi_DATA_INPUT_RDATA,
        m_axi_DATA_INPUT_RLAST,
        m_axi_DATA_INPUT_RID,
        m_axi_DATA_INPUT_RUSER,
        m_axi_DATA_INPUT_RRESP,
        m_axi_DATA_INPUT_BVALID,
        m_axi_DATA_INPUT_BREADY,
        m_axi_DATA_INPUT_BRESP,
        m_axi_DATA_INPUT_BID,
        m_axi_DATA_INPUT_BUSER,
        m_axi_DATA_WEIGHT_AWVALID,
        m_axi_DATA_WEIGHT_AWREADY,
        m_axi_DATA_WEIGHT_AWADDR,
        m_axi_DATA_WEIGHT_AWID,
        m_axi_DATA_WEIGHT_AWLEN,
        m_axi_DATA_WEIGHT_AWSIZE,
        m_axi_DATA_WEIGHT_AWBURST,
        m_axi_DATA_WEIGHT_AWLOCK,
        m_axi_DATA_WEIGHT_AWCACHE,
        m_axi_DATA_WEIGHT_AWPROT,
        m_axi_DATA_WEIGHT_AWQOS,
        m_axi_DATA_WEIGHT_AWREGION,
        m_axi_DATA_WEIGHT_AWUSER,
        m_axi_DATA_WEIGHT_WVALID,
        m_axi_DATA_WEIGHT_WREADY,
        m_axi_DATA_WEIGHT_WDATA,
        m_axi_DATA_WEIGHT_WSTRB,
        m_axi_DATA_WEIGHT_WLAST,
        m_axi_DATA_WEIGHT_WID,
        m_axi_DATA_WEIGHT_WUSER,
        m_axi_DATA_WEIGHT_ARVALID,
        m_axi_DATA_WEIGHT_ARREADY,
        m_axi_DATA_WEIGHT_ARADDR,
        m_axi_DATA_WEIGHT_ARID,
        m_axi_DATA_WEIGHT_ARLEN,
        m_axi_DATA_WEIGHT_ARSIZE,
        m_axi_DATA_WEIGHT_ARBURST,
        m_axi_DATA_WEIGHT_ARLOCK,
        m_axi_DATA_WEIGHT_ARCACHE,
        m_axi_DATA_WEIGHT_ARPROT,
        m_axi_DATA_WEIGHT_ARQOS,
        m_axi_DATA_WEIGHT_ARREGION,
        m_axi_DATA_WEIGHT_ARUSER,
        m_axi_DATA_WEIGHT_RVALID,
        m_axi_DATA_WEIGHT_RREADY,
        m_axi_DATA_WEIGHT_RDATA,
        m_axi_DATA_WEIGHT_RLAST,
        m_axi_DATA_WEIGHT_RID,
        m_axi_DATA_WEIGHT_RUSER,
        m_axi_DATA_WEIGHT_RRESP,
        m_axi_DATA_WEIGHT_BVALID,
        m_axi_DATA_WEIGHT_BREADY,
        m_axi_DATA_WEIGHT_BRESP,
        m_axi_DATA_WEIGHT_BID,
        m_axi_DATA_WEIGHT_BUSER,
        m_axi_DATA_BIAS_AWVALID,
        m_axi_DATA_BIAS_AWREADY,
        m_axi_DATA_BIAS_AWADDR,
        m_axi_DATA_BIAS_AWID,
        m_axi_DATA_BIAS_AWLEN,
        m_axi_DATA_BIAS_AWSIZE,
        m_axi_DATA_BIAS_AWBURST,
        m_axi_DATA_BIAS_AWLOCK,
        m_axi_DATA_BIAS_AWCACHE,
        m_axi_DATA_BIAS_AWPROT,
        m_axi_DATA_BIAS_AWQOS,
        m_axi_DATA_BIAS_AWREGION,
        m_axi_DATA_BIAS_AWUSER,
        m_axi_DATA_BIAS_WVALID,
        m_axi_DATA_BIAS_WREADY,
        m_axi_DATA_BIAS_WDATA,
        m_axi_DATA_BIAS_WSTRB,
        m_axi_DATA_BIAS_WLAST,
        m_axi_DATA_BIAS_WID,
        m_axi_DATA_BIAS_WUSER,
        m_axi_DATA_BIAS_ARVALID,
        m_axi_DATA_BIAS_ARREADY,
        m_axi_DATA_BIAS_ARADDR,
        m_axi_DATA_BIAS_ARID,
        m_axi_DATA_BIAS_ARLEN,
        m_axi_DATA_BIAS_ARSIZE,
        m_axi_DATA_BIAS_ARBURST,
        m_axi_DATA_BIAS_ARLOCK,
        m_axi_DATA_BIAS_ARCACHE,
        m_axi_DATA_BIAS_ARPROT,
        m_axi_DATA_BIAS_ARQOS,
        m_axi_DATA_BIAS_ARREGION,
        m_axi_DATA_BIAS_ARUSER,
        m_axi_DATA_BIAS_RVALID,
        m_axi_DATA_BIAS_RREADY,
        m_axi_DATA_BIAS_RDATA,
        m_axi_DATA_BIAS_RLAST,
        m_axi_DATA_BIAS_RID,
        m_axi_DATA_BIAS_RUSER,
        m_axi_DATA_BIAS_RRESP,
        m_axi_DATA_BIAS_BVALID,
        m_axi_DATA_BIAS_BREADY,
        m_axi_DATA_BIAS_BRESP,
        m_axi_DATA_BIAS_BID,
        m_axi_DATA_BIAS_BUSER,
        m_axi_DATA_OUTPUT_AWVALID,
        m_axi_DATA_OUTPUT_AWREADY,
        m_axi_DATA_OUTPUT_AWADDR,
        m_axi_DATA_OUTPUT_AWID,
        m_axi_DATA_OUTPUT_AWLEN,
        m_axi_DATA_OUTPUT_AWSIZE,
        m_axi_DATA_OUTPUT_AWBURST,
        m_axi_DATA_OUTPUT_AWLOCK,
        m_axi_DATA_OUTPUT_AWCACHE,
        m_axi_DATA_OUTPUT_AWPROT,
        m_axi_DATA_OUTPUT_AWQOS,
        m_axi_DATA_OUTPUT_AWREGION,
        m_axi_DATA_OUTPUT_AWUSER,
        m_axi_DATA_OUTPUT_WVALID,
        m_axi_DATA_OUTPUT_WREADY,
        m_axi_DATA_OUTPUT_WDATA,
        m_axi_DATA_OUTPUT_WSTRB,
        m_axi_DATA_OUTPUT_WLAST,
        m_axi_DATA_OUTPUT_WID,
        m_axi_DATA_OUTPUT_WUSER,
        m_axi_DATA_OUTPUT_ARVALID,
        m_axi_DATA_OUTPUT_ARREADY,
        m_axi_DATA_OUTPUT_ARADDR,
        m_axi_DATA_OUTPUT_ARID,
        m_axi_DATA_OUTPUT_ARLEN,
        m_axi_DATA_OUTPUT_ARSIZE,
        m_axi_DATA_OUTPUT_ARBURST,
        m_axi_DATA_OUTPUT_ARLOCK,
        m_axi_DATA_OUTPUT_ARCACHE,
        m_axi_DATA_OUTPUT_ARPROT,
        m_axi_DATA_OUTPUT_ARQOS,
        m_axi_DATA_OUTPUT_ARREGION,
        m_axi_DATA_OUTPUT_ARUSER,
        m_axi_DATA_OUTPUT_RVALID,
        m_axi_DATA_OUTPUT_RREADY,
        m_axi_DATA_OUTPUT_RDATA,
        m_axi_DATA_OUTPUT_RLAST,
        m_axi_DATA_OUTPUT_RID,
        m_axi_DATA_OUTPUT_RUSER,
        m_axi_DATA_OUTPUT_RRESP,
        m_axi_DATA_OUTPUT_BVALID,
        m_axi_DATA_OUTPUT_BREADY,
        m_axi_DATA_OUTPUT_BRESP,
        m_axi_DATA_OUTPUT_BID,
        m_axi_DATA_OUTPUT_BUSER,
        s_axi_CTL_AWVALID,
        s_axi_CTL_AWREADY,
        s_axi_CTL_AWADDR,
        s_axi_CTL_WVALID,
        s_axi_CTL_WREADY,
        s_axi_CTL_WDATA,
        s_axi_CTL_WSTRB,
        s_axi_CTL_ARVALID,
        s_axi_CTL_ARREADY,
        s_axi_CTL_ARADDR,
        s_axi_CTL_RVALID,
        s_axi_CTL_RREADY,
        s_axi_CTL_RDATA,
        s_axi_CTL_RRESP,
        s_axi_CTL_BVALID,
        s_axi_CTL_BREADY,
        s_axi_CTL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;
parameter    C_S_AXI_CTL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_INPUT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_INPUT_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_INPUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_INPUT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_INPUT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_WEIGHT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_WEIGHT_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_WEIGHT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_WEIGHT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_BIAS_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_BIAS_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_BIAS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_USER_VALUE = 0;
parameter    C_M_AXI_DATA_BIAS_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_BIAS_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_OUTPUT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_OUTPUT_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_OUTPUT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_OUTPUT_CACHE_VALUE = 3;

parameter C_S_AXI_CTL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_INPUT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_WEIGHT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_BIAS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_OUTPUT_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_DATA_INPUT_AWVALID;
input   m_axi_DATA_INPUT_AWREADY;
output  [C_M_AXI_DATA_INPUT_ADDR_WIDTH - 1:0] m_axi_DATA_INPUT_AWADDR;
output  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_AWID;
output  [7:0] m_axi_DATA_INPUT_AWLEN;
output  [2:0] m_axi_DATA_INPUT_AWSIZE;
output  [1:0] m_axi_DATA_INPUT_AWBURST;
output  [1:0] m_axi_DATA_INPUT_AWLOCK;
output  [3:0] m_axi_DATA_INPUT_AWCACHE;
output  [2:0] m_axi_DATA_INPUT_AWPROT;
output  [3:0] m_axi_DATA_INPUT_AWQOS;
output  [3:0] m_axi_DATA_INPUT_AWREGION;
output  [C_M_AXI_DATA_INPUT_AWUSER_WIDTH - 1:0] m_axi_DATA_INPUT_AWUSER;
output   m_axi_DATA_INPUT_WVALID;
input   m_axi_DATA_INPUT_WREADY;
output  [C_M_AXI_DATA_INPUT_DATA_WIDTH - 1:0] m_axi_DATA_INPUT_WDATA;
output  [C_M_AXI_DATA_INPUT_WSTRB_WIDTH - 1:0] m_axi_DATA_INPUT_WSTRB;
output   m_axi_DATA_INPUT_WLAST;
output  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_WID;
output  [C_M_AXI_DATA_INPUT_WUSER_WIDTH - 1:0] m_axi_DATA_INPUT_WUSER;
output   m_axi_DATA_INPUT_ARVALID;
input   m_axi_DATA_INPUT_ARREADY;
output  [C_M_AXI_DATA_INPUT_ADDR_WIDTH - 1:0] m_axi_DATA_INPUT_ARADDR;
output  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_ARID;
output  [7:0] m_axi_DATA_INPUT_ARLEN;
output  [2:0] m_axi_DATA_INPUT_ARSIZE;
output  [1:0] m_axi_DATA_INPUT_ARBURST;
output  [1:0] m_axi_DATA_INPUT_ARLOCK;
output  [3:0] m_axi_DATA_INPUT_ARCACHE;
output  [2:0] m_axi_DATA_INPUT_ARPROT;
output  [3:0] m_axi_DATA_INPUT_ARQOS;
output  [3:0] m_axi_DATA_INPUT_ARREGION;
output  [C_M_AXI_DATA_INPUT_ARUSER_WIDTH - 1:0] m_axi_DATA_INPUT_ARUSER;
input   m_axi_DATA_INPUT_RVALID;
output   m_axi_DATA_INPUT_RREADY;
input  [C_M_AXI_DATA_INPUT_DATA_WIDTH - 1:0] m_axi_DATA_INPUT_RDATA;
input   m_axi_DATA_INPUT_RLAST;
input  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_RID;
input  [C_M_AXI_DATA_INPUT_RUSER_WIDTH - 1:0] m_axi_DATA_INPUT_RUSER;
input  [1:0] m_axi_DATA_INPUT_RRESP;
input   m_axi_DATA_INPUT_BVALID;
output   m_axi_DATA_INPUT_BREADY;
input  [1:0] m_axi_DATA_INPUT_BRESP;
input  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_BID;
input  [C_M_AXI_DATA_INPUT_BUSER_WIDTH - 1:0] m_axi_DATA_INPUT_BUSER;
output   m_axi_DATA_WEIGHT_AWVALID;
input   m_axi_DATA_WEIGHT_AWREADY;
output  [C_M_AXI_DATA_WEIGHT_ADDR_WIDTH - 1:0] m_axi_DATA_WEIGHT_AWADDR;
output  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_AWID;
output  [7:0] m_axi_DATA_WEIGHT_AWLEN;
output  [2:0] m_axi_DATA_WEIGHT_AWSIZE;
output  [1:0] m_axi_DATA_WEIGHT_AWBURST;
output  [1:0] m_axi_DATA_WEIGHT_AWLOCK;
output  [3:0] m_axi_DATA_WEIGHT_AWCACHE;
output  [2:0] m_axi_DATA_WEIGHT_AWPROT;
output  [3:0] m_axi_DATA_WEIGHT_AWQOS;
output  [3:0] m_axi_DATA_WEIGHT_AWREGION;
output  [C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_AWUSER;
output   m_axi_DATA_WEIGHT_WVALID;
input   m_axi_DATA_WEIGHT_WREADY;
output  [C_M_AXI_DATA_WEIGHT_DATA_WIDTH - 1:0] m_axi_DATA_WEIGHT_WDATA;
output  [C_M_AXI_DATA_WEIGHT_WSTRB_WIDTH - 1:0] m_axi_DATA_WEIGHT_WSTRB;
output   m_axi_DATA_WEIGHT_WLAST;
output  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_WID;
output  [C_M_AXI_DATA_WEIGHT_WUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_WUSER;
output   m_axi_DATA_WEIGHT_ARVALID;
input   m_axi_DATA_WEIGHT_ARREADY;
output  [C_M_AXI_DATA_WEIGHT_ADDR_WIDTH - 1:0] m_axi_DATA_WEIGHT_ARADDR;
output  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_ARID;
output  [7:0] m_axi_DATA_WEIGHT_ARLEN;
output  [2:0] m_axi_DATA_WEIGHT_ARSIZE;
output  [1:0] m_axi_DATA_WEIGHT_ARBURST;
output  [1:0] m_axi_DATA_WEIGHT_ARLOCK;
output  [3:0] m_axi_DATA_WEIGHT_ARCACHE;
output  [2:0] m_axi_DATA_WEIGHT_ARPROT;
output  [3:0] m_axi_DATA_WEIGHT_ARQOS;
output  [3:0] m_axi_DATA_WEIGHT_ARREGION;
output  [C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_ARUSER;
input   m_axi_DATA_WEIGHT_RVALID;
output   m_axi_DATA_WEIGHT_RREADY;
input  [C_M_AXI_DATA_WEIGHT_DATA_WIDTH - 1:0] m_axi_DATA_WEIGHT_RDATA;
input   m_axi_DATA_WEIGHT_RLAST;
input  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_RID;
input  [C_M_AXI_DATA_WEIGHT_RUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_RUSER;
input  [1:0] m_axi_DATA_WEIGHT_RRESP;
input   m_axi_DATA_WEIGHT_BVALID;
output   m_axi_DATA_WEIGHT_BREADY;
input  [1:0] m_axi_DATA_WEIGHT_BRESP;
input  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_BID;
input  [C_M_AXI_DATA_WEIGHT_BUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_BUSER;
output   m_axi_DATA_BIAS_AWVALID;
input   m_axi_DATA_BIAS_AWREADY;
output  [C_M_AXI_DATA_BIAS_ADDR_WIDTH - 1:0] m_axi_DATA_BIAS_AWADDR;
output  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_AWID;
output  [7:0] m_axi_DATA_BIAS_AWLEN;
output  [2:0] m_axi_DATA_BIAS_AWSIZE;
output  [1:0] m_axi_DATA_BIAS_AWBURST;
output  [1:0] m_axi_DATA_BIAS_AWLOCK;
output  [3:0] m_axi_DATA_BIAS_AWCACHE;
output  [2:0] m_axi_DATA_BIAS_AWPROT;
output  [3:0] m_axi_DATA_BIAS_AWQOS;
output  [3:0] m_axi_DATA_BIAS_AWREGION;
output  [C_M_AXI_DATA_BIAS_AWUSER_WIDTH - 1:0] m_axi_DATA_BIAS_AWUSER;
output   m_axi_DATA_BIAS_WVALID;
input   m_axi_DATA_BIAS_WREADY;
output  [C_M_AXI_DATA_BIAS_DATA_WIDTH - 1:0] m_axi_DATA_BIAS_WDATA;
output  [C_M_AXI_DATA_BIAS_WSTRB_WIDTH - 1:0] m_axi_DATA_BIAS_WSTRB;
output   m_axi_DATA_BIAS_WLAST;
output  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_WID;
output  [C_M_AXI_DATA_BIAS_WUSER_WIDTH - 1:0] m_axi_DATA_BIAS_WUSER;
output   m_axi_DATA_BIAS_ARVALID;
input   m_axi_DATA_BIAS_ARREADY;
output  [C_M_AXI_DATA_BIAS_ADDR_WIDTH - 1:0] m_axi_DATA_BIAS_ARADDR;
output  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_ARID;
output  [7:0] m_axi_DATA_BIAS_ARLEN;
output  [2:0] m_axi_DATA_BIAS_ARSIZE;
output  [1:0] m_axi_DATA_BIAS_ARBURST;
output  [1:0] m_axi_DATA_BIAS_ARLOCK;
output  [3:0] m_axi_DATA_BIAS_ARCACHE;
output  [2:0] m_axi_DATA_BIAS_ARPROT;
output  [3:0] m_axi_DATA_BIAS_ARQOS;
output  [3:0] m_axi_DATA_BIAS_ARREGION;
output  [C_M_AXI_DATA_BIAS_ARUSER_WIDTH - 1:0] m_axi_DATA_BIAS_ARUSER;
input   m_axi_DATA_BIAS_RVALID;
output   m_axi_DATA_BIAS_RREADY;
input  [C_M_AXI_DATA_BIAS_DATA_WIDTH - 1:0] m_axi_DATA_BIAS_RDATA;
input   m_axi_DATA_BIAS_RLAST;
input  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_RID;
input  [C_M_AXI_DATA_BIAS_RUSER_WIDTH - 1:0] m_axi_DATA_BIAS_RUSER;
input  [1:0] m_axi_DATA_BIAS_RRESP;
input   m_axi_DATA_BIAS_BVALID;
output   m_axi_DATA_BIAS_BREADY;
input  [1:0] m_axi_DATA_BIAS_BRESP;
input  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_BID;
input  [C_M_AXI_DATA_BIAS_BUSER_WIDTH - 1:0] m_axi_DATA_BIAS_BUSER;
output   m_axi_DATA_OUTPUT_AWVALID;
input   m_axi_DATA_OUTPUT_AWREADY;
output  [C_M_AXI_DATA_OUTPUT_ADDR_WIDTH - 1:0] m_axi_DATA_OUTPUT_AWADDR;
output  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_AWID;
output  [7:0] m_axi_DATA_OUTPUT_AWLEN;
output  [2:0] m_axi_DATA_OUTPUT_AWSIZE;
output  [1:0] m_axi_DATA_OUTPUT_AWBURST;
output  [1:0] m_axi_DATA_OUTPUT_AWLOCK;
output  [3:0] m_axi_DATA_OUTPUT_AWCACHE;
output  [2:0] m_axi_DATA_OUTPUT_AWPROT;
output  [3:0] m_axi_DATA_OUTPUT_AWQOS;
output  [3:0] m_axi_DATA_OUTPUT_AWREGION;
output  [C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_AWUSER;
output   m_axi_DATA_OUTPUT_WVALID;
input   m_axi_DATA_OUTPUT_WREADY;
output  [C_M_AXI_DATA_OUTPUT_DATA_WIDTH - 1:0] m_axi_DATA_OUTPUT_WDATA;
output  [C_M_AXI_DATA_OUTPUT_WSTRB_WIDTH - 1:0] m_axi_DATA_OUTPUT_WSTRB;
output   m_axi_DATA_OUTPUT_WLAST;
output  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_WID;
output  [C_M_AXI_DATA_OUTPUT_WUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_WUSER;
output   m_axi_DATA_OUTPUT_ARVALID;
input   m_axi_DATA_OUTPUT_ARREADY;
output  [C_M_AXI_DATA_OUTPUT_ADDR_WIDTH - 1:0] m_axi_DATA_OUTPUT_ARADDR;
output  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_ARID;
output  [7:0] m_axi_DATA_OUTPUT_ARLEN;
output  [2:0] m_axi_DATA_OUTPUT_ARSIZE;
output  [1:0] m_axi_DATA_OUTPUT_ARBURST;
output  [1:0] m_axi_DATA_OUTPUT_ARLOCK;
output  [3:0] m_axi_DATA_OUTPUT_ARCACHE;
output  [2:0] m_axi_DATA_OUTPUT_ARPROT;
output  [3:0] m_axi_DATA_OUTPUT_ARQOS;
output  [3:0] m_axi_DATA_OUTPUT_ARREGION;
output  [C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_ARUSER;
input   m_axi_DATA_OUTPUT_RVALID;
output   m_axi_DATA_OUTPUT_RREADY;
input  [C_M_AXI_DATA_OUTPUT_DATA_WIDTH - 1:0] m_axi_DATA_OUTPUT_RDATA;
input   m_axi_DATA_OUTPUT_RLAST;
input  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_RID;
input  [C_M_AXI_DATA_OUTPUT_RUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_RUSER;
input  [1:0] m_axi_DATA_OUTPUT_RRESP;
input   m_axi_DATA_OUTPUT_BVALID;
output   m_axi_DATA_OUTPUT_BREADY;
input  [1:0] m_axi_DATA_OUTPUT_BRESP;
input  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_BID;
input  [C_M_AXI_DATA_OUTPUT_BUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_BUSER;
input   s_axi_CTL_AWVALID;
output   s_axi_CTL_AWREADY;
input  [C_S_AXI_CTL_ADDR_WIDTH - 1:0] s_axi_CTL_AWADDR;
input   s_axi_CTL_WVALID;
output   s_axi_CTL_WREADY;
input  [C_S_AXI_CTL_DATA_WIDTH - 1:0] s_axi_CTL_WDATA;
input  [C_S_AXI_CTL_WSTRB_WIDTH - 1:0] s_axi_CTL_WSTRB;
input   s_axi_CTL_ARVALID;
output   s_axi_CTL_ARREADY;
input  [C_S_AXI_CTL_ADDR_WIDTH - 1:0] s_axi_CTL_ARADDR;
output   s_axi_CTL_RVALID;
input   s_axi_CTL_RREADY;
output  [C_S_AXI_CTL_DATA_WIDTH - 1:0] s_axi_CTL_RDATA;
output  [1:0] s_axi_CTL_RRESP;
output   s_axi_CTL_BVALID;
input   s_axi_CTL_BREADY;
output  [1:0] s_axi_CTL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_r;
wire   [31:0] weights1;
wire   [31:0] bias1;
wire   [31:0] weights3;
wire   [31:0] bias3;
wire   [31:0] weights5;
wire   [31:0] bias5;
wire   [31:0] weights6;
wire   [31:0] bias6;
wire   [31:0] output_r;
wire   [31:0] ap_return;
wire    DATA_INPUT_AWREADY;
wire    DATA_INPUT_WREADY;
reg    DATA_INPUT_ARVALID;
wire    DATA_INPUT_ARREADY;
wire    DATA_INPUT_RVALID;
reg    DATA_INPUT_RREADY;
wire   [31:0] DATA_INPUT_RDATA;
wire    DATA_INPUT_RLAST;
wire   [0:0] DATA_INPUT_RID;
wire   [0:0] DATA_INPUT_RUSER;
wire   [1:0] DATA_INPUT_RRESP;
wire    DATA_INPUT_BVALID;
wire   [1:0] DATA_INPUT_BRESP;
wire   [0:0] DATA_INPUT_BID;
wire   [0:0] DATA_INPUT_BUSER;
wire    DATA_WEIGHT_AWREADY;
wire    DATA_WEIGHT_WREADY;
reg    DATA_WEIGHT_ARVALID;
wire    DATA_WEIGHT_ARREADY;
reg   [31:0] DATA_WEIGHT_ARADDR;
reg   [0:0] DATA_WEIGHT_ARID;
reg   [31:0] DATA_WEIGHT_ARLEN;
reg   [2:0] DATA_WEIGHT_ARSIZE;
reg   [1:0] DATA_WEIGHT_ARBURST;
reg   [1:0] DATA_WEIGHT_ARLOCK;
reg   [3:0] DATA_WEIGHT_ARCACHE;
reg   [2:0] DATA_WEIGHT_ARPROT;
reg   [3:0] DATA_WEIGHT_ARQOS;
reg   [3:0] DATA_WEIGHT_ARREGION;
reg   [0:0] DATA_WEIGHT_ARUSER;
wire    DATA_WEIGHT_RVALID;
reg    DATA_WEIGHT_RREADY;
wire   [31:0] DATA_WEIGHT_RDATA;
wire    DATA_WEIGHT_RLAST;
wire   [0:0] DATA_WEIGHT_RID;
wire   [0:0] DATA_WEIGHT_RUSER;
wire   [1:0] DATA_WEIGHT_RRESP;
wire    DATA_WEIGHT_BVALID;
wire   [1:0] DATA_WEIGHT_BRESP;
wire   [0:0] DATA_WEIGHT_BID;
wire   [0:0] DATA_WEIGHT_BUSER;
wire    DATA_BIAS_AWREADY;
wire    DATA_BIAS_WREADY;
reg    DATA_BIAS_ARVALID;
wire    DATA_BIAS_ARREADY;
reg   [31:0] DATA_BIAS_ARADDR;
reg   [0:0] DATA_BIAS_ARID;
reg   [31:0] DATA_BIAS_ARLEN;
reg   [2:0] DATA_BIAS_ARSIZE;
reg   [1:0] DATA_BIAS_ARBURST;
reg   [1:0] DATA_BIAS_ARLOCK;
reg   [3:0] DATA_BIAS_ARCACHE;
reg   [2:0] DATA_BIAS_ARPROT;
reg   [3:0] DATA_BIAS_ARQOS;
reg   [3:0] DATA_BIAS_ARREGION;
reg   [0:0] DATA_BIAS_ARUSER;
wire    DATA_BIAS_RVALID;
reg    DATA_BIAS_RREADY;
wire   [31:0] DATA_BIAS_RDATA;
wire    DATA_BIAS_RLAST;
wire   [0:0] DATA_BIAS_RID;
wire   [0:0] DATA_BIAS_RUSER;
wire   [1:0] DATA_BIAS_RRESP;
wire    DATA_BIAS_BVALID;
wire   [1:0] DATA_BIAS_BRESP;
wire   [0:0] DATA_BIAS_BID;
wire   [0:0] DATA_BIAS_BUSER;
reg    DATA_OUTPUT_AWVALID;
wire    DATA_OUTPUT_AWREADY;
reg    DATA_OUTPUT_WVALID;
wire    DATA_OUTPUT_WREADY;
wire    DATA_OUTPUT_ARREADY;
wire    DATA_OUTPUT_RVALID;
wire   [31:0] DATA_OUTPUT_RDATA;
wire    DATA_OUTPUT_RLAST;
wire   [0:0] DATA_OUTPUT_RID;
wire   [0:0] DATA_OUTPUT_RUSER;
wire   [1:0] DATA_OUTPUT_RRESP;
wire    DATA_OUTPUT_BVALID;
reg    DATA_OUTPUT_BREADY;
wire   [1:0] DATA_OUTPUT_BRESP;
wire   [0:0] DATA_OUTPUT_BID;
wire   [0:0] DATA_OUTPUT_BUSER;
reg   [29:0] output1_reg_478;
reg   [29:0] bias_reg_483;
reg   [29:0] weights_reg_488;
reg   [29:0] bias2_reg_493;
reg   [29:0] weights2_reg_498;
reg   [29:0] bias4_reg_503;
reg   [29:0] weights4_reg_508;
reg   [29:0] bias7_reg_513;
reg   [29:0] weights7_reg_518;
reg   [29:0] input1_reg_523;
reg   [9:0] input_buf_0_address0;
reg    input_buf_0_ce0;
reg    input_buf_0_we0;
wire   [31:0] input_buf_0_q0;
reg    input_buf_0_ce1;
wire   [31:0] input_buf_0_q1;
reg   [7:0] weights1_buf_0_address0;
reg    weights1_buf_0_ce0;
reg    weights1_buf_0_we0;
wire   [31:0] weights1_buf_0_q0;
reg    weights1_buf_0_ce1;
wire   [31:0] weights1_buf_0_q1;
reg   [11:0] weights3_buf_address0;
reg    weights3_buf_ce0;
reg    weights3_buf_we0;
wire   [31:0] weights3_buf_q0;
reg    weights3_buf_ce1;
wire   [31:0] weights3_buf_q1;
reg   [15:0] weights5_buf_address0;
reg    weights5_buf_ce0;
reg    weights5_buf_we0;
wire   [31:0] weights5_buf_q0;
reg   [2:0] bias1_buf_address0;
reg    bias1_buf_ce0;
reg    bias1_buf_we0;
wire   [31:0] bias1_buf_q0;
reg   [3:0] bias3_buf_address0;
reg    bias3_buf_ce0;
reg    bias3_buf_we0;
wire   [31:0] bias3_buf_q0;
reg   [6:0] bias5_buf_address0;
reg    bias5_buf_ce0;
reg    bias5_buf_we0;
wire   [31:0] bias5_buf_q0;
reg   [12:0] input2_inter_address0;
reg    input2_inter_ce0;
reg    input2_inter_we0;
wire   [31:0] input2_inter_q0;
reg   [10:0] input3_inter_address0;
reg    input3_inter_ce0;
reg    input3_inter_we0;
wire   [31:0] input3_inter_q0;
reg    input3_inter_ce1;
wire   [31:0] input3_inter_q1;
reg   [10:0] input4_inter_address0;
reg    input4_inter_ce0;
reg    input4_inter_we0;
wire   [31:0] input4_inter_q0;
reg   [8:0] input5_inter_address0;
reg    input5_inter_ce0;
reg    input5_inter_we0;
wire   [31:0] input5_inter_q0;
reg   [6:0] input6_inter_0_0_address0;
reg    input6_inter_0_0_ce0;
reg    input6_inter_0_0_we0;
wire   [31:0] input6_inter_0_0_q0;
reg   [3:0] output_buf_address0;
reg    output_buf_ce0;
reg    output_buf_we0;
wire   [31:0] output_buf_q0;
wire    grp_i_convolution3_fu_266_ap_start;
wire    grp_i_convolution3_fu_266_ap_done;
wire    grp_i_convolution3_fu_266_ap_idle;
wire    grp_i_convolution3_fu_266_ap_ready;
wire   [10:0] grp_i_convolution3_fu_266_input_r_address0;
wire    grp_i_convolution3_fu_266_input_r_ce0;
wire   [10:0] grp_i_convolution3_fu_266_input_r_address1;
wire    grp_i_convolution3_fu_266_input_r_ce1;
wire   [11:0] grp_i_convolution3_fu_266_weights_address0;
wire    grp_i_convolution3_fu_266_weights_ce0;
wire   [11:0] grp_i_convolution3_fu_266_weights_address1;
wire    grp_i_convolution3_fu_266_weights_ce1;
wire   [3:0] grp_i_convolution3_fu_266_bias_address0;
wire    grp_i_convolution3_fu_266_bias_ce0;
wire   [10:0] grp_i_convolution3_fu_266_output_r_address0;
wire    grp_i_convolution3_fu_266_output_r_ce0;
wire    grp_i_convolution3_fu_266_output_r_we0;
wire   [31:0] grp_i_convolution3_fu_266_output_r_d0;
wire    grp_i_convolution1_fu_274_ap_start;
wire    grp_i_convolution1_fu_274_ap_done;
wire    grp_i_convolution1_fu_274_ap_idle;
wire    grp_i_convolution1_fu_274_ap_ready;
wire   [9:0] grp_i_convolution1_fu_274_input_0_address0;
wire    grp_i_convolution1_fu_274_input_0_ce0;
wire   [9:0] grp_i_convolution1_fu_274_input_0_address1;
wire    grp_i_convolution1_fu_274_input_0_ce1;
wire   [7:0] grp_i_convolution1_fu_274_weights_0_address0;
wire    grp_i_convolution1_fu_274_weights_0_ce0;
wire   [7:0] grp_i_convolution1_fu_274_weights_0_address1;
wire    grp_i_convolution1_fu_274_weights_0_ce1;
wire   [2:0] grp_i_convolution1_fu_274_bias_address0;
wire    grp_i_convolution1_fu_274_bias_ce0;
wire   [12:0] grp_i_convolution1_fu_274_output_r_address0;
wire    grp_i_convolution1_fu_274_output_r_ce0;
wire    grp_i_convolution1_fu_274_output_r_we0;
wire   [31:0] grp_i_convolution1_fu_274_output_r_d0;
wire    grp_i_convolution5_fu_282_ap_start;
wire    grp_i_convolution5_fu_282_ap_done;
wire    grp_i_convolution5_fu_282_ap_idle;
wire    grp_i_convolution5_fu_282_ap_ready;
wire   [8:0] grp_i_convolution5_fu_282_input_r_address0;
wire    grp_i_convolution5_fu_282_input_r_ce0;
wire   [15:0] grp_i_convolution5_fu_282_weights_address0;
wire    grp_i_convolution5_fu_282_weights_ce0;
wire   [6:0] grp_i_convolution5_fu_282_bias_address0;
wire    grp_i_convolution5_fu_282_bias_ce0;
wire   [6:0] grp_i_convolution5_fu_282_output_0_0_address0;
wire    grp_i_convolution5_fu_282_output_0_0_ce0;
wire    grp_i_convolution5_fu_282_output_0_0_we0;
wire   [31:0] grp_i_convolution5_fu_282_output_0_0_d0;
wire    grp_i_fc6_fu_290_ap_start;
wire    grp_i_fc6_fu_290_ap_done;
wire    grp_i_fc6_fu_290_ap_idle;
wire    grp_i_fc6_fu_290_ap_ready;
wire   [6:0] grp_i_fc6_fu_290_input_0_0_address0;
wire    grp_i_fc6_fu_290_input_0_0_ce0;
wire    grp_i_fc6_fu_290_m_axi_weights_AWVALID;
wire   [31:0] grp_i_fc6_fu_290_m_axi_weights_AWADDR;
wire   [0:0] grp_i_fc6_fu_290_m_axi_weights_AWID;
wire   [31:0] grp_i_fc6_fu_290_m_axi_weights_AWLEN;
wire   [2:0] grp_i_fc6_fu_290_m_axi_weights_AWSIZE;
wire   [1:0] grp_i_fc6_fu_290_m_axi_weights_AWBURST;
wire   [1:0] grp_i_fc6_fu_290_m_axi_weights_AWLOCK;
wire   [3:0] grp_i_fc6_fu_290_m_axi_weights_AWCACHE;
wire   [2:0] grp_i_fc6_fu_290_m_axi_weights_AWPROT;
wire   [3:0] grp_i_fc6_fu_290_m_axi_weights_AWQOS;
wire   [3:0] grp_i_fc6_fu_290_m_axi_weights_AWREGION;
wire   [0:0] grp_i_fc6_fu_290_m_axi_weights_AWUSER;
wire    grp_i_fc6_fu_290_m_axi_weights_WVALID;
wire   [31:0] grp_i_fc6_fu_290_m_axi_weights_WDATA;
wire   [3:0] grp_i_fc6_fu_290_m_axi_weights_WSTRB;
wire    grp_i_fc6_fu_290_m_axi_weights_WLAST;
wire   [0:0] grp_i_fc6_fu_290_m_axi_weights_WID;
wire   [0:0] grp_i_fc6_fu_290_m_axi_weights_WUSER;
wire    grp_i_fc6_fu_290_m_axi_weights_ARVALID;
wire   [31:0] grp_i_fc6_fu_290_m_axi_weights_ARADDR;
wire   [0:0] grp_i_fc6_fu_290_m_axi_weights_ARID;
wire   [31:0] grp_i_fc6_fu_290_m_axi_weights_ARLEN;
wire   [2:0] grp_i_fc6_fu_290_m_axi_weights_ARSIZE;
wire   [1:0] grp_i_fc6_fu_290_m_axi_weights_ARBURST;
wire   [1:0] grp_i_fc6_fu_290_m_axi_weights_ARLOCK;
wire   [3:0] grp_i_fc6_fu_290_m_axi_weights_ARCACHE;
wire   [2:0] grp_i_fc6_fu_290_m_axi_weights_ARPROT;
wire   [3:0] grp_i_fc6_fu_290_m_axi_weights_ARQOS;
wire   [3:0] grp_i_fc6_fu_290_m_axi_weights_ARREGION;
wire   [0:0] grp_i_fc6_fu_290_m_axi_weights_ARUSER;
wire    grp_i_fc6_fu_290_m_axi_weights_RREADY;
wire    grp_i_fc6_fu_290_m_axi_weights_BREADY;
wire    grp_i_fc6_fu_290_m_axi_bias_AWVALID;
wire   [31:0] grp_i_fc6_fu_290_m_axi_bias_AWADDR;
wire   [0:0] grp_i_fc6_fu_290_m_axi_bias_AWID;
wire   [31:0] grp_i_fc6_fu_290_m_axi_bias_AWLEN;
wire   [2:0] grp_i_fc6_fu_290_m_axi_bias_AWSIZE;
wire   [1:0] grp_i_fc6_fu_290_m_axi_bias_AWBURST;
wire   [1:0] grp_i_fc6_fu_290_m_axi_bias_AWLOCK;
wire   [3:0] grp_i_fc6_fu_290_m_axi_bias_AWCACHE;
wire   [2:0] grp_i_fc6_fu_290_m_axi_bias_AWPROT;
wire   [3:0] grp_i_fc6_fu_290_m_axi_bias_AWQOS;
wire   [3:0] grp_i_fc6_fu_290_m_axi_bias_AWREGION;
wire   [0:0] grp_i_fc6_fu_290_m_axi_bias_AWUSER;
wire    grp_i_fc6_fu_290_m_axi_bias_WVALID;
wire   [31:0] grp_i_fc6_fu_290_m_axi_bias_WDATA;
wire   [3:0] grp_i_fc6_fu_290_m_axi_bias_WSTRB;
wire    grp_i_fc6_fu_290_m_axi_bias_WLAST;
wire   [0:0] grp_i_fc6_fu_290_m_axi_bias_WID;
wire   [0:0] grp_i_fc6_fu_290_m_axi_bias_WUSER;
wire    grp_i_fc6_fu_290_m_axi_bias_ARVALID;
wire   [31:0] grp_i_fc6_fu_290_m_axi_bias_ARADDR;
wire   [0:0] grp_i_fc6_fu_290_m_axi_bias_ARID;
wire   [31:0] grp_i_fc6_fu_290_m_axi_bias_ARLEN;
wire   [2:0] grp_i_fc6_fu_290_m_axi_bias_ARSIZE;
wire   [1:0] grp_i_fc6_fu_290_m_axi_bias_ARBURST;
wire   [1:0] grp_i_fc6_fu_290_m_axi_bias_ARLOCK;
wire   [3:0] grp_i_fc6_fu_290_m_axi_bias_ARCACHE;
wire   [2:0] grp_i_fc6_fu_290_m_axi_bias_ARPROT;
wire   [3:0] grp_i_fc6_fu_290_m_axi_bias_ARQOS;
wire   [3:0] grp_i_fc6_fu_290_m_axi_bias_ARREGION;
wire   [0:0] grp_i_fc6_fu_290_m_axi_bias_ARUSER;
wire    grp_i_fc6_fu_290_m_axi_bias_RREADY;
wire    grp_i_fc6_fu_290_m_axi_bias_BREADY;
wire   [3:0] grp_i_fc6_fu_290_output_r_address0;
wire    grp_i_fc6_fu_290_output_r_ce0;
wire    grp_i_fc6_fu_290_output_r_we0;
wire   [31:0] grp_i_fc6_fu_290_output_r_d0;
wire    grp_i_max_pooling2_fu_302_ap_start;
wire    grp_i_max_pooling2_fu_302_ap_done;
wire    grp_i_max_pooling2_fu_302_ap_idle;
wire    grp_i_max_pooling2_fu_302_ap_ready;
wire   [12:0] grp_i_max_pooling2_fu_302_input_r_address0;
wire    grp_i_max_pooling2_fu_302_input_r_ce0;
wire   [10:0] grp_i_max_pooling2_fu_302_output_r_address0;
wire    grp_i_max_pooling2_fu_302_output_r_ce0;
wire    grp_i_max_pooling2_fu_302_output_r_we0;
wire   [31:0] grp_i_max_pooling2_fu_302_output_r_d0;
wire    grp_i_max_pooling4_fu_308_ap_start;
wire    grp_i_max_pooling4_fu_308_ap_done;
wire    grp_i_max_pooling4_fu_308_ap_idle;
wire    grp_i_max_pooling4_fu_308_ap_ready;
wire   [10:0] grp_i_max_pooling4_fu_308_input_r_address0;
wire    grp_i_max_pooling4_fu_308_input_r_ce0;
wire   [8:0] grp_i_max_pooling4_fu_308_output_r_address0;
wire    grp_i_max_pooling4_fu_308_output_r_ce0;
wire    grp_i_max_pooling4_fu_308_output_r_we0;
wire   [31:0] grp_i_max_pooling4_fu_308_output_r_d0;
wire    grp_ld_weights5_fu_314_ap_start;
wire    grp_ld_weights5_fu_314_ap_done;
wire    grp_ld_weights5_fu_314_ap_idle;
wire    grp_ld_weights5_fu_314_ap_ready;
wire    grp_ld_weights5_fu_314_m_axi_weights5_AWVALID;
wire   [31:0] grp_ld_weights5_fu_314_m_axi_weights5_AWADDR;
wire   [0:0] grp_ld_weights5_fu_314_m_axi_weights5_AWID;
wire   [31:0] grp_ld_weights5_fu_314_m_axi_weights5_AWLEN;
wire   [2:0] grp_ld_weights5_fu_314_m_axi_weights5_AWSIZE;
wire   [1:0] grp_ld_weights5_fu_314_m_axi_weights5_AWBURST;
wire   [1:0] grp_ld_weights5_fu_314_m_axi_weights5_AWLOCK;
wire   [3:0] grp_ld_weights5_fu_314_m_axi_weights5_AWCACHE;
wire   [2:0] grp_ld_weights5_fu_314_m_axi_weights5_AWPROT;
wire   [3:0] grp_ld_weights5_fu_314_m_axi_weights5_AWQOS;
wire   [3:0] grp_ld_weights5_fu_314_m_axi_weights5_AWREGION;
wire   [0:0] grp_ld_weights5_fu_314_m_axi_weights5_AWUSER;
wire    grp_ld_weights5_fu_314_m_axi_weights5_WVALID;
wire   [31:0] grp_ld_weights5_fu_314_m_axi_weights5_WDATA;
wire   [3:0] grp_ld_weights5_fu_314_m_axi_weights5_WSTRB;
wire    grp_ld_weights5_fu_314_m_axi_weights5_WLAST;
wire   [0:0] grp_ld_weights5_fu_314_m_axi_weights5_WID;
wire   [0:0] grp_ld_weights5_fu_314_m_axi_weights5_WUSER;
wire    grp_ld_weights5_fu_314_m_axi_weights5_ARVALID;
wire   [31:0] grp_ld_weights5_fu_314_m_axi_weights5_ARADDR;
wire   [0:0] grp_ld_weights5_fu_314_m_axi_weights5_ARID;
wire   [31:0] grp_ld_weights5_fu_314_m_axi_weights5_ARLEN;
wire   [2:0] grp_ld_weights5_fu_314_m_axi_weights5_ARSIZE;
wire   [1:0] grp_ld_weights5_fu_314_m_axi_weights5_ARBURST;
wire   [1:0] grp_ld_weights5_fu_314_m_axi_weights5_ARLOCK;
wire   [3:0] grp_ld_weights5_fu_314_m_axi_weights5_ARCACHE;
wire   [2:0] grp_ld_weights5_fu_314_m_axi_weights5_ARPROT;
wire   [3:0] grp_ld_weights5_fu_314_m_axi_weights5_ARQOS;
wire   [3:0] grp_ld_weights5_fu_314_m_axi_weights5_ARREGION;
wire   [0:0] grp_ld_weights5_fu_314_m_axi_weights5_ARUSER;
wire    grp_ld_weights5_fu_314_m_axi_weights5_RREADY;
wire    grp_ld_weights5_fu_314_m_axi_weights5_BREADY;
wire   [15:0] grp_ld_weights5_fu_314_weights5_buf_address0;
wire    grp_ld_weights5_fu_314_weights5_buf_ce0;
wire    grp_ld_weights5_fu_314_weights5_buf_we0;
wire   [31:0] grp_ld_weights5_fu_314_weights5_buf_d0;
wire    grp_ld_weights3_fu_322_ap_start;
wire    grp_ld_weights3_fu_322_ap_done;
wire    grp_ld_weights3_fu_322_ap_idle;
wire    grp_ld_weights3_fu_322_ap_ready;
wire    grp_ld_weights3_fu_322_m_axi_weights3_AWVALID;
wire   [31:0] grp_ld_weights3_fu_322_m_axi_weights3_AWADDR;
wire   [0:0] grp_ld_weights3_fu_322_m_axi_weights3_AWID;
wire   [31:0] grp_ld_weights3_fu_322_m_axi_weights3_AWLEN;
wire   [2:0] grp_ld_weights3_fu_322_m_axi_weights3_AWSIZE;
wire   [1:0] grp_ld_weights3_fu_322_m_axi_weights3_AWBURST;
wire   [1:0] grp_ld_weights3_fu_322_m_axi_weights3_AWLOCK;
wire   [3:0] grp_ld_weights3_fu_322_m_axi_weights3_AWCACHE;
wire   [2:0] grp_ld_weights3_fu_322_m_axi_weights3_AWPROT;
wire   [3:0] grp_ld_weights3_fu_322_m_axi_weights3_AWQOS;
wire   [3:0] grp_ld_weights3_fu_322_m_axi_weights3_AWREGION;
wire   [0:0] grp_ld_weights3_fu_322_m_axi_weights3_AWUSER;
wire    grp_ld_weights3_fu_322_m_axi_weights3_WVALID;
wire   [31:0] grp_ld_weights3_fu_322_m_axi_weights3_WDATA;
wire   [3:0] grp_ld_weights3_fu_322_m_axi_weights3_WSTRB;
wire    grp_ld_weights3_fu_322_m_axi_weights3_WLAST;
wire   [0:0] grp_ld_weights3_fu_322_m_axi_weights3_WID;
wire   [0:0] grp_ld_weights3_fu_322_m_axi_weights3_WUSER;
wire    grp_ld_weights3_fu_322_m_axi_weights3_ARVALID;
wire   [31:0] grp_ld_weights3_fu_322_m_axi_weights3_ARADDR;
wire   [0:0] grp_ld_weights3_fu_322_m_axi_weights3_ARID;
wire   [31:0] grp_ld_weights3_fu_322_m_axi_weights3_ARLEN;
wire   [2:0] grp_ld_weights3_fu_322_m_axi_weights3_ARSIZE;
wire   [1:0] grp_ld_weights3_fu_322_m_axi_weights3_ARBURST;
wire   [1:0] grp_ld_weights3_fu_322_m_axi_weights3_ARLOCK;
wire   [3:0] grp_ld_weights3_fu_322_m_axi_weights3_ARCACHE;
wire   [2:0] grp_ld_weights3_fu_322_m_axi_weights3_ARPROT;
wire   [3:0] grp_ld_weights3_fu_322_m_axi_weights3_ARQOS;
wire   [3:0] grp_ld_weights3_fu_322_m_axi_weights3_ARREGION;
wire   [0:0] grp_ld_weights3_fu_322_m_axi_weights3_ARUSER;
wire    grp_ld_weights3_fu_322_m_axi_weights3_RREADY;
wire    grp_ld_weights3_fu_322_m_axi_weights3_BREADY;
wire   [11:0] grp_ld_weights3_fu_322_weights3_buf_address0;
wire    grp_ld_weights3_fu_322_weights3_buf_ce0;
wire    grp_ld_weights3_fu_322_weights3_buf_we0;
wire   [31:0] grp_ld_weights3_fu_322_weights3_buf_d0;
wire    grp_ld_weights1_fu_330_ap_start;
wire    grp_ld_weights1_fu_330_ap_done;
wire    grp_ld_weights1_fu_330_ap_idle;
wire    grp_ld_weights1_fu_330_ap_ready;
wire    grp_ld_weights1_fu_330_m_axi_weights1_AWVALID;
wire   [31:0] grp_ld_weights1_fu_330_m_axi_weights1_AWADDR;
wire   [0:0] grp_ld_weights1_fu_330_m_axi_weights1_AWID;
wire   [31:0] grp_ld_weights1_fu_330_m_axi_weights1_AWLEN;
wire   [2:0] grp_ld_weights1_fu_330_m_axi_weights1_AWSIZE;
wire   [1:0] grp_ld_weights1_fu_330_m_axi_weights1_AWBURST;
wire   [1:0] grp_ld_weights1_fu_330_m_axi_weights1_AWLOCK;
wire   [3:0] grp_ld_weights1_fu_330_m_axi_weights1_AWCACHE;
wire   [2:0] grp_ld_weights1_fu_330_m_axi_weights1_AWPROT;
wire   [3:0] grp_ld_weights1_fu_330_m_axi_weights1_AWQOS;
wire   [3:0] grp_ld_weights1_fu_330_m_axi_weights1_AWREGION;
wire   [0:0] grp_ld_weights1_fu_330_m_axi_weights1_AWUSER;
wire    grp_ld_weights1_fu_330_m_axi_weights1_WVALID;
wire   [31:0] grp_ld_weights1_fu_330_m_axi_weights1_WDATA;
wire   [3:0] grp_ld_weights1_fu_330_m_axi_weights1_WSTRB;
wire    grp_ld_weights1_fu_330_m_axi_weights1_WLAST;
wire   [0:0] grp_ld_weights1_fu_330_m_axi_weights1_WID;
wire   [0:0] grp_ld_weights1_fu_330_m_axi_weights1_WUSER;
wire    grp_ld_weights1_fu_330_m_axi_weights1_ARVALID;
wire   [31:0] grp_ld_weights1_fu_330_m_axi_weights1_ARADDR;
wire   [0:0] grp_ld_weights1_fu_330_m_axi_weights1_ARID;
wire   [31:0] grp_ld_weights1_fu_330_m_axi_weights1_ARLEN;
wire   [2:0] grp_ld_weights1_fu_330_m_axi_weights1_ARSIZE;
wire   [1:0] grp_ld_weights1_fu_330_m_axi_weights1_ARBURST;
wire   [1:0] grp_ld_weights1_fu_330_m_axi_weights1_ARLOCK;
wire   [3:0] grp_ld_weights1_fu_330_m_axi_weights1_ARCACHE;
wire   [2:0] grp_ld_weights1_fu_330_m_axi_weights1_ARPROT;
wire   [3:0] grp_ld_weights1_fu_330_m_axi_weights1_ARQOS;
wire   [3:0] grp_ld_weights1_fu_330_m_axi_weights1_ARREGION;
wire   [0:0] grp_ld_weights1_fu_330_m_axi_weights1_ARUSER;
wire    grp_ld_weights1_fu_330_m_axi_weights1_RREADY;
wire    grp_ld_weights1_fu_330_m_axi_weights1_BREADY;
wire   [7:0] grp_ld_weights1_fu_330_weights1_buf_0_address0;
wire    grp_ld_weights1_fu_330_weights1_buf_0_ce0;
wire    grp_ld_weights1_fu_330_weights1_buf_0_we0;
wire   [31:0] grp_ld_weights1_fu_330_weights1_buf_0_d0;
wire    grp_ld_input_fu_338_ap_start;
wire    grp_ld_input_fu_338_ap_done;
wire    grp_ld_input_fu_338_ap_idle;
wire    grp_ld_input_fu_338_ap_ready;
wire    grp_ld_input_fu_338_m_axi_input_r_AWVALID;
wire   [31:0] grp_ld_input_fu_338_m_axi_input_r_AWADDR;
wire   [0:0] grp_ld_input_fu_338_m_axi_input_r_AWID;
wire   [31:0] grp_ld_input_fu_338_m_axi_input_r_AWLEN;
wire   [2:0] grp_ld_input_fu_338_m_axi_input_r_AWSIZE;
wire   [1:0] grp_ld_input_fu_338_m_axi_input_r_AWBURST;
wire   [1:0] grp_ld_input_fu_338_m_axi_input_r_AWLOCK;
wire   [3:0] grp_ld_input_fu_338_m_axi_input_r_AWCACHE;
wire   [2:0] grp_ld_input_fu_338_m_axi_input_r_AWPROT;
wire   [3:0] grp_ld_input_fu_338_m_axi_input_r_AWQOS;
wire   [3:0] grp_ld_input_fu_338_m_axi_input_r_AWREGION;
wire   [0:0] grp_ld_input_fu_338_m_axi_input_r_AWUSER;
wire    grp_ld_input_fu_338_m_axi_input_r_WVALID;
wire   [31:0] grp_ld_input_fu_338_m_axi_input_r_WDATA;
wire   [3:0] grp_ld_input_fu_338_m_axi_input_r_WSTRB;
wire    grp_ld_input_fu_338_m_axi_input_r_WLAST;
wire   [0:0] grp_ld_input_fu_338_m_axi_input_r_WID;
wire   [0:0] grp_ld_input_fu_338_m_axi_input_r_WUSER;
wire    grp_ld_input_fu_338_m_axi_input_r_ARVALID;
wire   [31:0] grp_ld_input_fu_338_m_axi_input_r_ARADDR;
wire   [0:0] grp_ld_input_fu_338_m_axi_input_r_ARID;
wire   [31:0] grp_ld_input_fu_338_m_axi_input_r_ARLEN;
wire   [2:0] grp_ld_input_fu_338_m_axi_input_r_ARSIZE;
wire   [1:0] grp_ld_input_fu_338_m_axi_input_r_ARBURST;
wire   [1:0] grp_ld_input_fu_338_m_axi_input_r_ARLOCK;
wire   [3:0] grp_ld_input_fu_338_m_axi_input_r_ARCACHE;
wire   [2:0] grp_ld_input_fu_338_m_axi_input_r_ARPROT;
wire   [3:0] grp_ld_input_fu_338_m_axi_input_r_ARQOS;
wire   [3:0] grp_ld_input_fu_338_m_axi_input_r_ARREGION;
wire   [0:0] grp_ld_input_fu_338_m_axi_input_r_ARUSER;
wire    grp_ld_input_fu_338_m_axi_input_r_RREADY;
wire    grp_ld_input_fu_338_m_axi_input_r_BREADY;
wire   [9:0] grp_ld_input_fu_338_input_buf_0_address0;
wire    grp_ld_input_fu_338_input_buf_0_ce0;
wire    grp_ld_input_fu_338_input_buf_0_we0;
wire   [31:0] grp_ld_input_fu_338_input_buf_0_d0;
wire    grp_ld_bias5_fu_346_ap_start;
wire    grp_ld_bias5_fu_346_ap_done;
wire    grp_ld_bias5_fu_346_ap_idle;
wire    grp_ld_bias5_fu_346_ap_ready;
wire    grp_ld_bias5_fu_346_m_axi_bias5_AWVALID;
wire   [31:0] grp_ld_bias5_fu_346_m_axi_bias5_AWADDR;
wire   [0:0] grp_ld_bias5_fu_346_m_axi_bias5_AWID;
wire   [31:0] grp_ld_bias5_fu_346_m_axi_bias5_AWLEN;
wire   [2:0] grp_ld_bias5_fu_346_m_axi_bias5_AWSIZE;
wire   [1:0] grp_ld_bias5_fu_346_m_axi_bias5_AWBURST;
wire   [1:0] grp_ld_bias5_fu_346_m_axi_bias5_AWLOCK;
wire   [3:0] grp_ld_bias5_fu_346_m_axi_bias5_AWCACHE;
wire   [2:0] grp_ld_bias5_fu_346_m_axi_bias5_AWPROT;
wire   [3:0] grp_ld_bias5_fu_346_m_axi_bias5_AWQOS;
wire   [3:0] grp_ld_bias5_fu_346_m_axi_bias5_AWREGION;
wire   [0:0] grp_ld_bias5_fu_346_m_axi_bias5_AWUSER;
wire    grp_ld_bias5_fu_346_m_axi_bias5_WVALID;
wire   [31:0] grp_ld_bias5_fu_346_m_axi_bias5_WDATA;
wire   [3:0] grp_ld_bias5_fu_346_m_axi_bias5_WSTRB;
wire    grp_ld_bias5_fu_346_m_axi_bias5_WLAST;
wire   [0:0] grp_ld_bias5_fu_346_m_axi_bias5_WID;
wire   [0:0] grp_ld_bias5_fu_346_m_axi_bias5_WUSER;
wire    grp_ld_bias5_fu_346_m_axi_bias5_ARVALID;
wire   [31:0] grp_ld_bias5_fu_346_m_axi_bias5_ARADDR;
wire   [0:0] grp_ld_bias5_fu_346_m_axi_bias5_ARID;
wire   [31:0] grp_ld_bias5_fu_346_m_axi_bias5_ARLEN;
wire   [2:0] grp_ld_bias5_fu_346_m_axi_bias5_ARSIZE;
wire   [1:0] grp_ld_bias5_fu_346_m_axi_bias5_ARBURST;
wire   [1:0] grp_ld_bias5_fu_346_m_axi_bias5_ARLOCK;
wire   [3:0] grp_ld_bias5_fu_346_m_axi_bias5_ARCACHE;
wire   [2:0] grp_ld_bias5_fu_346_m_axi_bias5_ARPROT;
wire   [3:0] grp_ld_bias5_fu_346_m_axi_bias5_ARQOS;
wire   [3:0] grp_ld_bias5_fu_346_m_axi_bias5_ARREGION;
wire   [0:0] grp_ld_bias5_fu_346_m_axi_bias5_ARUSER;
wire    grp_ld_bias5_fu_346_m_axi_bias5_RREADY;
wire    grp_ld_bias5_fu_346_m_axi_bias5_BREADY;
wire   [6:0] grp_ld_bias5_fu_346_bias5_buf_address0;
wire    grp_ld_bias5_fu_346_bias5_buf_ce0;
wire    grp_ld_bias5_fu_346_bias5_buf_we0;
wire   [31:0] grp_ld_bias5_fu_346_bias5_buf_d0;
wire    grp_ld_bias3_fu_354_ap_start;
wire    grp_ld_bias3_fu_354_ap_done;
wire    grp_ld_bias3_fu_354_ap_idle;
wire    grp_ld_bias3_fu_354_ap_ready;
wire    grp_ld_bias3_fu_354_m_axi_bias3_AWVALID;
wire   [31:0] grp_ld_bias3_fu_354_m_axi_bias3_AWADDR;
wire   [0:0] grp_ld_bias3_fu_354_m_axi_bias3_AWID;
wire   [31:0] grp_ld_bias3_fu_354_m_axi_bias3_AWLEN;
wire   [2:0] grp_ld_bias3_fu_354_m_axi_bias3_AWSIZE;
wire   [1:0] grp_ld_bias3_fu_354_m_axi_bias3_AWBURST;
wire   [1:0] grp_ld_bias3_fu_354_m_axi_bias3_AWLOCK;
wire   [3:0] grp_ld_bias3_fu_354_m_axi_bias3_AWCACHE;
wire   [2:0] grp_ld_bias3_fu_354_m_axi_bias3_AWPROT;
wire   [3:0] grp_ld_bias3_fu_354_m_axi_bias3_AWQOS;
wire   [3:0] grp_ld_bias3_fu_354_m_axi_bias3_AWREGION;
wire   [0:0] grp_ld_bias3_fu_354_m_axi_bias3_AWUSER;
wire    grp_ld_bias3_fu_354_m_axi_bias3_WVALID;
wire   [31:0] grp_ld_bias3_fu_354_m_axi_bias3_WDATA;
wire   [3:0] grp_ld_bias3_fu_354_m_axi_bias3_WSTRB;
wire    grp_ld_bias3_fu_354_m_axi_bias3_WLAST;
wire   [0:0] grp_ld_bias3_fu_354_m_axi_bias3_WID;
wire   [0:0] grp_ld_bias3_fu_354_m_axi_bias3_WUSER;
wire    grp_ld_bias3_fu_354_m_axi_bias3_ARVALID;
wire   [31:0] grp_ld_bias3_fu_354_m_axi_bias3_ARADDR;
wire   [0:0] grp_ld_bias3_fu_354_m_axi_bias3_ARID;
wire   [31:0] grp_ld_bias3_fu_354_m_axi_bias3_ARLEN;
wire   [2:0] grp_ld_bias3_fu_354_m_axi_bias3_ARSIZE;
wire   [1:0] grp_ld_bias3_fu_354_m_axi_bias3_ARBURST;
wire   [1:0] grp_ld_bias3_fu_354_m_axi_bias3_ARLOCK;
wire   [3:0] grp_ld_bias3_fu_354_m_axi_bias3_ARCACHE;
wire   [2:0] grp_ld_bias3_fu_354_m_axi_bias3_ARPROT;
wire   [3:0] grp_ld_bias3_fu_354_m_axi_bias3_ARQOS;
wire   [3:0] grp_ld_bias3_fu_354_m_axi_bias3_ARREGION;
wire   [0:0] grp_ld_bias3_fu_354_m_axi_bias3_ARUSER;
wire    grp_ld_bias3_fu_354_m_axi_bias3_RREADY;
wire    grp_ld_bias3_fu_354_m_axi_bias3_BREADY;
wire   [3:0] grp_ld_bias3_fu_354_bias3_buf_address0;
wire    grp_ld_bias3_fu_354_bias3_buf_ce0;
wire    grp_ld_bias3_fu_354_bias3_buf_we0;
wire   [31:0] grp_ld_bias3_fu_354_bias3_buf_d0;
wire    grp_st_output_fu_362_ap_start;
wire    grp_st_output_fu_362_ap_done;
wire    grp_st_output_fu_362_ap_idle;
wire    grp_st_output_fu_362_ap_ready;
wire    grp_st_output_fu_362_m_axi_output_r_AWVALID;
wire   [31:0] grp_st_output_fu_362_m_axi_output_r_AWADDR;
wire   [0:0] grp_st_output_fu_362_m_axi_output_r_AWID;
wire   [31:0] grp_st_output_fu_362_m_axi_output_r_AWLEN;
wire   [2:0] grp_st_output_fu_362_m_axi_output_r_AWSIZE;
wire   [1:0] grp_st_output_fu_362_m_axi_output_r_AWBURST;
wire   [1:0] grp_st_output_fu_362_m_axi_output_r_AWLOCK;
wire   [3:0] grp_st_output_fu_362_m_axi_output_r_AWCACHE;
wire   [2:0] grp_st_output_fu_362_m_axi_output_r_AWPROT;
wire   [3:0] grp_st_output_fu_362_m_axi_output_r_AWQOS;
wire   [3:0] grp_st_output_fu_362_m_axi_output_r_AWREGION;
wire   [0:0] grp_st_output_fu_362_m_axi_output_r_AWUSER;
wire    grp_st_output_fu_362_m_axi_output_r_WVALID;
wire   [31:0] grp_st_output_fu_362_m_axi_output_r_WDATA;
wire   [3:0] grp_st_output_fu_362_m_axi_output_r_WSTRB;
wire    grp_st_output_fu_362_m_axi_output_r_WLAST;
wire   [0:0] grp_st_output_fu_362_m_axi_output_r_WID;
wire   [0:0] grp_st_output_fu_362_m_axi_output_r_WUSER;
wire    grp_st_output_fu_362_m_axi_output_r_ARVALID;
wire   [31:0] grp_st_output_fu_362_m_axi_output_r_ARADDR;
wire   [0:0] grp_st_output_fu_362_m_axi_output_r_ARID;
wire   [31:0] grp_st_output_fu_362_m_axi_output_r_ARLEN;
wire   [2:0] grp_st_output_fu_362_m_axi_output_r_ARSIZE;
wire   [1:0] grp_st_output_fu_362_m_axi_output_r_ARBURST;
wire   [1:0] grp_st_output_fu_362_m_axi_output_r_ARLOCK;
wire   [3:0] grp_st_output_fu_362_m_axi_output_r_ARCACHE;
wire   [2:0] grp_st_output_fu_362_m_axi_output_r_ARPROT;
wire   [3:0] grp_st_output_fu_362_m_axi_output_r_ARQOS;
wire   [3:0] grp_st_output_fu_362_m_axi_output_r_ARREGION;
wire   [0:0] grp_st_output_fu_362_m_axi_output_r_ARUSER;
wire    grp_st_output_fu_362_m_axi_output_r_RREADY;
wire    grp_st_output_fu_362_m_axi_output_r_BREADY;
wire   [3:0] grp_st_output_fu_362_output_buf_address0;
wire    grp_st_output_fu_362_output_buf_ce0;
wire    grp_ld_bias1_fu_370_ap_start;
wire    grp_ld_bias1_fu_370_ap_done;
wire    grp_ld_bias1_fu_370_ap_idle;
wire    grp_ld_bias1_fu_370_ap_ready;
wire    grp_ld_bias1_fu_370_m_axi_bias1_AWVALID;
wire   [31:0] grp_ld_bias1_fu_370_m_axi_bias1_AWADDR;
wire   [0:0] grp_ld_bias1_fu_370_m_axi_bias1_AWID;
wire   [31:0] grp_ld_bias1_fu_370_m_axi_bias1_AWLEN;
wire   [2:0] grp_ld_bias1_fu_370_m_axi_bias1_AWSIZE;
wire   [1:0] grp_ld_bias1_fu_370_m_axi_bias1_AWBURST;
wire   [1:0] grp_ld_bias1_fu_370_m_axi_bias1_AWLOCK;
wire   [3:0] grp_ld_bias1_fu_370_m_axi_bias1_AWCACHE;
wire   [2:0] grp_ld_bias1_fu_370_m_axi_bias1_AWPROT;
wire   [3:0] grp_ld_bias1_fu_370_m_axi_bias1_AWQOS;
wire   [3:0] grp_ld_bias1_fu_370_m_axi_bias1_AWREGION;
wire   [0:0] grp_ld_bias1_fu_370_m_axi_bias1_AWUSER;
wire    grp_ld_bias1_fu_370_m_axi_bias1_WVALID;
wire   [31:0] grp_ld_bias1_fu_370_m_axi_bias1_WDATA;
wire   [3:0] grp_ld_bias1_fu_370_m_axi_bias1_WSTRB;
wire    grp_ld_bias1_fu_370_m_axi_bias1_WLAST;
wire   [0:0] grp_ld_bias1_fu_370_m_axi_bias1_WID;
wire   [0:0] grp_ld_bias1_fu_370_m_axi_bias1_WUSER;
wire    grp_ld_bias1_fu_370_m_axi_bias1_ARVALID;
wire   [31:0] grp_ld_bias1_fu_370_m_axi_bias1_ARADDR;
wire   [0:0] grp_ld_bias1_fu_370_m_axi_bias1_ARID;
wire   [31:0] grp_ld_bias1_fu_370_m_axi_bias1_ARLEN;
wire   [2:0] grp_ld_bias1_fu_370_m_axi_bias1_ARSIZE;
wire   [1:0] grp_ld_bias1_fu_370_m_axi_bias1_ARBURST;
wire   [1:0] grp_ld_bias1_fu_370_m_axi_bias1_ARLOCK;
wire   [3:0] grp_ld_bias1_fu_370_m_axi_bias1_ARCACHE;
wire   [2:0] grp_ld_bias1_fu_370_m_axi_bias1_ARPROT;
wire   [3:0] grp_ld_bias1_fu_370_m_axi_bias1_ARQOS;
wire   [3:0] grp_ld_bias1_fu_370_m_axi_bias1_ARREGION;
wire   [0:0] grp_ld_bias1_fu_370_m_axi_bias1_ARUSER;
wire    grp_ld_bias1_fu_370_m_axi_bias1_RREADY;
wire    grp_ld_bias1_fu_370_m_axi_bias1_BREADY;
wire   [2:0] grp_ld_bias1_fu_370_bias1_buf_address0;
wire    grp_ld_bias1_fu_370_bias1_buf_ce0;
wire    grp_ld_bias1_fu_370_bias1_buf_we0;
wire   [31:0] grp_ld_bias1_fu_370_bias1_buf_d0;
reg    grp_i_convolution3_fu_266_ap_start_reg;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg    grp_i_convolution1_fu_274_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    grp_i_convolution5_fu_282_ap_start_reg;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg    grp_i_fc6_fu_290_ap_start_reg;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
reg    grp_i_max_pooling2_fu_302_ap_start_reg;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg    grp_i_max_pooling4_fu_308_ap_start_reg;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg    grp_ld_weights5_fu_314_ap_start_reg;
reg    grp_ld_weights3_fu_322_ap_start_reg;
reg    grp_ld_weights1_fu_330_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_ld_input_fu_338_ap_start_reg;
reg    grp_ld_bias5_fu_346_ap_start_reg;
reg    grp_ld_bias3_fu_354_ap_start_reg;
reg    grp_st_output_fu_362_ap_start_reg;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg    grp_ld_bias1_fu_370_ap_start_reg;
reg   [16:0] ap_NS_fsm;
reg    ap_block_state3_on_subcall_done;
reg    ap_block_state5_on_subcall_done;
reg    ap_block_state7_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 grp_i_convolution3_fu_266_ap_start_reg = 1'b0;
#0 grp_i_convolution1_fu_274_ap_start_reg = 1'b0;
#0 grp_i_convolution5_fu_282_ap_start_reg = 1'b0;
#0 grp_i_fc6_fu_290_ap_start_reg = 1'b0;
#0 grp_i_max_pooling2_fu_302_ap_start_reg = 1'b0;
#0 grp_i_max_pooling4_fu_308_ap_start_reg = 1'b0;
#0 grp_ld_weights5_fu_314_ap_start_reg = 1'b0;
#0 grp_ld_weights3_fu_322_ap_start_reg = 1'b0;
#0 grp_ld_weights1_fu_330_ap_start_reg = 1'b0;
#0 grp_ld_input_fu_338_ap_start_reg = 1'b0;
#0 grp_ld_bias5_fu_346_ap_start_reg = 1'b0;
#0 grp_ld_bias3_fu_354_ap_start_reg = 1'b0;
#0 grp_st_output_fu_362_ap_start_reg = 1'b0;
#0 grp_ld_bias1_fu_370_ap_start_reg = 1'b0;
end

lenet_top_CTL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTL_DATA_WIDTH ))
lenet_top_CTL_s_axi_U(
    .AWVALID(s_axi_CTL_AWVALID),
    .AWREADY(s_axi_CTL_AWREADY),
    .AWADDR(s_axi_CTL_AWADDR),
    .WVALID(s_axi_CTL_WVALID),
    .WREADY(s_axi_CTL_WREADY),
    .WDATA(s_axi_CTL_WDATA),
    .WSTRB(s_axi_CTL_WSTRB),
    .ARVALID(s_axi_CTL_ARVALID),
    .ARREADY(s_axi_CTL_ARREADY),
    .ARADDR(s_axi_CTL_ARADDR),
    .RVALID(s_axi_CTL_RVALID),
    .RREADY(s_axi_CTL_RREADY),
    .RDATA(s_axi_CTL_RDATA),
    .RRESP(s_axi_CTL_RRESP),
    .BVALID(s_axi_CTL_BVALID),
    .BREADY(s_axi_CTL_BREADY),
    .BRESP(s_axi_CTL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .input_r(input_r),
    .weights1(weights1),
    .bias1(bias1),
    .weights3(weights3),
    .bias3(bias3),
    .weights5(weights5),
    .bias5(bias5),
    .weights6(weights6),
    .bias6(bias6),
    .output_r(output_r)
);

lenet_top_DATA_INPUT_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_INPUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_INPUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_INPUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_INPUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_INPUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_INPUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_INPUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_INPUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_INPUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_INPUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_INPUT_CACHE_VALUE ))
lenet_top_DATA_INPUT_m_axi_U(
    .AWVALID(m_axi_DATA_INPUT_AWVALID),
    .AWREADY(m_axi_DATA_INPUT_AWREADY),
    .AWADDR(m_axi_DATA_INPUT_AWADDR),
    .AWID(m_axi_DATA_INPUT_AWID),
    .AWLEN(m_axi_DATA_INPUT_AWLEN),
    .AWSIZE(m_axi_DATA_INPUT_AWSIZE),
    .AWBURST(m_axi_DATA_INPUT_AWBURST),
    .AWLOCK(m_axi_DATA_INPUT_AWLOCK),
    .AWCACHE(m_axi_DATA_INPUT_AWCACHE),
    .AWPROT(m_axi_DATA_INPUT_AWPROT),
    .AWQOS(m_axi_DATA_INPUT_AWQOS),
    .AWREGION(m_axi_DATA_INPUT_AWREGION),
    .AWUSER(m_axi_DATA_INPUT_AWUSER),
    .WVALID(m_axi_DATA_INPUT_WVALID),
    .WREADY(m_axi_DATA_INPUT_WREADY),
    .WDATA(m_axi_DATA_INPUT_WDATA),
    .WSTRB(m_axi_DATA_INPUT_WSTRB),
    .WLAST(m_axi_DATA_INPUT_WLAST),
    .WID(m_axi_DATA_INPUT_WID),
    .WUSER(m_axi_DATA_INPUT_WUSER),
    .ARVALID(m_axi_DATA_INPUT_ARVALID),
    .ARREADY(m_axi_DATA_INPUT_ARREADY),
    .ARADDR(m_axi_DATA_INPUT_ARADDR),
    .ARID(m_axi_DATA_INPUT_ARID),
    .ARLEN(m_axi_DATA_INPUT_ARLEN),
    .ARSIZE(m_axi_DATA_INPUT_ARSIZE),
    .ARBURST(m_axi_DATA_INPUT_ARBURST),
    .ARLOCK(m_axi_DATA_INPUT_ARLOCK),
    .ARCACHE(m_axi_DATA_INPUT_ARCACHE),
    .ARPROT(m_axi_DATA_INPUT_ARPROT),
    .ARQOS(m_axi_DATA_INPUT_ARQOS),
    .ARREGION(m_axi_DATA_INPUT_ARREGION),
    .ARUSER(m_axi_DATA_INPUT_ARUSER),
    .RVALID(m_axi_DATA_INPUT_RVALID),
    .RREADY(m_axi_DATA_INPUT_RREADY),
    .RDATA(m_axi_DATA_INPUT_RDATA),
    .RLAST(m_axi_DATA_INPUT_RLAST),
    .RID(m_axi_DATA_INPUT_RID),
    .RUSER(m_axi_DATA_INPUT_RUSER),
    .RRESP(m_axi_DATA_INPUT_RRESP),
    .BVALID(m_axi_DATA_INPUT_BVALID),
    .BREADY(m_axi_DATA_INPUT_BREADY),
    .BRESP(m_axi_DATA_INPUT_BRESP),
    .BID(m_axi_DATA_INPUT_BID),
    .BUSER(m_axi_DATA_INPUT_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_INPUT_ARVALID),
    .I_ARREADY(DATA_INPUT_ARREADY),
    .I_ARADDR(grp_ld_input_fu_338_m_axi_input_r_ARADDR),
    .I_ARID(grp_ld_input_fu_338_m_axi_input_r_ARID),
    .I_ARLEN(grp_ld_input_fu_338_m_axi_input_r_ARLEN),
    .I_ARSIZE(grp_ld_input_fu_338_m_axi_input_r_ARSIZE),
    .I_ARLOCK(grp_ld_input_fu_338_m_axi_input_r_ARLOCK),
    .I_ARCACHE(grp_ld_input_fu_338_m_axi_input_r_ARCACHE),
    .I_ARQOS(grp_ld_input_fu_338_m_axi_input_r_ARQOS),
    .I_ARPROT(grp_ld_input_fu_338_m_axi_input_r_ARPROT),
    .I_ARUSER(grp_ld_input_fu_338_m_axi_input_r_ARUSER),
    .I_ARBURST(grp_ld_input_fu_338_m_axi_input_r_ARBURST),
    .I_ARREGION(grp_ld_input_fu_338_m_axi_input_r_ARREGION),
    .I_RVALID(DATA_INPUT_RVALID),
    .I_RREADY(DATA_INPUT_RREADY),
    .I_RDATA(DATA_INPUT_RDATA),
    .I_RID(DATA_INPUT_RID),
    .I_RUSER(DATA_INPUT_RUSER),
    .I_RRESP(DATA_INPUT_RRESP),
    .I_RLAST(DATA_INPUT_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_INPUT_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_INPUT_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_INPUT_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_INPUT_BRESP),
    .I_BID(DATA_INPUT_BID),
    .I_BUSER(DATA_INPUT_BUSER)
);

lenet_top_DATA_WEIGHT_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_WEIGHT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_WEIGHT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_WEIGHT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_WEIGHT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_WEIGHT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_WEIGHT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_WEIGHT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_WEIGHT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_WEIGHT_CACHE_VALUE ))
lenet_top_DATA_WEIGHT_m_axi_U(
    .AWVALID(m_axi_DATA_WEIGHT_AWVALID),
    .AWREADY(m_axi_DATA_WEIGHT_AWREADY),
    .AWADDR(m_axi_DATA_WEIGHT_AWADDR),
    .AWID(m_axi_DATA_WEIGHT_AWID),
    .AWLEN(m_axi_DATA_WEIGHT_AWLEN),
    .AWSIZE(m_axi_DATA_WEIGHT_AWSIZE),
    .AWBURST(m_axi_DATA_WEIGHT_AWBURST),
    .AWLOCK(m_axi_DATA_WEIGHT_AWLOCK),
    .AWCACHE(m_axi_DATA_WEIGHT_AWCACHE),
    .AWPROT(m_axi_DATA_WEIGHT_AWPROT),
    .AWQOS(m_axi_DATA_WEIGHT_AWQOS),
    .AWREGION(m_axi_DATA_WEIGHT_AWREGION),
    .AWUSER(m_axi_DATA_WEIGHT_AWUSER),
    .WVALID(m_axi_DATA_WEIGHT_WVALID),
    .WREADY(m_axi_DATA_WEIGHT_WREADY),
    .WDATA(m_axi_DATA_WEIGHT_WDATA),
    .WSTRB(m_axi_DATA_WEIGHT_WSTRB),
    .WLAST(m_axi_DATA_WEIGHT_WLAST),
    .WID(m_axi_DATA_WEIGHT_WID),
    .WUSER(m_axi_DATA_WEIGHT_WUSER),
    .ARVALID(m_axi_DATA_WEIGHT_ARVALID),
    .ARREADY(m_axi_DATA_WEIGHT_ARREADY),
    .ARADDR(m_axi_DATA_WEIGHT_ARADDR),
    .ARID(m_axi_DATA_WEIGHT_ARID),
    .ARLEN(m_axi_DATA_WEIGHT_ARLEN),
    .ARSIZE(m_axi_DATA_WEIGHT_ARSIZE),
    .ARBURST(m_axi_DATA_WEIGHT_ARBURST),
    .ARLOCK(m_axi_DATA_WEIGHT_ARLOCK),
    .ARCACHE(m_axi_DATA_WEIGHT_ARCACHE),
    .ARPROT(m_axi_DATA_WEIGHT_ARPROT),
    .ARQOS(m_axi_DATA_WEIGHT_ARQOS),
    .ARREGION(m_axi_DATA_WEIGHT_ARREGION),
    .ARUSER(m_axi_DATA_WEIGHT_ARUSER),
    .RVALID(m_axi_DATA_WEIGHT_RVALID),
    .RREADY(m_axi_DATA_WEIGHT_RREADY),
    .RDATA(m_axi_DATA_WEIGHT_RDATA),
    .RLAST(m_axi_DATA_WEIGHT_RLAST),
    .RID(m_axi_DATA_WEIGHT_RID),
    .RUSER(m_axi_DATA_WEIGHT_RUSER),
    .RRESP(m_axi_DATA_WEIGHT_RRESP),
    .BVALID(m_axi_DATA_WEIGHT_BVALID),
    .BREADY(m_axi_DATA_WEIGHT_BREADY),
    .BRESP(m_axi_DATA_WEIGHT_BRESP),
    .BID(m_axi_DATA_WEIGHT_BID),
    .BUSER(m_axi_DATA_WEIGHT_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_WEIGHT_ARVALID),
    .I_ARREADY(DATA_WEIGHT_ARREADY),
    .I_ARADDR(DATA_WEIGHT_ARADDR),
    .I_ARID(DATA_WEIGHT_ARID),
    .I_ARLEN(DATA_WEIGHT_ARLEN),
    .I_ARSIZE(DATA_WEIGHT_ARSIZE),
    .I_ARLOCK(DATA_WEIGHT_ARLOCK),
    .I_ARCACHE(DATA_WEIGHT_ARCACHE),
    .I_ARQOS(DATA_WEIGHT_ARQOS),
    .I_ARPROT(DATA_WEIGHT_ARPROT),
    .I_ARUSER(DATA_WEIGHT_ARUSER),
    .I_ARBURST(DATA_WEIGHT_ARBURST),
    .I_ARREGION(DATA_WEIGHT_ARREGION),
    .I_RVALID(DATA_WEIGHT_RVALID),
    .I_RREADY(DATA_WEIGHT_RREADY),
    .I_RDATA(DATA_WEIGHT_RDATA),
    .I_RID(DATA_WEIGHT_RID),
    .I_RUSER(DATA_WEIGHT_RUSER),
    .I_RRESP(DATA_WEIGHT_RRESP),
    .I_RLAST(DATA_WEIGHT_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_WEIGHT_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_WEIGHT_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_WEIGHT_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_WEIGHT_BRESP),
    .I_BID(DATA_WEIGHT_BID),
    .I_BUSER(DATA_WEIGHT_BUSER)
);

lenet_top_DATA_BIAS_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_BIAS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_BIAS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_BIAS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_BIAS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_BIAS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_BIAS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_BIAS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_BIAS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_BIAS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_BIAS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_BIAS_CACHE_VALUE ))
lenet_top_DATA_BIAS_m_axi_U(
    .AWVALID(m_axi_DATA_BIAS_AWVALID),
    .AWREADY(m_axi_DATA_BIAS_AWREADY),
    .AWADDR(m_axi_DATA_BIAS_AWADDR),
    .AWID(m_axi_DATA_BIAS_AWID),
    .AWLEN(m_axi_DATA_BIAS_AWLEN),
    .AWSIZE(m_axi_DATA_BIAS_AWSIZE),
    .AWBURST(m_axi_DATA_BIAS_AWBURST),
    .AWLOCK(m_axi_DATA_BIAS_AWLOCK),
    .AWCACHE(m_axi_DATA_BIAS_AWCACHE),
    .AWPROT(m_axi_DATA_BIAS_AWPROT),
    .AWQOS(m_axi_DATA_BIAS_AWQOS),
    .AWREGION(m_axi_DATA_BIAS_AWREGION),
    .AWUSER(m_axi_DATA_BIAS_AWUSER),
    .WVALID(m_axi_DATA_BIAS_WVALID),
    .WREADY(m_axi_DATA_BIAS_WREADY),
    .WDATA(m_axi_DATA_BIAS_WDATA),
    .WSTRB(m_axi_DATA_BIAS_WSTRB),
    .WLAST(m_axi_DATA_BIAS_WLAST),
    .WID(m_axi_DATA_BIAS_WID),
    .WUSER(m_axi_DATA_BIAS_WUSER),
    .ARVALID(m_axi_DATA_BIAS_ARVALID),
    .ARREADY(m_axi_DATA_BIAS_ARREADY),
    .ARADDR(m_axi_DATA_BIAS_ARADDR),
    .ARID(m_axi_DATA_BIAS_ARID),
    .ARLEN(m_axi_DATA_BIAS_ARLEN),
    .ARSIZE(m_axi_DATA_BIAS_ARSIZE),
    .ARBURST(m_axi_DATA_BIAS_ARBURST),
    .ARLOCK(m_axi_DATA_BIAS_ARLOCK),
    .ARCACHE(m_axi_DATA_BIAS_ARCACHE),
    .ARPROT(m_axi_DATA_BIAS_ARPROT),
    .ARQOS(m_axi_DATA_BIAS_ARQOS),
    .ARREGION(m_axi_DATA_BIAS_ARREGION),
    .ARUSER(m_axi_DATA_BIAS_ARUSER),
    .RVALID(m_axi_DATA_BIAS_RVALID),
    .RREADY(m_axi_DATA_BIAS_RREADY),
    .RDATA(m_axi_DATA_BIAS_RDATA),
    .RLAST(m_axi_DATA_BIAS_RLAST),
    .RID(m_axi_DATA_BIAS_RID),
    .RUSER(m_axi_DATA_BIAS_RUSER),
    .RRESP(m_axi_DATA_BIAS_RRESP),
    .BVALID(m_axi_DATA_BIAS_BVALID),
    .BREADY(m_axi_DATA_BIAS_BREADY),
    .BRESP(m_axi_DATA_BIAS_BRESP),
    .BID(m_axi_DATA_BIAS_BID),
    .BUSER(m_axi_DATA_BIAS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_BIAS_ARVALID),
    .I_ARREADY(DATA_BIAS_ARREADY),
    .I_ARADDR(DATA_BIAS_ARADDR),
    .I_ARID(DATA_BIAS_ARID),
    .I_ARLEN(DATA_BIAS_ARLEN),
    .I_ARSIZE(DATA_BIAS_ARSIZE),
    .I_ARLOCK(DATA_BIAS_ARLOCK),
    .I_ARCACHE(DATA_BIAS_ARCACHE),
    .I_ARQOS(DATA_BIAS_ARQOS),
    .I_ARPROT(DATA_BIAS_ARPROT),
    .I_ARUSER(DATA_BIAS_ARUSER),
    .I_ARBURST(DATA_BIAS_ARBURST),
    .I_ARREGION(DATA_BIAS_ARREGION),
    .I_RVALID(DATA_BIAS_RVALID),
    .I_RREADY(DATA_BIAS_RREADY),
    .I_RDATA(DATA_BIAS_RDATA),
    .I_RID(DATA_BIAS_RID),
    .I_RUSER(DATA_BIAS_RUSER),
    .I_RRESP(DATA_BIAS_RRESP),
    .I_RLAST(DATA_BIAS_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_BIAS_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_BIAS_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_BIAS_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_BIAS_BRESP),
    .I_BID(DATA_BIAS_BID),
    .I_BUSER(DATA_BIAS_BUSER)
);

lenet_top_DATA_OUTPUT_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_OUTPUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_OUTPUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_OUTPUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_OUTPUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_OUTPUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_OUTPUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_OUTPUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_OUTPUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_OUTPUT_CACHE_VALUE ))
lenet_top_DATA_OUTPUT_m_axi_U(
    .AWVALID(m_axi_DATA_OUTPUT_AWVALID),
    .AWREADY(m_axi_DATA_OUTPUT_AWREADY),
    .AWADDR(m_axi_DATA_OUTPUT_AWADDR),
    .AWID(m_axi_DATA_OUTPUT_AWID),
    .AWLEN(m_axi_DATA_OUTPUT_AWLEN),
    .AWSIZE(m_axi_DATA_OUTPUT_AWSIZE),
    .AWBURST(m_axi_DATA_OUTPUT_AWBURST),
    .AWLOCK(m_axi_DATA_OUTPUT_AWLOCK),
    .AWCACHE(m_axi_DATA_OUTPUT_AWCACHE),
    .AWPROT(m_axi_DATA_OUTPUT_AWPROT),
    .AWQOS(m_axi_DATA_OUTPUT_AWQOS),
    .AWREGION(m_axi_DATA_OUTPUT_AWREGION),
    .AWUSER(m_axi_DATA_OUTPUT_AWUSER),
    .WVALID(m_axi_DATA_OUTPUT_WVALID),
    .WREADY(m_axi_DATA_OUTPUT_WREADY),
    .WDATA(m_axi_DATA_OUTPUT_WDATA),
    .WSTRB(m_axi_DATA_OUTPUT_WSTRB),
    .WLAST(m_axi_DATA_OUTPUT_WLAST),
    .WID(m_axi_DATA_OUTPUT_WID),
    .WUSER(m_axi_DATA_OUTPUT_WUSER),
    .ARVALID(m_axi_DATA_OUTPUT_ARVALID),
    .ARREADY(m_axi_DATA_OUTPUT_ARREADY),
    .ARADDR(m_axi_DATA_OUTPUT_ARADDR),
    .ARID(m_axi_DATA_OUTPUT_ARID),
    .ARLEN(m_axi_DATA_OUTPUT_ARLEN),
    .ARSIZE(m_axi_DATA_OUTPUT_ARSIZE),
    .ARBURST(m_axi_DATA_OUTPUT_ARBURST),
    .ARLOCK(m_axi_DATA_OUTPUT_ARLOCK),
    .ARCACHE(m_axi_DATA_OUTPUT_ARCACHE),
    .ARPROT(m_axi_DATA_OUTPUT_ARPROT),
    .ARQOS(m_axi_DATA_OUTPUT_ARQOS),
    .ARREGION(m_axi_DATA_OUTPUT_ARREGION),
    .ARUSER(m_axi_DATA_OUTPUT_ARUSER),
    .RVALID(m_axi_DATA_OUTPUT_RVALID),
    .RREADY(m_axi_DATA_OUTPUT_RREADY),
    .RDATA(m_axi_DATA_OUTPUT_RDATA),
    .RLAST(m_axi_DATA_OUTPUT_RLAST),
    .RID(m_axi_DATA_OUTPUT_RID),
    .RUSER(m_axi_DATA_OUTPUT_RUSER),
    .RRESP(m_axi_DATA_OUTPUT_RRESP),
    .BVALID(m_axi_DATA_OUTPUT_BVALID),
    .BREADY(m_axi_DATA_OUTPUT_BREADY),
    .BRESP(m_axi_DATA_OUTPUT_BRESP),
    .BID(m_axi_DATA_OUTPUT_BID),
    .BUSER(m_axi_DATA_OUTPUT_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(DATA_OUTPUT_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_OUTPUT_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(DATA_OUTPUT_RDATA),
    .I_RID(DATA_OUTPUT_RID),
    .I_RUSER(DATA_OUTPUT_RUSER),
    .I_RRESP(DATA_OUTPUT_RRESP),
    .I_RLAST(DATA_OUTPUT_RLAST),
    .I_AWVALID(DATA_OUTPUT_AWVALID),
    .I_AWREADY(DATA_OUTPUT_AWREADY),
    .I_AWADDR(grp_st_output_fu_362_m_axi_output_r_AWADDR),
    .I_AWID(grp_st_output_fu_362_m_axi_output_r_AWID),
    .I_AWLEN(grp_st_output_fu_362_m_axi_output_r_AWLEN),
    .I_AWSIZE(grp_st_output_fu_362_m_axi_output_r_AWSIZE),
    .I_AWLOCK(grp_st_output_fu_362_m_axi_output_r_AWLOCK),
    .I_AWCACHE(grp_st_output_fu_362_m_axi_output_r_AWCACHE),
    .I_AWQOS(grp_st_output_fu_362_m_axi_output_r_AWQOS),
    .I_AWPROT(grp_st_output_fu_362_m_axi_output_r_AWPROT),
    .I_AWUSER(grp_st_output_fu_362_m_axi_output_r_AWUSER),
    .I_AWBURST(grp_st_output_fu_362_m_axi_output_r_AWBURST),
    .I_AWREGION(grp_st_output_fu_362_m_axi_output_r_AWREGION),
    .I_WVALID(DATA_OUTPUT_WVALID),
    .I_WREADY(DATA_OUTPUT_WREADY),
    .I_WDATA(grp_st_output_fu_362_m_axi_output_r_WDATA),
    .I_WID(grp_st_output_fu_362_m_axi_output_r_WID),
    .I_WUSER(grp_st_output_fu_362_m_axi_output_r_WUSER),
    .I_WLAST(grp_st_output_fu_362_m_axi_output_r_WLAST),
    .I_WSTRB(grp_st_output_fu_362_m_axi_output_r_WSTRB),
    .I_BVALID(DATA_OUTPUT_BVALID),
    .I_BREADY(DATA_OUTPUT_BREADY),
    .I_BRESP(DATA_OUTPUT_BRESP),
    .I_BID(DATA_OUTPUT_BID),
    .I_BUSER(DATA_OUTPUT_BUSER)
);

lenet_top_input_bfYi #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
input_buf_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_buf_0_address0),
    .ce0(input_buf_0_ce0),
    .we0(input_buf_0_we0),
    .d0(grp_ld_input_fu_338_input_buf_0_d0),
    .q0(input_buf_0_q0),
    .address1(grp_i_convolution1_fu_274_input_0_address1),
    .ce1(input_buf_0_ce1),
    .q1(input_buf_0_q1)
);

lenet_top_weightsg8j #(
    .DataWidth( 32 ),
    .AddressRange( 150 ),
    .AddressWidth( 8 ))
weights1_buf_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights1_buf_0_address0),
    .ce0(weights1_buf_0_ce0),
    .we0(weights1_buf_0_we0),
    .d0(grp_ld_weights1_fu_330_weights1_buf_0_d0),
    .q0(weights1_buf_0_q0),
    .address1(grp_i_convolution1_fu_274_weights_0_address1),
    .ce1(weights1_buf_0_ce1),
    .q1(weights1_buf_0_q1)
);

lenet_top_weightshbi #(
    .DataWidth( 32 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
weights3_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights3_buf_address0),
    .ce0(weights3_buf_ce0),
    .we0(weights3_buf_we0),
    .d0(grp_ld_weights3_fu_322_weights3_buf_d0),
    .q0(weights3_buf_q0),
    .address1(grp_i_convolution3_fu_266_weights_address1),
    .ce1(weights3_buf_ce1),
    .q1(weights3_buf_q1)
);

lenet_top_weightsibs #(
    .DataWidth( 32 ),
    .AddressRange( 48000 ),
    .AddressWidth( 16 ))
weights5_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights5_buf_address0),
    .ce0(weights5_buf_ce0),
    .we0(weights5_buf_we0),
    .d0(grp_ld_weights5_fu_314_weights5_buf_d0),
    .q0(weights5_buf_q0)
);

lenet_top_bias1_buf #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
bias1_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias1_buf_address0),
    .ce0(bias1_buf_ce0),
    .we0(bias1_buf_we0),
    .d0(grp_ld_bias1_fu_370_bias1_buf_d0),
    .q0(bias1_buf_q0)
);

lenet_top_bias3_buf #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
bias3_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias3_buf_address0),
    .ce0(bias3_buf_ce0),
    .we0(bias3_buf_we0),
    .d0(grp_ld_bias3_fu_354_bias3_buf_d0),
    .q0(bias3_buf_q0)
);

lenet_top_bias5_buf #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
bias5_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias5_buf_address0),
    .ce0(bias5_buf_ce0),
    .we0(bias5_buf_we0),
    .d0(grp_ld_bias5_fu_346_bias5_buf_d0),
    .q0(bias5_buf_q0)
);

lenet_top_input2_jbC #(
    .DataWidth( 32 ),
    .AddressRange( 4704 ),
    .AddressWidth( 13 ))
input2_inter_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input2_inter_address0),
    .ce0(input2_inter_ce0),
    .we0(input2_inter_we0),
    .d0(grp_i_convolution1_fu_274_output_r_d0),
    .q0(input2_inter_q0)
);

lenet_top_input3_kbM #(
    .DataWidth( 32 ),
    .AddressRange( 1176 ),
    .AddressWidth( 11 ))
input3_inter_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input3_inter_address0),
    .ce0(input3_inter_ce0),
    .we0(input3_inter_we0),
    .d0(grp_i_max_pooling2_fu_302_output_r_d0),
    .q0(input3_inter_q0),
    .address1(grp_i_convolution3_fu_266_input_r_address1),
    .ce1(input3_inter_ce1),
    .q1(input3_inter_q1)
);

lenet_top_input4_lbW #(
    .DataWidth( 32 ),
    .AddressRange( 1600 ),
    .AddressWidth( 11 ))
input4_inter_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input4_inter_address0),
    .ce0(input4_inter_ce0),
    .we0(input4_inter_we0),
    .d0(grp_i_convolution3_fu_266_output_r_d0),
    .q0(input4_inter_q0)
);

lenet_top_input5_mb6 #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
input5_inter_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input5_inter_address0),
    .ce0(input5_inter_ce0),
    .we0(input5_inter_we0),
    .d0(grp_i_max_pooling4_fu_308_output_r_d0),
    .q0(input5_inter_q0)
);

lenet_top_bias5_buf #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
input6_inter_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input6_inter_0_0_address0),
    .ce0(input6_inter_0_0_ce0),
    .we0(input6_inter_0_0_we0),
    .d0(grp_i_convolution5_fu_282_output_0_0_d0),
    .q0(input6_inter_0_0_q0)
);

lenet_top_output_ocq #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
output_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_buf_address0),
    .ce0(output_buf_ce0),
    .we0(output_buf_we0),
    .d0(grp_i_fc6_fu_290_output_r_d0),
    .q0(output_buf_q0)
);

i_convolution3 grp_i_convolution3_fu_266(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_i_convolution3_fu_266_ap_start),
    .ap_done(grp_i_convolution3_fu_266_ap_done),
    .ap_idle(grp_i_convolution3_fu_266_ap_idle),
    .ap_ready(grp_i_convolution3_fu_266_ap_ready),
    .input_r_address0(grp_i_convolution3_fu_266_input_r_address0),
    .input_r_ce0(grp_i_convolution3_fu_266_input_r_ce0),
    .input_r_q0(input3_inter_q0),
    .input_r_address1(grp_i_convolution3_fu_266_input_r_address1),
    .input_r_ce1(grp_i_convolution3_fu_266_input_r_ce1),
    .input_r_q1(input3_inter_q1),
    .weights_address0(grp_i_convolution3_fu_266_weights_address0),
    .weights_ce0(grp_i_convolution3_fu_266_weights_ce0),
    .weights_q0(weights3_buf_q0),
    .weights_address1(grp_i_convolution3_fu_266_weights_address1),
    .weights_ce1(grp_i_convolution3_fu_266_weights_ce1),
    .weights_q1(weights3_buf_q1),
    .bias_address0(grp_i_convolution3_fu_266_bias_address0),
    .bias_ce0(grp_i_convolution3_fu_266_bias_ce0),
    .bias_q0(bias3_buf_q0),
    .output_r_address0(grp_i_convolution3_fu_266_output_r_address0),
    .output_r_ce0(grp_i_convolution3_fu_266_output_r_ce0),
    .output_r_we0(grp_i_convolution3_fu_266_output_r_we0),
    .output_r_d0(grp_i_convolution3_fu_266_output_r_d0)
);

i_convolution1 grp_i_convolution1_fu_274(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_i_convolution1_fu_274_ap_start),
    .ap_done(grp_i_convolution1_fu_274_ap_done),
    .ap_idle(grp_i_convolution1_fu_274_ap_idle),
    .ap_ready(grp_i_convolution1_fu_274_ap_ready),
    .input_0_address0(grp_i_convolution1_fu_274_input_0_address0),
    .input_0_ce0(grp_i_convolution1_fu_274_input_0_ce0),
    .input_0_q0(input_buf_0_q0),
    .input_0_address1(grp_i_convolution1_fu_274_input_0_address1),
    .input_0_ce1(grp_i_convolution1_fu_274_input_0_ce1),
    .input_0_q1(input_buf_0_q1),
    .weights_0_address0(grp_i_convolution1_fu_274_weights_0_address0),
    .weights_0_ce0(grp_i_convolution1_fu_274_weights_0_ce0),
    .weights_0_q0(weights1_buf_0_q0),
    .weights_0_address1(grp_i_convolution1_fu_274_weights_0_address1),
    .weights_0_ce1(grp_i_convolution1_fu_274_weights_0_ce1),
    .weights_0_q1(weights1_buf_0_q1),
    .bias_address0(grp_i_convolution1_fu_274_bias_address0),
    .bias_ce0(grp_i_convolution1_fu_274_bias_ce0),
    .bias_q0(bias1_buf_q0),
    .output_r_address0(grp_i_convolution1_fu_274_output_r_address0),
    .output_r_ce0(grp_i_convolution1_fu_274_output_r_ce0),
    .output_r_we0(grp_i_convolution1_fu_274_output_r_we0),
    .output_r_d0(grp_i_convolution1_fu_274_output_r_d0)
);

i_convolution5 grp_i_convolution5_fu_282(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_i_convolution5_fu_282_ap_start),
    .ap_done(grp_i_convolution5_fu_282_ap_done),
    .ap_idle(grp_i_convolution5_fu_282_ap_idle),
    .ap_ready(grp_i_convolution5_fu_282_ap_ready),
    .input_r_address0(grp_i_convolution5_fu_282_input_r_address0),
    .input_r_ce0(grp_i_convolution5_fu_282_input_r_ce0),
    .input_r_q0(input5_inter_q0),
    .weights_address0(grp_i_convolution5_fu_282_weights_address0),
    .weights_ce0(grp_i_convolution5_fu_282_weights_ce0),
    .weights_q0(weights5_buf_q0),
    .bias_address0(grp_i_convolution5_fu_282_bias_address0),
    .bias_ce0(grp_i_convolution5_fu_282_bias_ce0),
    .bias_q0(bias5_buf_q0),
    .output_0_0_address0(grp_i_convolution5_fu_282_output_0_0_address0),
    .output_0_0_ce0(grp_i_convolution5_fu_282_output_0_0_ce0),
    .output_0_0_we0(grp_i_convolution5_fu_282_output_0_0_we0),
    .output_0_0_d0(grp_i_convolution5_fu_282_output_0_0_d0)
);

i_fc6 grp_i_fc6_fu_290(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_i_fc6_fu_290_ap_start),
    .ap_done(grp_i_fc6_fu_290_ap_done),
    .ap_idle(grp_i_fc6_fu_290_ap_idle),
    .ap_ready(grp_i_fc6_fu_290_ap_ready),
    .input_0_0_address0(grp_i_fc6_fu_290_input_0_0_address0),
    .input_0_0_ce0(grp_i_fc6_fu_290_input_0_0_ce0),
    .input_0_0_q0(input6_inter_0_0_q0),
    .m_axi_weights_AWVALID(grp_i_fc6_fu_290_m_axi_weights_AWVALID),
    .m_axi_weights_AWREADY(1'b0),
    .m_axi_weights_AWADDR(grp_i_fc6_fu_290_m_axi_weights_AWADDR),
    .m_axi_weights_AWID(grp_i_fc6_fu_290_m_axi_weights_AWID),
    .m_axi_weights_AWLEN(grp_i_fc6_fu_290_m_axi_weights_AWLEN),
    .m_axi_weights_AWSIZE(grp_i_fc6_fu_290_m_axi_weights_AWSIZE),
    .m_axi_weights_AWBURST(grp_i_fc6_fu_290_m_axi_weights_AWBURST),
    .m_axi_weights_AWLOCK(grp_i_fc6_fu_290_m_axi_weights_AWLOCK),
    .m_axi_weights_AWCACHE(grp_i_fc6_fu_290_m_axi_weights_AWCACHE),
    .m_axi_weights_AWPROT(grp_i_fc6_fu_290_m_axi_weights_AWPROT),
    .m_axi_weights_AWQOS(grp_i_fc6_fu_290_m_axi_weights_AWQOS),
    .m_axi_weights_AWREGION(grp_i_fc6_fu_290_m_axi_weights_AWREGION),
    .m_axi_weights_AWUSER(grp_i_fc6_fu_290_m_axi_weights_AWUSER),
    .m_axi_weights_WVALID(grp_i_fc6_fu_290_m_axi_weights_WVALID),
    .m_axi_weights_WREADY(1'b0),
    .m_axi_weights_WDATA(grp_i_fc6_fu_290_m_axi_weights_WDATA),
    .m_axi_weights_WSTRB(grp_i_fc6_fu_290_m_axi_weights_WSTRB),
    .m_axi_weights_WLAST(grp_i_fc6_fu_290_m_axi_weights_WLAST),
    .m_axi_weights_WID(grp_i_fc6_fu_290_m_axi_weights_WID),
    .m_axi_weights_WUSER(grp_i_fc6_fu_290_m_axi_weights_WUSER),
    .m_axi_weights_ARVALID(grp_i_fc6_fu_290_m_axi_weights_ARVALID),
    .m_axi_weights_ARREADY(DATA_WEIGHT_ARREADY),
    .m_axi_weights_ARADDR(grp_i_fc6_fu_290_m_axi_weights_ARADDR),
    .m_axi_weights_ARID(grp_i_fc6_fu_290_m_axi_weights_ARID),
    .m_axi_weights_ARLEN(grp_i_fc6_fu_290_m_axi_weights_ARLEN),
    .m_axi_weights_ARSIZE(grp_i_fc6_fu_290_m_axi_weights_ARSIZE),
    .m_axi_weights_ARBURST(grp_i_fc6_fu_290_m_axi_weights_ARBURST),
    .m_axi_weights_ARLOCK(grp_i_fc6_fu_290_m_axi_weights_ARLOCK),
    .m_axi_weights_ARCACHE(grp_i_fc6_fu_290_m_axi_weights_ARCACHE),
    .m_axi_weights_ARPROT(grp_i_fc6_fu_290_m_axi_weights_ARPROT),
    .m_axi_weights_ARQOS(grp_i_fc6_fu_290_m_axi_weights_ARQOS),
    .m_axi_weights_ARREGION(grp_i_fc6_fu_290_m_axi_weights_ARREGION),
    .m_axi_weights_ARUSER(grp_i_fc6_fu_290_m_axi_weights_ARUSER),
    .m_axi_weights_RVALID(DATA_WEIGHT_RVALID),
    .m_axi_weights_RREADY(grp_i_fc6_fu_290_m_axi_weights_RREADY),
    .m_axi_weights_RDATA(DATA_WEIGHT_RDATA),
    .m_axi_weights_RLAST(DATA_WEIGHT_RLAST),
    .m_axi_weights_RID(DATA_WEIGHT_RID),
    .m_axi_weights_RUSER(DATA_WEIGHT_RUSER),
    .m_axi_weights_RRESP(DATA_WEIGHT_RRESP),
    .m_axi_weights_BVALID(1'b0),
    .m_axi_weights_BREADY(grp_i_fc6_fu_290_m_axi_weights_BREADY),
    .m_axi_weights_BRESP(2'd0),
    .m_axi_weights_BID(1'd0),
    .m_axi_weights_BUSER(1'd0),
    .weights_offset(weights_reg_488),
    .m_axi_bias_AWVALID(grp_i_fc6_fu_290_m_axi_bias_AWVALID),
    .m_axi_bias_AWREADY(1'b0),
    .m_axi_bias_AWADDR(grp_i_fc6_fu_290_m_axi_bias_AWADDR),
    .m_axi_bias_AWID(grp_i_fc6_fu_290_m_axi_bias_AWID),
    .m_axi_bias_AWLEN(grp_i_fc6_fu_290_m_axi_bias_AWLEN),
    .m_axi_bias_AWSIZE(grp_i_fc6_fu_290_m_axi_bias_AWSIZE),
    .m_axi_bias_AWBURST(grp_i_fc6_fu_290_m_axi_bias_AWBURST),
    .m_axi_bias_AWLOCK(grp_i_fc6_fu_290_m_axi_bias_AWLOCK),
    .m_axi_bias_AWCACHE(grp_i_fc6_fu_290_m_axi_bias_AWCACHE),
    .m_axi_bias_AWPROT(grp_i_fc6_fu_290_m_axi_bias_AWPROT),
    .m_axi_bias_AWQOS(grp_i_fc6_fu_290_m_axi_bias_AWQOS),
    .m_axi_bias_AWREGION(grp_i_fc6_fu_290_m_axi_bias_AWREGION),
    .m_axi_bias_AWUSER(grp_i_fc6_fu_290_m_axi_bias_AWUSER),
    .m_axi_bias_WVALID(grp_i_fc6_fu_290_m_axi_bias_WVALID),
    .m_axi_bias_WREADY(1'b0),
    .m_axi_bias_WDATA(grp_i_fc6_fu_290_m_axi_bias_WDATA),
    .m_axi_bias_WSTRB(grp_i_fc6_fu_290_m_axi_bias_WSTRB),
    .m_axi_bias_WLAST(grp_i_fc6_fu_290_m_axi_bias_WLAST),
    .m_axi_bias_WID(grp_i_fc6_fu_290_m_axi_bias_WID),
    .m_axi_bias_WUSER(grp_i_fc6_fu_290_m_axi_bias_WUSER),
    .m_axi_bias_ARVALID(grp_i_fc6_fu_290_m_axi_bias_ARVALID),
    .m_axi_bias_ARREADY(DATA_BIAS_ARREADY),
    .m_axi_bias_ARADDR(grp_i_fc6_fu_290_m_axi_bias_ARADDR),
    .m_axi_bias_ARID(grp_i_fc6_fu_290_m_axi_bias_ARID),
    .m_axi_bias_ARLEN(grp_i_fc6_fu_290_m_axi_bias_ARLEN),
    .m_axi_bias_ARSIZE(grp_i_fc6_fu_290_m_axi_bias_ARSIZE),
    .m_axi_bias_ARBURST(grp_i_fc6_fu_290_m_axi_bias_ARBURST),
    .m_axi_bias_ARLOCK(grp_i_fc6_fu_290_m_axi_bias_ARLOCK),
    .m_axi_bias_ARCACHE(grp_i_fc6_fu_290_m_axi_bias_ARCACHE),
    .m_axi_bias_ARPROT(grp_i_fc6_fu_290_m_axi_bias_ARPROT),
    .m_axi_bias_ARQOS(grp_i_fc6_fu_290_m_axi_bias_ARQOS),
    .m_axi_bias_ARREGION(grp_i_fc6_fu_290_m_axi_bias_ARREGION),
    .m_axi_bias_ARUSER(grp_i_fc6_fu_290_m_axi_bias_ARUSER),
    .m_axi_bias_RVALID(DATA_BIAS_RVALID),
    .m_axi_bias_RREADY(grp_i_fc6_fu_290_m_axi_bias_RREADY),
    .m_axi_bias_RDATA(DATA_BIAS_RDATA),
    .m_axi_bias_RLAST(DATA_BIAS_RLAST),
    .m_axi_bias_RID(DATA_BIAS_RID),
    .m_axi_bias_RUSER(DATA_BIAS_RUSER),
    .m_axi_bias_RRESP(DATA_BIAS_RRESP),
    .m_axi_bias_BVALID(1'b0),
    .m_axi_bias_BREADY(grp_i_fc6_fu_290_m_axi_bias_BREADY),
    .m_axi_bias_BRESP(2'd0),
    .m_axi_bias_BID(1'd0),
    .m_axi_bias_BUSER(1'd0),
    .bias_offset(bias_reg_483),
    .output_r_address0(grp_i_fc6_fu_290_output_r_address0),
    .output_r_ce0(grp_i_fc6_fu_290_output_r_ce0),
    .output_r_we0(grp_i_fc6_fu_290_output_r_we0),
    .output_r_d0(grp_i_fc6_fu_290_output_r_d0)
);

i_max_pooling2 grp_i_max_pooling2_fu_302(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_i_max_pooling2_fu_302_ap_start),
    .ap_done(grp_i_max_pooling2_fu_302_ap_done),
    .ap_idle(grp_i_max_pooling2_fu_302_ap_idle),
    .ap_ready(grp_i_max_pooling2_fu_302_ap_ready),
    .input_r_address0(grp_i_max_pooling2_fu_302_input_r_address0),
    .input_r_ce0(grp_i_max_pooling2_fu_302_input_r_ce0),
    .input_r_q0(input2_inter_q0),
    .output_r_address0(grp_i_max_pooling2_fu_302_output_r_address0),
    .output_r_ce0(grp_i_max_pooling2_fu_302_output_r_ce0),
    .output_r_we0(grp_i_max_pooling2_fu_302_output_r_we0),
    .output_r_d0(grp_i_max_pooling2_fu_302_output_r_d0)
);

i_max_pooling4 grp_i_max_pooling4_fu_308(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_i_max_pooling4_fu_308_ap_start),
    .ap_done(grp_i_max_pooling4_fu_308_ap_done),
    .ap_idle(grp_i_max_pooling4_fu_308_ap_idle),
    .ap_ready(grp_i_max_pooling4_fu_308_ap_ready),
    .input_r_address0(grp_i_max_pooling4_fu_308_input_r_address0),
    .input_r_ce0(grp_i_max_pooling4_fu_308_input_r_ce0),
    .input_r_q0(input4_inter_q0),
    .output_r_address0(grp_i_max_pooling4_fu_308_output_r_address0),
    .output_r_ce0(grp_i_max_pooling4_fu_308_output_r_ce0),
    .output_r_we0(grp_i_max_pooling4_fu_308_output_r_we0),
    .output_r_d0(grp_i_max_pooling4_fu_308_output_r_d0)
);

ld_weights5 grp_ld_weights5_fu_314(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ld_weights5_fu_314_ap_start),
    .ap_done(grp_ld_weights5_fu_314_ap_done),
    .ap_idle(grp_ld_weights5_fu_314_ap_idle),
    .ap_ready(grp_ld_weights5_fu_314_ap_ready),
    .m_axi_weights5_AWVALID(grp_ld_weights5_fu_314_m_axi_weights5_AWVALID),
    .m_axi_weights5_AWREADY(1'b0),
    .m_axi_weights5_AWADDR(grp_ld_weights5_fu_314_m_axi_weights5_AWADDR),
    .m_axi_weights5_AWID(grp_ld_weights5_fu_314_m_axi_weights5_AWID),
    .m_axi_weights5_AWLEN(grp_ld_weights5_fu_314_m_axi_weights5_AWLEN),
    .m_axi_weights5_AWSIZE(grp_ld_weights5_fu_314_m_axi_weights5_AWSIZE),
    .m_axi_weights5_AWBURST(grp_ld_weights5_fu_314_m_axi_weights5_AWBURST),
    .m_axi_weights5_AWLOCK(grp_ld_weights5_fu_314_m_axi_weights5_AWLOCK),
    .m_axi_weights5_AWCACHE(grp_ld_weights5_fu_314_m_axi_weights5_AWCACHE),
    .m_axi_weights5_AWPROT(grp_ld_weights5_fu_314_m_axi_weights5_AWPROT),
    .m_axi_weights5_AWQOS(grp_ld_weights5_fu_314_m_axi_weights5_AWQOS),
    .m_axi_weights5_AWREGION(grp_ld_weights5_fu_314_m_axi_weights5_AWREGION),
    .m_axi_weights5_AWUSER(grp_ld_weights5_fu_314_m_axi_weights5_AWUSER),
    .m_axi_weights5_WVALID(grp_ld_weights5_fu_314_m_axi_weights5_WVALID),
    .m_axi_weights5_WREADY(1'b0),
    .m_axi_weights5_WDATA(grp_ld_weights5_fu_314_m_axi_weights5_WDATA),
    .m_axi_weights5_WSTRB(grp_ld_weights5_fu_314_m_axi_weights5_WSTRB),
    .m_axi_weights5_WLAST(grp_ld_weights5_fu_314_m_axi_weights5_WLAST),
    .m_axi_weights5_WID(grp_ld_weights5_fu_314_m_axi_weights5_WID),
    .m_axi_weights5_WUSER(grp_ld_weights5_fu_314_m_axi_weights5_WUSER),
    .m_axi_weights5_ARVALID(grp_ld_weights5_fu_314_m_axi_weights5_ARVALID),
    .m_axi_weights5_ARREADY(DATA_WEIGHT_ARREADY),
    .m_axi_weights5_ARADDR(grp_ld_weights5_fu_314_m_axi_weights5_ARADDR),
    .m_axi_weights5_ARID(grp_ld_weights5_fu_314_m_axi_weights5_ARID),
    .m_axi_weights5_ARLEN(grp_ld_weights5_fu_314_m_axi_weights5_ARLEN),
    .m_axi_weights5_ARSIZE(grp_ld_weights5_fu_314_m_axi_weights5_ARSIZE),
    .m_axi_weights5_ARBURST(grp_ld_weights5_fu_314_m_axi_weights5_ARBURST),
    .m_axi_weights5_ARLOCK(grp_ld_weights5_fu_314_m_axi_weights5_ARLOCK),
    .m_axi_weights5_ARCACHE(grp_ld_weights5_fu_314_m_axi_weights5_ARCACHE),
    .m_axi_weights5_ARPROT(grp_ld_weights5_fu_314_m_axi_weights5_ARPROT),
    .m_axi_weights5_ARQOS(grp_ld_weights5_fu_314_m_axi_weights5_ARQOS),
    .m_axi_weights5_ARREGION(grp_ld_weights5_fu_314_m_axi_weights5_ARREGION),
    .m_axi_weights5_ARUSER(grp_ld_weights5_fu_314_m_axi_weights5_ARUSER),
    .m_axi_weights5_RVALID(DATA_WEIGHT_RVALID),
    .m_axi_weights5_RREADY(grp_ld_weights5_fu_314_m_axi_weights5_RREADY),
    .m_axi_weights5_RDATA(DATA_WEIGHT_RDATA),
    .m_axi_weights5_RLAST(DATA_WEIGHT_RLAST),
    .m_axi_weights5_RID(DATA_WEIGHT_RID),
    .m_axi_weights5_RUSER(DATA_WEIGHT_RUSER),
    .m_axi_weights5_RRESP(DATA_WEIGHT_RRESP),
    .m_axi_weights5_BVALID(1'b0),
    .m_axi_weights5_BREADY(grp_ld_weights5_fu_314_m_axi_weights5_BREADY),
    .m_axi_weights5_BRESP(2'd0),
    .m_axi_weights5_BID(1'd0),
    .m_axi_weights5_BUSER(1'd0),
    .weights5_offset(weights2_reg_498),
    .weights5_buf_address0(grp_ld_weights5_fu_314_weights5_buf_address0),
    .weights5_buf_ce0(grp_ld_weights5_fu_314_weights5_buf_ce0),
    .weights5_buf_we0(grp_ld_weights5_fu_314_weights5_buf_we0),
    .weights5_buf_d0(grp_ld_weights5_fu_314_weights5_buf_d0)
);

ld_weights3 grp_ld_weights3_fu_322(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ld_weights3_fu_322_ap_start),
    .ap_done(grp_ld_weights3_fu_322_ap_done),
    .ap_idle(grp_ld_weights3_fu_322_ap_idle),
    .ap_ready(grp_ld_weights3_fu_322_ap_ready),
    .m_axi_weights3_AWVALID(grp_ld_weights3_fu_322_m_axi_weights3_AWVALID),
    .m_axi_weights3_AWREADY(1'b0),
    .m_axi_weights3_AWADDR(grp_ld_weights3_fu_322_m_axi_weights3_AWADDR),
    .m_axi_weights3_AWID(grp_ld_weights3_fu_322_m_axi_weights3_AWID),
    .m_axi_weights3_AWLEN(grp_ld_weights3_fu_322_m_axi_weights3_AWLEN),
    .m_axi_weights3_AWSIZE(grp_ld_weights3_fu_322_m_axi_weights3_AWSIZE),
    .m_axi_weights3_AWBURST(grp_ld_weights3_fu_322_m_axi_weights3_AWBURST),
    .m_axi_weights3_AWLOCK(grp_ld_weights3_fu_322_m_axi_weights3_AWLOCK),
    .m_axi_weights3_AWCACHE(grp_ld_weights3_fu_322_m_axi_weights3_AWCACHE),
    .m_axi_weights3_AWPROT(grp_ld_weights3_fu_322_m_axi_weights3_AWPROT),
    .m_axi_weights3_AWQOS(grp_ld_weights3_fu_322_m_axi_weights3_AWQOS),
    .m_axi_weights3_AWREGION(grp_ld_weights3_fu_322_m_axi_weights3_AWREGION),
    .m_axi_weights3_AWUSER(grp_ld_weights3_fu_322_m_axi_weights3_AWUSER),
    .m_axi_weights3_WVALID(grp_ld_weights3_fu_322_m_axi_weights3_WVALID),
    .m_axi_weights3_WREADY(1'b0),
    .m_axi_weights3_WDATA(grp_ld_weights3_fu_322_m_axi_weights3_WDATA),
    .m_axi_weights3_WSTRB(grp_ld_weights3_fu_322_m_axi_weights3_WSTRB),
    .m_axi_weights3_WLAST(grp_ld_weights3_fu_322_m_axi_weights3_WLAST),
    .m_axi_weights3_WID(grp_ld_weights3_fu_322_m_axi_weights3_WID),
    .m_axi_weights3_WUSER(grp_ld_weights3_fu_322_m_axi_weights3_WUSER),
    .m_axi_weights3_ARVALID(grp_ld_weights3_fu_322_m_axi_weights3_ARVALID),
    .m_axi_weights3_ARREADY(DATA_WEIGHT_ARREADY),
    .m_axi_weights3_ARADDR(grp_ld_weights3_fu_322_m_axi_weights3_ARADDR),
    .m_axi_weights3_ARID(grp_ld_weights3_fu_322_m_axi_weights3_ARID),
    .m_axi_weights3_ARLEN(grp_ld_weights3_fu_322_m_axi_weights3_ARLEN),
    .m_axi_weights3_ARSIZE(grp_ld_weights3_fu_322_m_axi_weights3_ARSIZE),
    .m_axi_weights3_ARBURST(grp_ld_weights3_fu_322_m_axi_weights3_ARBURST),
    .m_axi_weights3_ARLOCK(grp_ld_weights3_fu_322_m_axi_weights3_ARLOCK),
    .m_axi_weights3_ARCACHE(grp_ld_weights3_fu_322_m_axi_weights3_ARCACHE),
    .m_axi_weights3_ARPROT(grp_ld_weights3_fu_322_m_axi_weights3_ARPROT),
    .m_axi_weights3_ARQOS(grp_ld_weights3_fu_322_m_axi_weights3_ARQOS),
    .m_axi_weights3_ARREGION(grp_ld_weights3_fu_322_m_axi_weights3_ARREGION),
    .m_axi_weights3_ARUSER(grp_ld_weights3_fu_322_m_axi_weights3_ARUSER),
    .m_axi_weights3_RVALID(DATA_WEIGHT_RVALID),
    .m_axi_weights3_RREADY(grp_ld_weights3_fu_322_m_axi_weights3_RREADY),
    .m_axi_weights3_RDATA(DATA_WEIGHT_RDATA),
    .m_axi_weights3_RLAST(DATA_WEIGHT_RLAST),
    .m_axi_weights3_RID(DATA_WEIGHT_RID),
    .m_axi_weights3_RUSER(DATA_WEIGHT_RUSER),
    .m_axi_weights3_RRESP(DATA_WEIGHT_RRESP),
    .m_axi_weights3_BVALID(1'b0),
    .m_axi_weights3_BREADY(grp_ld_weights3_fu_322_m_axi_weights3_BREADY),
    .m_axi_weights3_BRESP(2'd0),
    .m_axi_weights3_BID(1'd0),
    .m_axi_weights3_BUSER(1'd0),
    .weights3_offset(weights4_reg_508),
    .weights3_buf_address0(grp_ld_weights3_fu_322_weights3_buf_address0),
    .weights3_buf_ce0(grp_ld_weights3_fu_322_weights3_buf_ce0),
    .weights3_buf_we0(grp_ld_weights3_fu_322_weights3_buf_we0),
    .weights3_buf_d0(grp_ld_weights3_fu_322_weights3_buf_d0)
);

ld_weights1 grp_ld_weights1_fu_330(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ld_weights1_fu_330_ap_start),
    .ap_done(grp_ld_weights1_fu_330_ap_done),
    .ap_idle(grp_ld_weights1_fu_330_ap_idle),
    .ap_ready(grp_ld_weights1_fu_330_ap_ready),
    .m_axi_weights1_AWVALID(grp_ld_weights1_fu_330_m_axi_weights1_AWVALID),
    .m_axi_weights1_AWREADY(1'b0),
    .m_axi_weights1_AWADDR(grp_ld_weights1_fu_330_m_axi_weights1_AWADDR),
    .m_axi_weights1_AWID(grp_ld_weights1_fu_330_m_axi_weights1_AWID),
    .m_axi_weights1_AWLEN(grp_ld_weights1_fu_330_m_axi_weights1_AWLEN),
    .m_axi_weights1_AWSIZE(grp_ld_weights1_fu_330_m_axi_weights1_AWSIZE),
    .m_axi_weights1_AWBURST(grp_ld_weights1_fu_330_m_axi_weights1_AWBURST),
    .m_axi_weights1_AWLOCK(grp_ld_weights1_fu_330_m_axi_weights1_AWLOCK),
    .m_axi_weights1_AWCACHE(grp_ld_weights1_fu_330_m_axi_weights1_AWCACHE),
    .m_axi_weights1_AWPROT(grp_ld_weights1_fu_330_m_axi_weights1_AWPROT),
    .m_axi_weights1_AWQOS(grp_ld_weights1_fu_330_m_axi_weights1_AWQOS),
    .m_axi_weights1_AWREGION(grp_ld_weights1_fu_330_m_axi_weights1_AWREGION),
    .m_axi_weights1_AWUSER(grp_ld_weights1_fu_330_m_axi_weights1_AWUSER),
    .m_axi_weights1_WVALID(grp_ld_weights1_fu_330_m_axi_weights1_WVALID),
    .m_axi_weights1_WREADY(1'b0),
    .m_axi_weights1_WDATA(grp_ld_weights1_fu_330_m_axi_weights1_WDATA),
    .m_axi_weights1_WSTRB(grp_ld_weights1_fu_330_m_axi_weights1_WSTRB),
    .m_axi_weights1_WLAST(grp_ld_weights1_fu_330_m_axi_weights1_WLAST),
    .m_axi_weights1_WID(grp_ld_weights1_fu_330_m_axi_weights1_WID),
    .m_axi_weights1_WUSER(grp_ld_weights1_fu_330_m_axi_weights1_WUSER),
    .m_axi_weights1_ARVALID(grp_ld_weights1_fu_330_m_axi_weights1_ARVALID),
    .m_axi_weights1_ARREADY(DATA_WEIGHT_ARREADY),
    .m_axi_weights1_ARADDR(grp_ld_weights1_fu_330_m_axi_weights1_ARADDR),
    .m_axi_weights1_ARID(grp_ld_weights1_fu_330_m_axi_weights1_ARID),
    .m_axi_weights1_ARLEN(grp_ld_weights1_fu_330_m_axi_weights1_ARLEN),
    .m_axi_weights1_ARSIZE(grp_ld_weights1_fu_330_m_axi_weights1_ARSIZE),
    .m_axi_weights1_ARBURST(grp_ld_weights1_fu_330_m_axi_weights1_ARBURST),
    .m_axi_weights1_ARLOCK(grp_ld_weights1_fu_330_m_axi_weights1_ARLOCK),
    .m_axi_weights1_ARCACHE(grp_ld_weights1_fu_330_m_axi_weights1_ARCACHE),
    .m_axi_weights1_ARPROT(grp_ld_weights1_fu_330_m_axi_weights1_ARPROT),
    .m_axi_weights1_ARQOS(grp_ld_weights1_fu_330_m_axi_weights1_ARQOS),
    .m_axi_weights1_ARREGION(grp_ld_weights1_fu_330_m_axi_weights1_ARREGION),
    .m_axi_weights1_ARUSER(grp_ld_weights1_fu_330_m_axi_weights1_ARUSER),
    .m_axi_weights1_RVALID(DATA_WEIGHT_RVALID),
    .m_axi_weights1_RREADY(grp_ld_weights1_fu_330_m_axi_weights1_RREADY),
    .m_axi_weights1_RDATA(DATA_WEIGHT_RDATA),
    .m_axi_weights1_RLAST(DATA_WEIGHT_RLAST),
    .m_axi_weights1_RID(DATA_WEIGHT_RID),
    .m_axi_weights1_RUSER(DATA_WEIGHT_RUSER),
    .m_axi_weights1_RRESP(DATA_WEIGHT_RRESP),
    .m_axi_weights1_BVALID(1'b0),
    .m_axi_weights1_BREADY(grp_ld_weights1_fu_330_m_axi_weights1_BREADY),
    .m_axi_weights1_BRESP(2'd0),
    .m_axi_weights1_BID(1'd0),
    .m_axi_weights1_BUSER(1'd0),
    .weights1_offset(weights7_reg_518),
    .weights1_buf_0_address0(grp_ld_weights1_fu_330_weights1_buf_0_address0),
    .weights1_buf_0_ce0(grp_ld_weights1_fu_330_weights1_buf_0_ce0),
    .weights1_buf_0_we0(grp_ld_weights1_fu_330_weights1_buf_0_we0),
    .weights1_buf_0_d0(grp_ld_weights1_fu_330_weights1_buf_0_d0)
);

ld_input grp_ld_input_fu_338(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ld_input_fu_338_ap_start),
    .ap_done(grp_ld_input_fu_338_ap_done),
    .ap_idle(grp_ld_input_fu_338_ap_idle),
    .ap_ready(grp_ld_input_fu_338_ap_ready),
    .m_axi_input_r_AWVALID(grp_ld_input_fu_338_m_axi_input_r_AWVALID),
    .m_axi_input_r_AWREADY(1'b0),
    .m_axi_input_r_AWADDR(grp_ld_input_fu_338_m_axi_input_r_AWADDR),
    .m_axi_input_r_AWID(grp_ld_input_fu_338_m_axi_input_r_AWID),
    .m_axi_input_r_AWLEN(grp_ld_input_fu_338_m_axi_input_r_AWLEN),
    .m_axi_input_r_AWSIZE(grp_ld_input_fu_338_m_axi_input_r_AWSIZE),
    .m_axi_input_r_AWBURST(grp_ld_input_fu_338_m_axi_input_r_AWBURST),
    .m_axi_input_r_AWLOCK(grp_ld_input_fu_338_m_axi_input_r_AWLOCK),
    .m_axi_input_r_AWCACHE(grp_ld_input_fu_338_m_axi_input_r_AWCACHE),
    .m_axi_input_r_AWPROT(grp_ld_input_fu_338_m_axi_input_r_AWPROT),
    .m_axi_input_r_AWQOS(grp_ld_input_fu_338_m_axi_input_r_AWQOS),
    .m_axi_input_r_AWREGION(grp_ld_input_fu_338_m_axi_input_r_AWREGION),
    .m_axi_input_r_AWUSER(grp_ld_input_fu_338_m_axi_input_r_AWUSER),
    .m_axi_input_r_WVALID(grp_ld_input_fu_338_m_axi_input_r_WVALID),
    .m_axi_input_r_WREADY(1'b0),
    .m_axi_input_r_WDATA(grp_ld_input_fu_338_m_axi_input_r_WDATA),
    .m_axi_input_r_WSTRB(grp_ld_input_fu_338_m_axi_input_r_WSTRB),
    .m_axi_input_r_WLAST(grp_ld_input_fu_338_m_axi_input_r_WLAST),
    .m_axi_input_r_WID(grp_ld_input_fu_338_m_axi_input_r_WID),
    .m_axi_input_r_WUSER(grp_ld_input_fu_338_m_axi_input_r_WUSER),
    .m_axi_input_r_ARVALID(grp_ld_input_fu_338_m_axi_input_r_ARVALID),
    .m_axi_input_r_ARREADY(DATA_INPUT_ARREADY),
    .m_axi_input_r_ARADDR(grp_ld_input_fu_338_m_axi_input_r_ARADDR),
    .m_axi_input_r_ARID(grp_ld_input_fu_338_m_axi_input_r_ARID),
    .m_axi_input_r_ARLEN(grp_ld_input_fu_338_m_axi_input_r_ARLEN),
    .m_axi_input_r_ARSIZE(grp_ld_input_fu_338_m_axi_input_r_ARSIZE),
    .m_axi_input_r_ARBURST(grp_ld_input_fu_338_m_axi_input_r_ARBURST),
    .m_axi_input_r_ARLOCK(grp_ld_input_fu_338_m_axi_input_r_ARLOCK),
    .m_axi_input_r_ARCACHE(grp_ld_input_fu_338_m_axi_input_r_ARCACHE),
    .m_axi_input_r_ARPROT(grp_ld_input_fu_338_m_axi_input_r_ARPROT),
    .m_axi_input_r_ARQOS(grp_ld_input_fu_338_m_axi_input_r_ARQOS),
    .m_axi_input_r_ARREGION(grp_ld_input_fu_338_m_axi_input_r_ARREGION),
    .m_axi_input_r_ARUSER(grp_ld_input_fu_338_m_axi_input_r_ARUSER),
    .m_axi_input_r_RVALID(DATA_INPUT_RVALID),
    .m_axi_input_r_RREADY(grp_ld_input_fu_338_m_axi_input_r_RREADY),
    .m_axi_input_r_RDATA(DATA_INPUT_RDATA),
    .m_axi_input_r_RLAST(DATA_INPUT_RLAST),
    .m_axi_input_r_RID(DATA_INPUT_RID),
    .m_axi_input_r_RUSER(DATA_INPUT_RUSER),
    .m_axi_input_r_RRESP(DATA_INPUT_RRESP),
    .m_axi_input_r_BVALID(1'b0),
    .m_axi_input_r_BREADY(grp_ld_input_fu_338_m_axi_input_r_BREADY),
    .m_axi_input_r_BRESP(2'd0),
    .m_axi_input_r_BID(1'd0),
    .m_axi_input_r_BUSER(1'd0),
    .input_offset(input1_reg_523),
    .input_buf_0_address0(grp_ld_input_fu_338_input_buf_0_address0),
    .input_buf_0_ce0(grp_ld_input_fu_338_input_buf_0_ce0),
    .input_buf_0_we0(grp_ld_input_fu_338_input_buf_0_we0),
    .input_buf_0_d0(grp_ld_input_fu_338_input_buf_0_d0)
);

ld_bias5 grp_ld_bias5_fu_346(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ld_bias5_fu_346_ap_start),
    .ap_done(grp_ld_bias5_fu_346_ap_done),
    .ap_idle(grp_ld_bias5_fu_346_ap_idle),
    .ap_ready(grp_ld_bias5_fu_346_ap_ready),
    .m_axi_bias5_AWVALID(grp_ld_bias5_fu_346_m_axi_bias5_AWVALID),
    .m_axi_bias5_AWREADY(1'b0),
    .m_axi_bias5_AWADDR(grp_ld_bias5_fu_346_m_axi_bias5_AWADDR),
    .m_axi_bias5_AWID(grp_ld_bias5_fu_346_m_axi_bias5_AWID),
    .m_axi_bias5_AWLEN(grp_ld_bias5_fu_346_m_axi_bias5_AWLEN),
    .m_axi_bias5_AWSIZE(grp_ld_bias5_fu_346_m_axi_bias5_AWSIZE),
    .m_axi_bias5_AWBURST(grp_ld_bias5_fu_346_m_axi_bias5_AWBURST),
    .m_axi_bias5_AWLOCK(grp_ld_bias5_fu_346_m_axi_bias5_AWLOCK),
    .m_axi_bias5_AWCACHE(grp_ld_bias5_fu_346_m_axi_bias5_AWCACHE),
    .m_axi_bias5_AWPROT(grp_ld_bias5_fu_346_m_axi_bias5_AWPROT),
    .m_axi_bias5_AWQOS(grp_ld_bias5_fu_346_m_axi_bias5_AWQOS),
    .m_axi_bias5_AWREGION(grp_ld_bias5_fu_346_m_axi_bias5_AWREGION),
    .m_axi_bias5_AWUSER(grp_ld_bias5_fu_346_m_axi_bias5_AWUSER),
    .m_axi_bias5_WVALID(grp_ld_bias5_fu_346_m_axi_bias5_WVALID),
    .m_axi_bias5_WREADY(1'b0),
    .m_axi_bias5_WDATA(grp_ld_bias5_fu_346_m_axi_bias5_WDATA),
    .m_axi_bias5_WSTRB(grp_ld_bias5_fu_346_m_axi_bias5_WSTRB),
    .m_axi_bias5_WLAST(grp_ld_bias5_fu_346_m_axi_bias5_WLAST),
    .m_axi_bias5_WID(grp_ld_bias5_fu_346_m_axi_bias5_WID),
    .m_axi_bias5_WUSER(grp_ld_bias5_fu_346_m_axi_bias5_WUSER),
    .m_axi_bias5_ARVALID(grp_ld_bias5_fu_346_m_axi_bias5_ARVALID),
    .m_axi_bias5_ARREADY(DATA_BIAS_ARREADY),
    .m_axi_bias5_ARADDR(grp_ld_bias5_fu_346_m_axi_bias5_ARADDR),
    .m_axi_bias5_ARID(grp_ld_bias5_fu_346_m_axi_bias5_ARID),
    .m_axi_bias5_ARLEN(grp_ld_bias5_fu_346_m_axi_bias5_ARLEN),
    .m_axi_bias5_ARSIZE(grp_ld_bias5_fu_346_m_axi_bias5_ARSIZE),
    .m_axi_bias5_ARBURST(grp_ld_bias5_fu_346_m_axi_bias5_ARBURST),
    .m_axi_bias5_ARLOCK(grp_ld_bias5_fu_346_m_axi_bias5_ARLOCK),
    .m_axi_bias5_ARCACHE(grp_ld_bias5_fu_346_m_axi_bias5_ARCACHE),
    .m_axi_bias5_ARPROT(grp_ld_bias5_fu_346_m_axi_bias5_ARPROT),
    .m_axi_bias5_ARQOS(grp_ld_bias5_fu_346_m_axi_bias5_ARQOS),
    .m_axi_bias5_ARREGION(grp_ld_bias5_fu_346_m_axi_bias5_ARREGION),
    .m_axi_bias5_ARUSER(grp_ld_bias5_fu_346_m_axi_bias5_ARUSER),
    .m_axi_bias5_RVALID(DATA_BIAS_RVALID),
    .m_axi_bias5_RREADY(grp_ld_bias5_fu_346_m_axi_bias5_RREADY),
    .m_axi_bias5_RDATA(DATA_BIAS_RDATA),
    .m_axi_bias5_RLAST(DATA_BIAS_RLAST),
    .m_axi_bias5_RID(DATA_BIAS_RID),
    .m_axi_bias5_RUSER(DATA_BIAS_RUSER),
    .m_axi_bias5_RRESP(DATA_BIAS_RRESP),
    .m_axi_bias5_BVALID(1'b0),
    .m_axi_bias5_BREADY(grp_ld_bias5_fu_346_m_axi_bias5_BREADY),
    .m_axi_bias5_BRESP(2'd0),
    .m_axi_bias5_BID(1'd0),
    .m_axi_bias5_BUSER(1'd0),
    .bias5_offset(bias2_reg_493),
    .bias5_buf_address0(grp_ld_bias5_fu_346_bias5_buf_address0),
    .bias5_buf_ce0(grp_ld_bias5_fu_346_bias5_buf_ce0),
    .bias5_buf_we0(grp_ld_bias5_fu_346_bias5_buf_we0),
    .bias5_buf_d0(grp_ld_bias5_fu_346_bias5_buf_d0)
);

ld_bias3 grp_ld_bias3_fu_354(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ld_bias3_fu_354_ap_start),
    .ap_done(grp_ld_bias3_fu_354_ap_done),
    .ap_idle(grp_ld_bias3_fu_354_ap_idle),
    .ap_ready(grp_ld_bias3_fu_354_ap_ready),
    .m_axi_bias3_AWVALID(grp_ld_bias3_fu_354_m_axi_bias3_AWVALID),
    .m_axi_bias3_AWREADY(1'b0),
    .m_axi_bias3_AWADDR(grp_ld_bias3_fu_354_m_axi_bias3_AWADDR),
    .m_axi_bias3_AWID(grp_ld_bias3_fu_354_m_axi_bias3_AWID),
    .m_axi_bias3_AWLEN(grp_ld_bias3_fu_354_m_axi_bias3_AWLEN),
    .m_axi_bias3_AWSIZE(grp_ld_bias3_fu_354_m_axi_bias3_AWSIZE),
    .m_axi_bias3_AWBURST(grp_ld_bias3_fu_354_m_axi_bias3_AWBURST),
    .m_axi_bias3_AWLOCK(grp_ld_bias3_fu_354_m_axi_bias3_AWLOCK),
    .m_axi_bias3_AWCACHE(grp_ld_bias3_fu_354_m_axi_bias3_AWCACHE),
    .m_axi_bias3_AWPROT(grp_ld_bias3_fu_354_m_axi_bias3_AWPROT),
    .m_axi_bias3_AWQOS(grp_ld_bias3_fu_354_m_axi_bias3_AWQOS),
    .m_axi_bias3_AWREGION(grp_ld_bias3_fu_354_m_axi_bias3_AWREGION),
    .m_axi_bias3_AWUSER(grp_ld_bias3_fu_354_m_axi_bias3_AWUSER),
    .m_axi_bias3_WVALID(grp_ld_bias3_fu_354_m_axi_bias3_WVALID),
    .m_axi_bias3_WREADY(1'b0),
    .m_axi_bias3_WDATA(grp_ld_bias3_fu_354_m_axi_bias3_WDATA),
    .m_axi_bias3_WSTRB(grp_ld_bias3_fu_354_m_axi_bias3_WSTRB),
    .m_axi_bias3_WLAST(grp_ld_bias3_fu_354_m_axi_bias3_WLAST),
    .m_axi_bias3_WID(grp_ld_bias3_fu_354_m_axi_bias3_WID),
    .m_axi_bias3_WUSER(grp_ld_bias3_fu_354_m_axi_bias3_WUSER),
    .m_axi_bias3_ARVALID(grp_ld_bias3_fu_354_m_axi_bias3_ARVALID),
    .m_axi_bias3_ARREADY(DATA_BIAS_ARREADY),
    .m_axi_bias3_ARADDR(grp_ld_bias3_fu_354_m_axi_bias3_ARADDR),
    .m_axi_bias3_ARID(grp_ld_bias3_fu_354_m_axi_bias3_ARID),
    .m_axi_bias3_ARLEN(grp_ld_bias3_fu_354_m_axi_bias3_ARLEN),
    .m_axi_bias3_ARSIZE(grp_ld_bias3_fu_354_m_axi_bias3_ARSIZE),
    .m_axi_bias3_ARBURST(grp_ld_bias3_fu_354_m_axi_bias3_ARBURST),
    .m_axi_bias3_ARLOCK(grp_ld_bias3_fu_354_m_axi_bias3_ARLOCK),
    .m_axi_bias3_ARCACHE(grp_ld_bias3_fu_354_m_axi_bias3_ARCACHE),
    .m_axi_bias3_ARPROT(grp_ld_bias3_fu_354_m_axi_bias3_ARPROT),
    .m_axi_bias3_ARQOS(grp_ld_bias3_fu_354_m_axi_bias3_ARQOS),
    .m_axi_bias3_ARREGION(grp_ld_bias3_fu_354_m_axi_bias3_ARREGION),
    .m_axi_bias3_ARUSER(grp_ld_bias3_fu_354_m_axi_bias3_ARUSER),
    .m_axi_bias3_RVALID(DATA_BIAS_RVALID),
    .m_axi_bias3_RREADY(grp_ld_bias3_fu_354_m_axi_bias3_RREADY),
    .m_axi_bias3_RDATA(DATA_BIAS_RDATA),
    .m_axi_bias3_RLAST(DATA_BIAS_RLAST),
    .m_axi_bias3_RID(DATA_BIAS_RID),
    .m_axi_bias3_RUSER(DATA_BIAS_RUSER),
    .m_axi_bias3_RRESP(DATA_BIAS_RRESP),
    .m_axi_bias3_BVALID(1'b0),
    .m_axi_bias3_BREADY(grp_ld_bias3_fu_354_m_axi_bias3_BREADY),
    .m_axi_bias3_BRESP(2'd0),
    .m_axi_bias3_BID(1'd0),
    .m_axi_bias3_BUSER(1'd0),
    .bias3_offset(bias4_reg_503),
    .bias3_buf_address0(grp_ld_bias3_fu_354_bias3_buf_address0),
    .bias3_buf_ce0(grp_ld_bias3_fu_354_bias3_buf_ce0),
    .bias3_buf_we0(grp_ld_bias3_fu_354_bias3_buf_we0),
    .bias3_buf_d0(grp_ld_bias3_fu_354_bias3_buf_d0)
);

st_output grp_st_output_fu_362(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_st_output_fu_362_ap_start),
    .ap_done(grp_st_output_fu_362_ap_done),
    .ap_idle(grp_st_output_fu_362_ap_idle),
    .ap_ready(grp_st_output_fu_362_ap_ready),
    .m_axi_output_r_AWVALID(grp_st_output_fu_362_m_axi_output_r_AWVALID),
    .m_axi_output_r_AWREADY(DATA_OUTPUT_AWREADY),
    .m_axi_output_r_AWADDR(grp_st_output_fu_362_m_axi_output_r_AWADDR),
    .m_axi_output_r_AWID(grp_st_output_fu_362_m_axi_output_r_AWID),
    .m_axi_output_r_AWLEN(grp_st_output_fu_362_m_axi_output_r_AWLEN),
    .m_axi_output_r_AWSIZE(grp_st_output_fu_362_m_axi_output_r_AWSIZE),
    .m_axi_output_r_AWBURST(grp_st_output_fu_362_m_axi_output_r_AWBURST),
    .m_axi_output_r_AWLOCK(grp_st_output_fu_362_m_axi_output_r_AWLOCK),
    .m_axi_output_r_AWCACHE(grp_st_output_fu_362_m_axi_output_r_AWCACHE),
    .m_axi_output_r_AWPROT(grp_st_output_fu_362_m_axi_output_r_AWPROT),
    .m_axi_output_r_AWQOS(grp_st_output_fu_362_m_axi_output_r_AWQOS),
    .m_axi_output_r_AWREGION(grp_st_output_fu_362_m_axi_output_r_AWREGION),
    .m_axi_output_r_AWUSER(grp_st_output_fu_362_m_axi_output_r_AWUSER),
    .m_axi_output_r_WVALID(grp_st_output_fu_362_m_axi_output_r_WVALID),
    .m_axi_output_r_WREADY(DATA_OUTPUT_WREADY),
    .m_axi_output_r_WDATA(grp_st_output_fu_362_m_axi_output_r_WDATA),
    .m_axi_output_r_WSTRB(grp_st_output_fu_362_m_axi_output_r_WSTRB),
    .m_axi_output_r_WLAST(grp_st_output_fu_362_m_axi_output_r_WLAST),
    .m_axi_output_r_WID(grp_st_output_fu_362_m_axi_output_r_WID),
    .m_axi_output_r_WUSER(grp_st_output_fu_362_m_axi_output_r_WUSER),
    .m_axi_output_r_ARVALID(grp_st_output_fu_362_m_axi_output_r_ARVALID),
    .m_axi_output_r_ARREADY(1'b0),
    .m_axi_output_r_ARADDR(grp_st_output_fu_362_m_axi_output_r_ARADDR),
    .m_axi_output_r_ARID(grp_st_output_fu_362_m_axi_output_r_ARID),
    .m_axi_output_r_ARLEN(grp_st_output_fu_362_m_axi_output_r_ARLEN),
    .m_axi_output_r_ARSIZE(grp_st_output_fu_362_m_axi_output_r_ARSIZE),
    .m_axi_output_r_ARBURST(grp_st_output_fu_362_m_axi_output_r_ARBURST),
    .m_axi_output_r_ARLOCK(grp_st_output_fu_362_m_axi_output_r_ARLOCK),
    .m_axi_output_r_ARCACHE(grp_st_output_fu_362_m_axi_output_r_ARCACHE),
    .m_axi_output_r_ARPROT(grp_st_output_fu_362_m_axi_output_r_ARPROT),
    .m_axi_output_r_ARQOS(grp_st_output_fu_362_m_axi_output_r_ARQOS),
    .m_axi_output_r_ARREGION(grp_st_output_fu_362_m_axi_output_r_ARREGION),
    .m_axi_output_r_ARUSER(grp_st_output_fu_362_m_axi_output_r_ARUSER),
    .m_axi_output_r_RVALID(1'b0),
    .m_axi_output_r_RREADY(grp_st_output_fu_362_m_axi_output_r_RREADY),
    .m_axi_output_r_RDATA(32'd0),
    .m_axi_output_r_RLAST(1'b0),
    .m_axi_output_r_RID(1'd0),
    .m_axi_output_r_RUSER(1'd0),
    .m_axi_output_r_RRESP(2'd0),
    .m_axi_output_r_BVALID(DATA_OUTPUT_BVALID),
    .m_axi_output_r_BREADY(grp_st_output_fu_362_m_axi_output_r_BREADY),
    .m_axi_output_r_BRESP(DATA_OUTPUT_BRESP),
    .m_axi_output_r_BID(DATA_OUTPUT_BID),
    .m_axi_output_r_BUSER(DATA_OUTPUT_BUSER),
    .output_offset(output1_reg_478),
    .output_buf_address0(grp_st_output_fu_362_output_buf_address0),
    .output_buf_ce0(grp_st_output_fu_362_output_buf_ce0),
    .output_buf_q0(output_buf_q0)
);

ld_bias1 grp_ld_bias1_fu_370(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ld_bias1_fu_370_ap_start),
    .ap_done(grp_ld_bias1_fu_370_ap_done),
    .ap_idle(grp_ld_bias1_fu_370_ap_idle),
    .ap_ready(grp_ld_bias1_fu_370_ap_ready),
    .m_axi_bias1_AWVALID(grp_ld_bias1_fu_370_m_axi_bias1_AWVALID),
    .m_axi_bias1_AWREADY(1'b0),
    .m_axi_bias1_AWADDR(grp_ld_bias1_fu_370_m_axi_bias1_AWADDR),
    .m_axi_bias1_AWID(grp_ld_bias1_fu_370_m_axi_bias1_AWID),
    .m_axi_bias1_AWLEN(grp_ld_bias1_fu_370_m_axi_bias1_AWLEN),
    .m_axi_bias1_AWSIZE(grp_ld_bias1_fu_370_m_axi_bias1_AWSIZE),
    .m_axi_bias1_AWBURST(grp_ld_bias1_fu_370_m_axi_bias1_AWBURST),
    .m_axi_bias1_AWLOCK(grp_ld_bias1_fu_370_m_axi_bias1_AWLOCK),
    .m_axi_bias1_AWCACHE(grp_ld_bias1_fu_370_m_axi_bias1_AWCACHE),
    .m_axi_bias1_AWPROT(grp_ld_bias1_fu_370_m_axi_bias1_AWPROT),
    .m_axi_bias1_AWQOS(grp_ld_bias1_fu_370_m_axi_bias1_AWQOS),
    .m_axi_bias1_AWREGION(grp_ld_bias1_fu_370_m_axi_bias1_AWREGION),
    .m_axi_bias1_AWUSER(grp_ld_bias1_fu_370_m_axi_bias1_AWUSER),
    .m_axi_bias1_WVALID(grp_ld_bias1_fu_370_m_axi_bias1_WVALID),
    .m_axi_bias1_WREADY(1'b0),
    .m_axi_bias1_WDATA(grp_ld_bias1_fu_370_m_axi_bias1_WDATA),
    .m_axi_bias1_WSTRB(grp_ld_bias1_fu_370_m_axi_bias1_WSTRB),
    .m_axi_bias1_WLAST(grp_ld_bias1_fu_370_m_axi_bias1_WLAST),
    .m_axi_bias1_WID(grp_ld_bias1_fu_370_m_axi_bias1_WID),
    .m_axi_bias1_WUSER(grp_ld_bias1_fu_370_m_axi_bias1_WUSER),
    .m_axi_bias1_ARVALID(grp_ld_bias1_fu_370_m_axi_bias1_ARVALID),
    .m_axi_bias1_ARREADY(DATA_BIAS_ARREADY),
    .m_axi_bias1_ARADDR(grp_ld_bias1_fu_370_m_axi_bias1_ARADDR),
    .m_axi_bias1_ARID(grp_ld_bias1_fu_370_m_axi_bias1_ARID),
    .m_axi_bias1_ARLEN(grp_ld_bias1_fu_370_m_axi_bias1_ARLEN),
    .m_axi_bias1_ARSIZE(grp_ld_bias1_fu_370_m_axi_bias1_ARSIZE),
    .m_axi_bias1_ARBURST(grp_ld_bias1_fu_370_m_axi_bias1_ARBURST),
    .m_axi_bias1_ARLOCK(grp_ld_bias1_fu_370_m_axi_bias1_ARLOCK),
    .m_axi_bias1_ARCACHE(grp_ld_bias1_fu_370_m_axi_bias1_ARCACHE),
    .m_axi_bias1_ARPROT(grp_ld_bias1_fu_370_m_axi_bias1_ARPROT),
    .m_axi_bias1_ARQOS(grp_ld_bias1_fu_370_m_axi_bias1_ARQOS),
    .m_axi_bias1_ARREGION(grp_ld_bias1_fu_370_m_axi_bias1_ARREGION),
    .m_axi_bias1_ARUSER(grp_ld_bias1_fu_370_m_axi_bias1_ARUSER),
    .m_axi_bias1_RVALID(DATA_BIAS_RVALID),
    .m_axi_bias1_RREADY(grp_ld_bias1_fu_370_m_axi_bias1_RREADY),
    .m_axi_bias1_RDATA(DATA_BIAS_RDATA),
    .m_axi_bias1_RLAST(DATA_BIAS_RLAST),
    .m_axi_bias1_RID(DATA_BIAS_RID),
    .m_axi_bias1_RUSER(DATA_BIAS_RUSER),
    .m_axi_bias1_RRESP(DATA_BIAS_RRESP),
    .m_axi_bias1_BVALID(1'b0),
    .m_axi_bias1_BREADY(grp_ld_bias1_fu_370_m_axi_bias1_BREADY),
    .m_axi_bias1_BRESP(2'd0),
    .m_axi_bias1_BID(1'd0),
    .m_axi_bias1_BUSER(1'd0),
    .bias1_offset(bias7_reg_513),
    .bias1_buf_address0(grp_ld_bias1_fu_370_bias1_buf_address0),
    .bias1_buf_ce0(grp_ld_bias1_fu_370_bias1_buf_ce0),
    .bias1_buf_we0(grp_ld_bias1_fu_370_bias1_buf_we0),
    .bias1_buf_d0(grp_ld_bias1_fu_370_bias1_buf_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_i_convolution1_fu_274_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_i_convolution1_fu_274_ap_start_reg <= 1'b1;
        end else if ((grp_i_convolution1_fu_274_ap_ready == 1'b1)) begin
            grp_i_convolution1_fu_274_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_i_convolution3_fu_266_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_i_convolution3_fu_266_ap_start_reg <= 1'b1;
        end else if ((grp_i_convolution3_fu_266_ap_ready == 1'b1)) begin
            grp_i_convolution3_fu_266_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_i_convolution5_fu_282_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            grp_i_convolution5_fu_282_ap_start_reg <= 1'b1;
        end else if ((grp_i_convolution5_fu_282_ap_ready == 1'b1)) begin
            grp_i_convolution5_fu_282_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_i_fc6_fu_290_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            grp_i_fc6_fu_290_ap_start_reg <= 1'b1;
        end else if ((grp_i_fc6_fu_290_ap_ready == 1'b1)) begin
            grp_i_fc6_fu_290_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_i_max_pooling2_fu_302_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_i_max_pooling2_fu_302_ap_start_reg <= 1'b1;
        end else if ((grp_i_max_pooling2_fu_302_ap_ready == 1'b1)) begin
            grp_i_max_pooling2_fu_302_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_i_max_pooling4_fu_308_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_i_max_pooling4_fu_308_ap_start_reg <= 1'b1;
        end else if ((grp_i_max_pooling4_fu_308_ap_ready == 1'b1)) begin
            grp_i_max_pooling4_fu_308_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ld_bias1_fu_370_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_ld_bias1_fu_370_ap_start_reg <= 1'b1;
        end else if ((grp_ld_bias1_fu_370_ap_ready == 1'b1)) begin
            grp_ld_bias1_fu_370_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ld_bias3_fu_354_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_ld_bias3_fu_354_ap_start_reg <= 1'b1;
        end else if ((grp_ld_bias3_fu_354_ap_ready == 1'b1)) begin
            grp_ld_bias3_fu_354_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ld_bias5_fu_346_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_ld_bias5_fu_346_ap_start_reg <= 1'b1;
        end else if ((grp_ld_bias5_fu_346_ap_ready == 1'b1)) begin
            grp_ld_bias5_fu_346_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ld_input_fu_338_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_ld_input_fu_338_ap_start_reg <= 1'b1;
        end else if ((grp_ld_input_fu_338_ap_ready == 1'b1)) begin
            grp_ld_input_fu_338_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ld_weights1_fu_330_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_ld_weights1_fu_330_ap_start_reg <= 1'b1;
        end else if ((grp_ld_weights1_fu_330_ap_ready == 1'b1)) begin
            grp_ld_weights1_fu_330_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ld_weights3_fu_322_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_ld_weights3_fu_322_ap_start_reg <= 1'b1;
        end else if ((grp_ld_weights3_fu_322_ap_ready == 1'b1)) begin
            grp_ld_weights3_fu_322_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ld_weights5_fu_314_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_ld_weights5_fu_314_ap_start_reg <= 1'b1;
        end else if ((grp_ld_weights5_fu_314_ap_ready == 1'b1)) begin
            grp_ld_weights5_fu_314_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_st_output_fu_362_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            grp_st_output_fu_362_ap_start_reg <= 1'b1;
        end else if ((grp_st_output_fu_362_ap_ready == 1'b1)) begin
            grp_st_output_fu_362_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias2_reg_493 <= {{bias5[31:2]}};
        bias4_reg_503 <= {{bias3[31:2]}};
        bias7_reg_513 <= {{bias1[31:2]}};
        bias_reg_483 <= {{bias6[31:2]}};
        input1_reg_523 <= {{input_r[31:2]}};
        output1_reg_478 <= {{output_r[31:2]}};
        weights2_reg_498 <= {{weights5[31:2]}};
        weights4_reg_508 <= {{weights3[31:2]}};
        weights7_reg_518 <= {{weights1[31:2]}};
        weights_reg_488 <= {{weights6[31:2]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARADDR = grp_ld_bias1_fu_370_m_axi_bias1_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_BIAS_ARADDR = grp_ld_bias3_fu_354_m_axi_bias3_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_BIAS_ARADDR = grp_ld_bias5_fu_346_m_axi_bias5_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_BIAS_ARADDR = grp_i_fc6_fu_290_m_axi_bias_ARADDR;
    end else begin
        DATA_BIAS_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARBURST = grp_ld_bias1_fu_370_m_axi_bias1_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_BIAS_ARBURST = grp_ld_bias3_fu_354_m_axi_bias3_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_BIAS_ARBURST = grp_ld_bias5_fu_346_m_axi_bias5_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_BIAS_ARBURST = grp_i_fc6_fu_290_m_axi_bias_ARBURST;
    end else begin
        DATA_BIAS_ARBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARCACHE = grp_ld_bias1_fu_370_m_axi_bias1_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_BIAS_ARCACHE = grp_ld_bias3_fu_354_m_axi_bias3_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_BIAS_ARCACHE = grp_ld_bias5_fu_346_m_axi_bias5_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_BIAS_ARCACHE = grp_i_fc6_fu_290_m_axi_bias_ARCACHE;
    end else begin
        DATA_BIAS_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARID = grp_ld_bias1_fu_370_m_axi_bias1_ARID;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_BIAS_ARID = grp_ld_bias3_fu_354_m_axi_bias3_ARID;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_BIAS_ARID = grp_ld_bias5_fu_346_m_axi_bias5_ARID;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_BIAS_ARID = grp_i_fc6_fu_290_m_axi_bias_ARID;
    end else begin
        DATA_BIAS_ARID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARLEN = grp_ld_bias1_fu_370_m_axi_bias1_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_BIAS_ARLEN = grp_ld_bias3_fu_354_m_axi_bias3_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_BIAS_ARLEN = grp_ld_bias5_fu_346_m_axi_bias5_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_BIAS_ARLEN = grp_i_fc6_fu_290_m_axi_bias_ARLEN;
    end else begin
        DATA_BIAS_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARLOCK = grp_ld_bias1_fu_370_m_axi_bias1_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_BIAS_ARLOCK = grp_ld_bias3_fu_354_m_axi_bias3_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_BIAS_ARLOCK = grp_ld_bias5_fu_346_m_axi_bias5_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_BIAS_ARLOCK = grp_i_fc6_fu_290_m_axi_bias_ARLOCK;
    end else begin
        DATA_BIAS_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARPROT = grp_ld_bias1_fu_370_m_axi_bias1_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_BIAS_ARPROT = grp_ld_bias3_fu_354_m_axi_bias3_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_BIAS_ARPROT = grp_ld_bias5_fu_346_m_axi_bias5_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_BIAS_ARPROT = grp_i_fc6_fu_290_m_axi_bias_ARPROT;
    end else begin
        DATA_BIAS_ARPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARQOS = grp_ld_bias1_fu_370_m_axi_bias1_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_BIAS_ARQOS = grp_ld_bias3_fu_354_m_axi_bias3_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_BIAS_ARQOS = grp_ld_bias5_fu_346_m_axi_bias5_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_BIAS_ARQOS = grp_i_fc6_fu_290_m_axi_bias_ARQOS;
    end else begin
        DATA_BIAS_ARQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARREGION = grp_ld_bias1_fu_370_m_axi_bias1_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_BIAS_ARREGION = grp_ld_bias3_fu_354_m_axi_bias3_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_BIAS_ARREGION = grp_ld_bias5_fu_346_m_axi_bias5_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_BIAS_ARREGION = grp_i_fc6_fu_290_m_axi_bias_ARREGION;
    end else begin
        DATA_BIAS_ARREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARSIZE = grp_ld_bias1_fu_370_m_axi_bias1_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_BIAS_ARSIZE = grp_ld_bias3_fu_354_m_axi_bias3_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_BIAS_ARSIZE = grp_ld_bias5_fu_346_m_axi_bias5_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_BIAS_ARSIZE = grp_i_fc6_fu_290_m_axi_bias_ARSIZE;
    end else begin
        DATA_BIAS_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARUSER = grp_ld_bias1_fu_370_m_axi_bias1_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_BIAS_ARUSER = grp_ld_bias3_fu_354_m_axi_bias3_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_BIAS_ARUSER = grp_ld_bias5_fu_346_m_axi_bias5_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_BIAS_ARUSER = grp_i_fc6_fu_290_m_axi_bias_ARUSER;
    end else begin
        DATA_BIAS_ARUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARVALID = grp_ld_bias1_fu_370_m_axi_bias1_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_BIAS_ARVALID = grp_ld_bias3_fu_354_m_axi_bias3_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_BIAS_ARVALID = grp_ld_bias5_fu_346_m_axi_bias5_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_BIAS_ARVALID = grp_i_fc6_fu_290_m_axi_bias_ARVALID;
    end else begin
        DATA_BIAS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_RREADY = grp_ld_bias1_fu_370_m_axi_bias1_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_BIAS_RREADY = grp_ld_bias3_fu_354_m_axi_bias3_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_BIAS_RREADY = grp_ld_bias5_fu_346_m_axi_bias5_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_BIAS_RREADY = grp_i_fc6_fu_290_m_axi_bias_RREADY;
    end else begin
        DATA_BIAS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_INPUT_ARVALID = grp_ld_input_fu_338_m_axi_input_r_ARVALID;
    end else begin
        DATA_INPUT_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_INPUT_RREADY = grp_ld_input_fu_338_m_axi_input_r_RREADY;
    end else begin
        DATA_INPUT_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        DATA_OUTPUT_AWVALID = grp_st_output_fu_362_m_axi_output_r_AWVALID;
    end else begin
        DATA_OUTPUT_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        DATA_OUTPUT_BREADY = grp_st_output_fu_362_m_axi_output_r_BREADY;
    end else begin
        DATA_OUTPUT_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        DATA_OUTPUT_WVALID = grp_st_output_fu_362_m_axi_output_r_WVALID;
    end else begin
        DATA_OUTPUT_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARADDR = grp_ld_weights1_fu_330_m_axi_weights1_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_WEIGHT_ARADDR = grp_ld_weights3_fu_322_m_axi_weights3_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_WEIGHT_ARADDR = grp_ld_weights5_fu_314_m_axi_weights5_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_WEIGHT_ARADDR = grp_i_fc6_fu_290_m_axi_weights_ARADDR;
    end else begin
        DATA_WEIGHT_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARBURST = grp_ld_weights1_fu_330_m_axi_weights1_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_WEIGHT_ARBURST = grp_ld_weights3_fu_322_m_axi_weights3_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_WEIGHT_ARBURST = grp_ld_weights5_fu_314_m_axi_weights5_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_WEIGHT_ARBURST = grp_i_fc6_fu_290_m_axi_weights_ARBURST;
    end else begin
        DATA_WEIGHT_ARBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARCACHE = grp_ld_weights1_fu_330_m_axi_weights1_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_WEIGHT_ARCACHE = grp_ld_weights3_fu_322_m_axi_weights3_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_WEIGHT_ARCACHE = grp_ld_weights5_fu_314_m_axi_weights5_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_WEIGHT_ARCACHE = grp_i_fc6_fu_290_m_axi_weights_ARCACHE;
    end else begin
        DATA_WEIGHT_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARID = grp_ld_weights1_fu_330_m_axi_weights1_ARID;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_WEIGHT_ARID = grp_ld_weights3_fu_322_m_axi_weights3_ARID;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_WEIGHT_ARID = grp_ld_weights5_fu_314_m_axi_weights5_ARID;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_WEIGHT_ARID = grp_i_fc6_fu_290_m_axi_weights_ARID;
    end else begin
        DATA_WEIGHT_ARID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARLEN = grp_ld_weights1_fu_330_m_axi_weights1_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_WEIGHT_ARLEN = grp_ld_weights3_fu_322_m_axi_weights3_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_WEIGHT_ARLEN = grp_ld_weights5_fu_314_m_axi_weights5_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_WEIGHT_ARLEN = grp_i_fc6_fu_290_m_axi_weights_ARLEN;
    end else begin
        DATA_WEIGHT_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARLOCK = grp_ld_weights1_fu_330_m_axi_weights1_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_WEIGHT_ARLOCK = grp_ld_weights3_fu_322_m_axi_weights3_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_WEIGHT_ARLOCK = grp_ld_weights5_fu_314_m_axi_weights5_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_WEIGHT_ARLOCK = grp_i_fc6_fu_290_m_axi_weights_ARLOCK;
    end else begin
        DATA_WEIGHT_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARPROT = grp_ld_weights1_fu_330_m_axi_weights1_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_WEIGHT_ARPROT = grp_ld_weights3_fu_322_m_axi_weights3_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_WEIGHT_ARPROT = grp_ld_weights5_fu_314_m_axi_weights5_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_WEIGHT_ARPROT = grp_i_fc6_fu_290_m_axi_weights_ARPROT;
    end else begin
        DATA_WEIGHT_ARPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARQOS = grp_ld_weights1_fu_330_m_axi_weights1_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_WEIGHT_ARQOS = grp_ld_weights3_fu_322_m_axi_weights3_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_WEIGHT_ARQOS = grp_ld_weights5_fu_314_m_axi_weights5_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_WEIGHT_ARQOS = grp_i_fc6_fu_290_m_axi_weights_ARQOS;
    end else begin
        DATA_WEIGHT_ARQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARREGION = grp_ld_weights1_fu_330_m_axi_weights1_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_WEIGHT_ARREGION = grp_ld_weights3_fu_322_m_axi_weights3_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_WEIGHT_ARREGION = grp_ld_weights5_fu_314_m_axi_weights5_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_WEIGHT_ARREGION = grp_i_fc6_fu_290_m_axi_weights_ARREGION;
    end else begin
        DATA_WEIGHT_ARREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARSIZE = grp_ld_weights1_fu_330_m_axi_weights1_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_WEIGHT_ARSIZE = grp_ld_weights3_fu_322_m_axi_weights3_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_WEIGHT_ARSIZE = grp_ld_weights5_fu_314_m_axi_weights5_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_WEIGHT_ARSIZE = grp_i_fc6_fu_290_m_axi_weights_ARSIZE;
    end else begin
        DATA_WEIGHT_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARUSER = grp_ld_weights1_fu_330_m_axi_weights1_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_WEIGHT_ARUSER = grp_ld_weights3_fu_322_m_axi_weights3_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_WEIGHT_ARUSER = grp_ld_weights5_fu_314_m_axi_weights5_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_WEIGHT_ARUSER = grp_i_fc6_fu_290_m_axi_weights_ARUSER;
    end else begin
        DATA_WEIGHT_ARUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARVALID = grp_ld_weights1_fu_330_m_axi_weights1_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_WEIGHT_ARVALID = grp_ld_weights3_fu_322_m_axi_weights3_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_WEIGHT_ARVALID = grp_ld_weights5_fu_314_m_axi_weights5_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_WEIGHT_ARVALID = grp_i_fc6_fu_290_m_axi_weights_ARVALID;
    end else begin
        DATA_WEIGHT_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_RREADY = grp_ld_weights1_fu_330_m_axi_weights1_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DATA_WEIGHT_RREADY = grp_ld_weights3_fu_322_m_axi_weights3_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        DATA_WEIGHT_RREADY = grp_ld_weights5_fu_314_m_axi_weights5_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        DATA_WEIGHT_RREADY = grp_i_fc6_fu_290_m_axi_weights_RREADY;
    end else begin
        DATA_WEIGHT_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_st_output_fu_362_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_st_output_fu_362_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias1_buf_address0 = grp_ld_bias1_fu_370_bias1_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        bias1_buf_address0 = grp_i_convolution1_fu_274_bias_address0;
    end else begin
        bias1_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias1_buf_ce0 = grp_ld_bias1_fu_370_bias1_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        bias1_buf_ce0 = grp_i_convolution1_fu_274_bias_ce0;
    end else begin
        bias1_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias1_buf_we0 = grp_ld_bias1_fu_370_bias1_buf_we0;
    end else begin
        bias1_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias3_buf_address0 = grp_ld_bias3_fu_354_bias3_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        bias3_buf_address0 = grp_i_convolution3_fu_266_bias_address0;
    end else begin
        bias3_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias3_buf_ce0 = grp_ld_bias3_fu_354_bias3_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        bias3_buf_ce0 = grp_i_convolution3_fu_266_bias_ce0;
    end else begin
        bias3_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias3_buf_we0 = grp_ld_bias3_fu_354_bias3_buf_we0;
    end else begin
        bias3_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        bias5_buf_address0 = grp_ld_bias5_fu_346_bias5_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        bias5_buf_address0 = grp_i_convolution5_fu_282_bias_address0;
    end else begin
        bias5_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        bias5_buf_ce0 = grp_ld_bias5_fu_346_bias5_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        bias5_buf_ce0 = grp_i_convolution5_fu_282_bias_ce0;
    end else begin
        bias5_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        bias5_buf_we0 = grp_ld_bias5_fu_346_bias5_buf_we0;
    end else begin
        bias5_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input2_inter_address0 = grp_i_max_pooling2_fu_302_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input2_inter_address0 = grp_i_convolution1_fu_274_output_r_address0;
    end else begin
        input2_inter_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input2_inter_ce0 = grp_i_max_pooling2_fu_302_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input2_inter_ce0 = grp_i_convolution1_fu_274_output_r_ce0;
    end else begin
        input2_inter_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input2_inter_we0 = grp_i_convolution1_fu_274_output_r_we0;
    end else begin
        input2_inter_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input3_inter_address0 = grp_i_max_pooling2_fu_302_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input3_inter_address0 = grp_i_convolution3_fu_266_input_r_address0;
    end else begin
        input3_inter_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input3_inter_ce0 = grp_i_max_pooling2_fu_302_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input3_inter_ce0 = grp_i_convolution3_fu_266_input_r_ce0;
    end else begin
        input3_inter_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input3_inter_ce1 = grp_i_convolution3_fu_266_input_r_ce1;
    end else begin
        input3_inter_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input3_inter_we0 = grp_i_max_pooling2_fu_302_output_r_we0;
    end else begin
        input3_inter_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input4_inter_address0 = grp_i_max_pooling4_fu_308_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input4_inter_address0 = grp_i_convolution3_fu_266_output_r_address0;
    end else begin
        input4_inter_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input4_inter_ce0 = grp_i_max_pooling4_fu_308_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input4_inter_ce0 = grp_i_convolution3_fu_266_output_r_ce0;
    end else begin
        input4_inter_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input4_inter_we0 = grp_i_convolution3_fu_266_output_r_we0;
    end else begin
        input4_inter_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input5_inter_address0 = grp_i_max_pooling4_fu_308_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        input5_inter_address0 = grp_i_convolution5_fu_282_input_r_address0;
    end else begin
        input5_inter_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input5_inter_ce0 = grp_i_max_pooling4_fu_308_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        input5_inter_ce0 = grp_i_convolution5_fu_282_input_r_ce0;
    end else begin
        input5_inter_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input5_inter_we0 = grp_i_max_pooling4_fu_308_output_r_we0;
    end else begin
        input5_inter_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        input6_inter_0_0_address0 = grp_i_fc6_fu_290_input_0_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        input6_inter_0_0_address0 = grp_i_convolution5_fu_282_output_0_0_address0;
    end else begin
        input6_inter_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        input6_inter_0_0_ce0 = grp_i_fc6_fu_290_input_0_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        input6_inter_0_0_ce0 = grp_i_convolution5_fu_282_output_0_0_ce0;
    end else begin
        input6_inter_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        input6_inter_0_0_we0 = grp_i_convolution5_fu_282_output_0_0_we0;
    end else begin
        input6_inter_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_buf_0_address0 = grp_ld_input_fu_338_input_buf_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_buf_0_address0 = grp_i_convolution1_fu_274_input_0_address0;
    end else begin
        input_buf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_buf_0_ce0 = grp_ld_input_fu_338_input_buf_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_buf_0_ce0 = grp_i_convolution1_fu_274_input_0_ce0;
    end else begin
        input_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_buf_0_ce1 = grp_i_convolution1_fu_274_input_0_ce1;
    end else begin
        input_buf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_buf_0_we0 = grp_ld_input_fu_338_input_buf_0_we0;
    end else begin
        input_buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_buf_address0 = grp_st_output_fu_362_output_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_buf_address0 = grp_i_fc6_fu_290_output_r_address0;
    end else begin
        output_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_buf_ce0 = grp_st_output_fu_362_output_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_buf_ce0 = grp_i_fc6_fu_290_output_r_ce0;
    end else begin
        output_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_buf_we0 = grp_i_fc6_fu_290_output_r_we0;
    end else begin
        output_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights1_buf_0_address0 = grp_ld_weights1_fu_330_weights1_buf_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        weights1_buf_0_address0 = grp_i_convolution1_fu_274_weights_0_address0;
    end else begin
        weights1_buf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights1_buf_0_ce0 = grp_ld_weights1_fu_330_weights1_buf_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        weights1_buf_0_ce0 = grp_i_convolution1_fu_274_weights_0_ce0;
    end else begin
        weights1_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights1_buf_0_ce1 = grp_i_convolution1_fu_274_weights_0_ce1;
    end else begin
        weights1_buf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights1_buf_0_we0 = grp_ld_weights1_fu_330_weights1_buf_0_we0;
    end else begin
        weights1_buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights3_buf_address0 = grp_ld_weights3_fu_322_weights3_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        weights3_buf_address0 = grp_i_convolution3_fu_266_weights_address0;
    end else begin
        weights3_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights3_buf_ce0 = grp_ld_weights3_fu_322_weights3_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        weights3_buf_ce0 = grp_i_convolution3_fu_266_weights_ce0;
    end else begin
        weights3_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weights3_buf_ce1 = grp_i_convolution3_fu_266_weights_ce1;
    end else begin
        weights3_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights3_buf_we0 = grp_ld_weights3_fu_322_weights3_buf_we0;
    end else begin
        weights3_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights5_buf_address0 = grp_ld_weights5_fu_314_weights5_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        weights5_buf_address0 = grp_i_convolution5_fu_282_weights_address0;
    end else begin
        weights5_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights5_buf_ce0 = grp_ld_weights5_fu_314_weights5_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        weights5_buf_ce0 = grp_i_convolution5_fu_282_weights_ce0;
    end else begin
        weights5_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights5_buf_we0 = grp_ld_weights5_fu_314_weights5_buf_we0;
    end else begin
        weights5_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_i_convolution3_fu_266_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((grp_i_max_pooling4_fu_308_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_i_convolution5_fu_282_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((grp_i_fc6_fu_290_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (grp_st_output_fu_362_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state3_on_subcall_done = ((grp_ld_bias1_fu_370_ap_done == 1'b0) | (grp_ld_input_fu_338_ap_done == 1'b0) | (grp_ld_weights1_fu_330_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state5_on_subcall_done = ((grp_ld_weights3_fu_322_ap_done == 1'b0) | (grp_i_convolution1_fu_274_ap_done == 1'b0) | (grp_ld_bias3_fu_354_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state7_on_subcall_done = ((grp_ld_weights5_fu_314_ap_done == 1'b0) | (grp_i_max_pooling2_fu_302_ap_done == 1'b0) | (grp_ld_bias5_fu_346_ap_done == 1'b0));
end

assign ap_return = 32'd0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_i_convolution1_fu_274_ap_start = grp_i_convolution1_fu_274_ap_start_reg;

assign grp_i_convolution3_fu_266_ap_start = grp_i_convolution3_fu_266_ap_start_reg;

assign grp_i_convolution5_fu_282_ap_start = grp_i_convolution5_fu_282_ap_start_reg;

assign grp_i_fc6_fu_290_ap_start = grp_i_fc6_fu_290_ap_start_reg;

assign grp_i_max_pooling2_fu_302_ap_start = grp_i_max_pooling2_fu_302_ap_start_reg;

assign grp_i_max_pooling4_fu_308_ap_start = grp_i_max_pooling4_fu_308_ap_start_reg;

assign grp_ld_bias1_fu_370_ap_start = grp_ld_bias1_fu_370_ap_start_reg;

assign grp_ld_bias3_fu_354_ap_start = grp_ld_bias3_fu_354_ap_start_reg;

assign grp_ld_bias5_fu_346_ap_start = grp_ld_bias5_fu_346_ap_start_reg;

assign grp_ld_input_fu_338_ap_start = grp_ld_input_fu_338_ap_start_reg;

assign grp_ld_weights1_fu_330_ap_start = grp_ld_weights1_fu_330_ap_start_reg;

assign grp_ld_weights3_fu_322_ap_start = grp_ld_weights3_fu_322_ap_start_reg;

assign grp_ld_weights5_fu_314_ap_start = grp_ld_weights5_fu_314_ap_start_reg;

assign grp_st_output_fu_362_ap_start = grp_st_output_fu_362_ap_start_reg;

endmodule //lenet_top
