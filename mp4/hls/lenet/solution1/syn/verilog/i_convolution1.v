// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module i_convolution1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        weights_0_address0,
        weights_0_ce0,
        weights_0_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [7:0] weights_0_address0;
output   weights_0_ce0;
input  [31:0] weights_0_q0;
output  [2:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg weights_0_ce0;
reg bias_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] co_fu_196_p2;
reg   [2:0] co_reg_435;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln21_2_fu_227_p2;
reg   [5:0] add_ln21_2_reg_440;
wire   [0:0] icmp_ln13_fu_190_p2;
wire  signed [9:0] sext_ln23_fu_251_p1;
reg  signed [9:0] sext_ln23_reg_445;
reg   [2:0] bias_addr_reg_450;
wire   [4:0] h_fu_261_p2;
reg   [4:0] h_reg_458;
wire    ap_CS_fsm_state3;
wire   [13:0] sub_ln23_1_fu_300_p2;
reg   [13:0] sub_ln23_1_reg_463;
wire   [0:0] icmp_ln14_fu_255_p2;
wire   [4:0] w_fu_312_p2;
reg   [4:0] w_reg_471;
wire    ap_CS_fsm_state4;
wire   [2:0] m_fu_328_p2;
reg   [2:0] m_reg_479;
wire    ap_CS_fsm_state5;
wire   [8:0] add_ln21_4_fu_359_p2;
reg   [8:0] add_ln21_4_reg_484;
wire   [0:0] icmp_ln18_fu_322_p2;
wire   [4:0] add_ln21_fu_365_p2;
reg   [4:0] add_ln21_reg_489;
wire   [2:0] n_fu_381_p2;
reg   [2:0] n_reg_497;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln20_fu_375_p2;
reg   [31:0] weights_0_load_reg_512;
wire    ap_CS_fsm_state7;
reg   [31:0] input_0_load_reg_517;
wire   [31:0] grp_fu_186_p2;
reg   [31:0] tmp_7_reg_522;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_180_p2;
wire    ap_CS_fsm_state16;
reg   [31:0] bias_load_reg_532;
wire    ap_CS_fsm_state17;
wire   [13:0] add_ln23_1_fu_423_p2;
reg   [13:0] add_ln23_1_reg_537;
reg   [31:0] tmp_reg_542;
wire    ap_CS_fsm_state22;
reg   [2:0] co_0_reg_99;
reg   [4:0] h_0_reg_110;
wire   [0:0] icmp_ln15_fu_306_p2;
reg   [4:0] w_0_reg_122;
wire    ap_CS_fsm_state23;
reg   [31:0] sum_0_reg_134;
reg   [2:0] m_0_reg_146;
reg   [31:0] sum_1_reg_157;
reg   [2:0] n_0_reg_169;
wire   [63:0] zext_ln21_fu_202_p1;
wire   [63:0] zext_ln21_9_fu_396_p1;
wire   [63:0] zext_ln21_4_fu_414_p1;
wire   [63:0] zext_ln23_3_fu_428_p1;
reg   [31:0] grp_fu_180_p0;
reg   [31:0] grp_fu_180_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state8;
wire   [4:0] tmp_s_fu_211_p3;
wire   [5:0] zext_ln21_1_fu_207_p1;
wire   [5:0] zext_ln21_2_fu_219_p1;
wire   [7:0] tmp_15_fu_233_p3;
wire   [8:0] zext_ln23_fu_241_p1;
wire   [8:0] zext_ln21_3_fu_223_p1;
wire   [8:0] sub_ln23_fu_245_p2;
wire   [9:0] zext_ln23_1_fu_267_p1;
wire   [9:0] add_ln23_fu_271_p2;
wire   [8:0] trunc_ln23_fu_276_p1;
wire   [11:0] tmp_17_fu_288_p3;
wire   [13:0] p_shl3_cast_fu_280_p3;
wire  signed [13:0] sext_ln23_1_fu_296_p1;
wire   [5:0] zext_ln21_5_fu_334_p1;
wire   [5:0] add_ln21_3_fu_338_p2;
wire   [7:0] tmp_18_fu_347_p3;
wire   [8:0] zext_ln21_6_fu_343_p1;
wire   [8:0] zext_ln21_7_fu_355_p1;
wire   [4:0] zext_ln18_fu_318_p1;
wire   [8:0] zext_ln21_8_fu_387_p1;
wire   [8:0] add_ln21_5_fu_391_p2;
wire   [4:0] zext_ln20_fu_371_p1;
wire   [4:0] add_ln21_1_fu_401_p2;
wire   [9:0] tmp_16_fu_407_p3;
wire   [13:0] zext_ln23_2_fu_419_p1;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
end

lenet_top_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_top_fadd_32bkb_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_180_p0),
    .din1(grp_fu_180_p1),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

lenet_top_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_top_fmul_32cud_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_0_load_reg_512),
    .din1(input_0_load_reg_517),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        co_0_reg_99 <= co_reg_435;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        co_0_reg_99 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_306_p2 == 1'd1))) begin
        h_0_reg_110 <= h_reg_458;
    end else if (((icmp_ln13_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        h_0_reg_110 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        m_0_reg_146 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_375_p2 == 1'd1))) begin
        m_0_reg_146 <= m_reg_479;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        n_0_reg_169 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        n_0_reg_169 <= n_reg_497;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_0_reg_134 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_375_p2 == 1'd1))) begin
        sum_0_reg_134 <= sum_1_reg_157;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sum_1_reg_157 <= sum_0_reg_134;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sum_1_reg_157 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        w_0_reg_122 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        w_0_reg_122 <= w_reg_471;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln21_2_reg_440 <= add_ln21_2_fu_227_p2;
        bias_addr_reg_450 <= zext_ln21_fu_202_p1;
        sext_ln23_reg_445[9 : 2] <= sext_ln23_fu_251_p1[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln21_4_reg_484 <= add_ln21_4_fu_359_p2;
        add_ln21_reg_489 <= add_ln21_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln23_1_reg_537 <= add_ln23_1_fu_423_p2;
        bias_load_reg_532 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_reg_435 <= co_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_reg_458 <= h_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_0_load_reg_517 <= input_0_q0;
        weights_0_load_reg_512 <= weights_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_reg_479 <= m_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_reg_497 <= n_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln23_1_reg_463[13 : 2] <= sub_ln23_1_fu_300_p2[13 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_7_reg_522 <= grp_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_reg_542 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_reg_471 <= w_fu_312_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln13_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_180_p0 = sum_0_reg_134;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_180_p0 = sum_1_reg_157;
    end else begin
        grp_fu_180_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_180_p1 = bias_load_reg_532;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_180_p1 = tmp_7_reg_522;
    end else begin
        grp_fu_180_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights_0_ce0 = 1'b1;
    end else begin
        weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln13_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln14_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_306_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln18_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_375_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_1_fu_401_p2 = (zext_ln20_fu_371_p1 + w_0_reg_122);

assign add_ln21_2_fu_227_p2 = (zext_ln21_1_fu_207_p1 + zext_ln21_2_fu_219_p1);

assign add_ln21_3_fu_338_p2 = (add_ln21_2_reg_440 + zext_ln21_5_fu_334_p1);

assign add_ln21_4_fu_359_p2 = (zext_ln21_6_fu_343_p1 + zext_ln21_7_fu_355_p1);

assign add_ln21_5_fu_391_p2 = (add_ln21_4_reg_484 + zext_ln21_8_fu_387_p1);

assign add_ln21_fu_365_p2 = (zext_ln18_fu_318_p1 + h_0_reg_110);

assign add_ln23_1_fu_423_p2 = (sub_ln23_1_reg_463 + zext_ln23_2_fu_419_p1);

assign add_ln23_fu_271_p2 = ($signed(sext_ln23_reg_445) + $signed(zext_ln23_1_fu_267_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bias_address0 = bias_addr_reg_450;

assign co_fu_196_p2 = (co_0_reg_99 + 3'd1);

assign h_fu_261_p2 = (h_0_reg_110 + 5'd1);

assign icmp_ln13_fu_190_p2 = ((co_0_reg_99 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_255_p2 = ((h_0_reg_110 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_306_p2 = ((w_0_reg_122 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_322_p2 = ((m_0_reg_146 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_375_p2 = ((n_0_reg_169 == 3'd5) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln21_4_fu_414_p1;

assign m_fu_328_p2 = (m_0_reg_146 + 3'd1);

assign n_fu_381_p2 = (n_0_reg_169 + 3'd1);

assign output_r_address0 = zext_ln23_3_fu_428_p1;

assign output_r_d0 = tmp_reg_542;

assign p_shl3_cast_fu_280_p3 = {{trunc_ln23_fu_276_p1}, {5'd0}};

assign sext_ln23_1_fu_296_p1 = $signed(tmp_17_fu_288_p3);

assign sext_ln23_fu_251_p1 = $signed(sub_ln23_fu_245_p2);

assign sub_ln23_1_fu_300_p2 = ($signed(p_shl3_cast_fu_280_p3) - $signed(sext_ln23_1_fu_296_p1));

assign sub_ln23_fu_245_p2 = (zext_ln23_fu_241_p1 - zext_ln21_3_fu_223_p1);

assign tmp_15_fu_233_p3 = {{co_0_reg_99}, {5'd0}};

assign tmp_16_fu_407_p3 = {{add_ln21_reg_489}, {add_ln21_1_fu_401_p2}};

assign tmp_17_fu_288_p3 = {{add_ln23_fu_271_p2}, {2'd0}};

assign tmp_18_fu_347_p3 = {{add_ln21_3_fu_338_p2}, {2'd0}};

assign tmp_s_fu_211_p3 = {{co_0_reg_99}, {2'd0}};

assign trunc_ln23_fu_276_p1 = add_ln23_fu_271_p2[8:0];

assign w_fu_312_p2 = (w_0_reg_122 + 5'd1);

assign weights_0_address0 = zext_ln21_9_fu_396_p1;

assign zext_ln18_fu_318_p1 = m_0_reg_146;

assign zext_ln20_fu_371_p1 = n_0_reg_169;

assign zext_ln21_1_fu_207_p1 = co_0_reg_99;

assign zext_ln21_2_fu_219_p1 = tmp_s_fu_211_p3;

assign zext_ln21_3_fu_223_p1 = tmp_s_fu_211_p3;

assign zext_ln21_4_fu_414_p1 = tmp_16_fu_407_p3;

assign zext_ln21_5_fu_334_p1 = m_0_reg_146;

assign zext_ln21_6_fu_343_p1 = add_ln21_3_fu_338_p2;

assign zext_ln21_7_fu_355_p1 = tmp_18_fu_347_p3;

assign zext_ln21_8_fu_387_p1 = n_0_reg_169;

assign zext_ln21_9_fu_396_p1 = add_ln21_5_fu_391_p2;

assign zext_ln21_fu_202_p1 = co_0_reg_99;

assign zext_ln23_1_fu_267_p1 = h_0_reg_110;

assign zext_ln23_2_fu_419_p1 = w_0_reg_122;

assign zext_ln23_3_fu_428_p1 = add_ln23_1_reg_537;

assign zext_ln23_fu_241_p1 = tmp_15_fu_233_p3;

always @ (posedge ap_clk) begin
    sext_ln23_reg_445[1:0] <= 2'b00;
    sub_ln23_1_reg_463[1:0] <= 2'b00;
end

endmodule //i_convolution1
