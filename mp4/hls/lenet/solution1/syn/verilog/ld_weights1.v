// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ld_weights1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights1_address0,
        weights1_ce0,
        weights1_q0,
        weights1_buf_0_address0,
        weights1_buf_0_ce0,
        weights1_buf_0_we0,
        weights1_buf_0_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] weights1_address0;
output   weights1_ce0;
input  [31:0] weights1_q0;
output  [7:0] weights1_buf_0_address0;
output   weights1_buf_0_ce0;
output   weights1_buf_0_we0;
output  [31:0] weights1_buf_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weights1_ce0;
reg weights1_buf_0_ce0;
reg weights1_buf_0_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_92_p2;
reg   [2:0] i_reg_192;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln182_fu_114_p2;
reg   [5:0] add_ln182_reg_197;
wire   [0:0] icmp_ln179_fu_86_p2;
wire   [2:0] j_fu_126_p2;
reg   [2:0] j_reg_205;
wire    ap_CS_fsm_state3;
wire   [8:0] add_ln182_2_fu_157_p2;
reg   [8:0] add_ln182_2_reg_210;
wire   [0:0] icmp_ln180_fu_120_p2;
wire   [2:0] k_fu_169_p2;
reg   [2:0] k_reg_218;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln182_6_fu_184_p1;
reg   [63:0] zext_ln182_6_reg_223;
wire   [0:0] icmp_ln181_fu_163_p2;
reg   [2:0] i_0_reg_53;
reg   [2:0] j_0_reg_64;
reg   [2:0] k_0_reg_75;
wire    ap_CS_fsm_state5;
wire   [4:0] tmp_fu_102_p3;
wire   [5:0] zext_ln182_fu_98_p1;
wire   [5:0] zext_ln182_1_fu_110_p1;
wire   [5:0] zext_ln182_2_fu_132_p1;
wire   [5:0] add_ln182_1_fu_136_p2;
wire   [7:0] tmp_3_fu_145_p3;
wire   [8:0] zext_ln182_4_fu_153_p1;
wire   [8:0] zext_ln182_3_fu_141_p1;
wire   [8:0] zext_ln182_5_fu_175_p1;
wire   [8:0] add_ln182_3_fu_179_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln180_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_53 <= i_reg_192;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_53 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln181_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_64 <= j_reg_205;
    end else if (((icmp_ln179_fu_86_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_64 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln180_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_75 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_75 <= k_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln180_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln182_2_reg_210 <= add_ln182_2_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln179_fu_86_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln182_reg_197 <= add_ln182_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_192 <= i_fu_92_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_205 <= j_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_218 <= k_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln181_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln182_6_reg_223[8 : 0] <= zext_ln182_6_fu_184_p1[8 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln179_fu_86_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln179_fu_86_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights1_buf_0_ce0 = 1'b1;
    end else begin
        weights1_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights1_buf_0_we0 = 1'b1;
    end else begin
        weights1_buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights1_ce0 = 1'b1;
    end else begin
        weights1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln179_fu_86_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln180_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln181_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln182_1_fu_136_p2 = (zext_ln182_2_fu_132_p1 + add_ln182_reg_197);

assign add_ln182_2_fu_157_p2 = (zext_ln182_4_fu_153_p1 + zext_ln182_3_fu_141_p1);

assign add_ln182_3_fu_179_p2 = (add_ln182_2_reg_210 + zext_ln182_5_fu_175_p1);

assign add_ln182_fu_114_p2 = (zext_ln182_fu_98_p1 + zext_ln182_1_fu_110_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign i_fu_92_p2 = (i_0_reg_53 + 3'd1);

assign icmp_ln179_fu_86_p2 = ((i_0_reg_53 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_120_p2 = ((j_0_reg_64 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln181_fu_163_p2 = ((k_0_reg_75 == 3'd5) ? 1'b1 : 1'b0);

assign j_fu_126_p2 = (j_0_reg_64 + 3'd1);

assign k_fu_169_p2 = (k_0_reg_75 + 3'd1);

assign tmp_3_fu_145_p3 = {{add_ln182_1_fu_136_p2}, {2'd0}};

assign tmp_fu_102_p3 = {{i_0_reg_53}, {2'd0}};

assign weights1_address0 = zext_ln182_6_fu_184_p1;

assign weights1_buf_0_address0 = zext_ln182_6_reg_223;

assign weights1_buf_0_d0 = weights1_q0;

assign zext_ln182_1_fu_110_p1 = tmp_fu_102_p3;

assign zext_ln182_2_fu_132_p1 = j_0_reg_64;

assign zext_ln182_3_fu_141_p1 = add_ln182_1_fu_136_p2;

assign zext_ln182_4_fu_153_p1 = tmp_3_fu_145_p3;

assign zext_ln182_5_fu_175_p1 = k_0_reg_75;

assign zext_ln182_6_fu_184_p1 = add_ln182_3_fu_179_p2;

assign zext_ln182_fu_98_p1 = i_0_reg_53;

always @ (posedge ap_clk) begin
    zext_ln182_6_reg_223[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //ld_weights1
