-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weights1_ce0 : OUT STD_LOGIC;
    weights1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias1_ce0 : OUT STD_LOGIC;
    bias1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weights3_ce0 : OUT STD_LOGIC;
    weights3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias3_ce0 : OUT STD_LOGIC;
    bias3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights5_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    weights5_ce0 : OUT STD_LOGIC;
    weights5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias5_ce0 : OUT STD_LOGIC;
    bias5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weights6_ce0 : OUT STD_LOGIC;
    weights6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias6_ce0 : OUT STD_LOGIC;
    bias6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of lenet_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lenet_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.685200,HLS_SYN_LAT=5149662,HLS_SYN_TPT=none,HLS_SYN_MEM=170,HLS_SYN_DSP=20,HLS_SYN_FF=4733,HLS_SYN_LUT=10387,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (59 downto 0) := "000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (59 downto 0) := "000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (59 downto 0) := "000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (59 downto 0) := "000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (59 downto 0) := "000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (59 downto 0) := "000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (59 downto 0) := "000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (59 downto 0) := "000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (59 downto 0) := "000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (59 downto 0) := "001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (59 downto 0) := "010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (59 downto 0) := "100000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input6_inter_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal i_fu_666_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_1058 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln172_fu_680_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln172_reg_1063 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln171_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_690_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_1071 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln173_1_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_1_reg_1076 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln172_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_716_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1089 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln215_fu_746_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln215_reg_1094 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln213_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_758_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_1102 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sext_ln215_fu_773_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln215_reg_1107 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln214_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_784_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_1120 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln222_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln222_reg_1125 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln221_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_10_fu_801_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_10_reg_1138 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln228_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln228_reg_1143 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln227_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_11_fu_818_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_11_reg_1156 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln234_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln234_reg_1161 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln233_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_12_fu_835_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_12_reg_1174 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln240_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln240_reg_1179 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln239_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_13_fu_852_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_13_reg_1192 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal input6_inter_0_0_a_reg_1197 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln141_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln142_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln142_reg_1202 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln142_1_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln142_1_reg_1207 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_fu_909_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_reg_1218 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal zext_ln151_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln151_reg_1223 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln149_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln154_fu_944_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln154_reg_1228 : STD_LOGIC_VECTOR (11 downto 0);
    signal output_buf_addr_reg_1233 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_956_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_reg_1241 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal icmp_ln152_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights6_buf_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights6_buf_0_0_l_reg_1261 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_1266 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_638_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal bias6_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias6_buf_load_reg_1276 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal tmp_i2_reg_1281 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal i_14_fu_987_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_14_reg_1289 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal output_buf_addr_1_reg_1294 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln163_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal icmp_ln164_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_reg_1304 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_1_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_1_reg_1309 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_15_fu_1044_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_15_reg_1320 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal zext_ln246_fu_1050_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln246_reg_1325 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln245_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_buf_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_buf_0_ce0 : STD_LOGIC;
    signal input_buf_0_we0 : STD_LOGIC;
    signal input_buf_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights1_buf_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights1_buf_0_ce0 : STD_LOGIC;
    signal weights1_buf_0_we0 : STD_LOGIC;
    signal weights1_buf_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights3_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights3_buf_ce0 : STD_LOGIC;
    signal weights3_buf_we0 : STD_LOGIC;
    signal weights3_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights5_buf_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights5_buf_ce0 : STD_LOGIC;
    signal weights5_buf_we0 : STD_LOGIC;
    signal weights5_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights6_buf_0_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal weights6_buf_0_0_ce0 : STD_LOGIC;
    signal weights6_buf_0_0_we0 : STD_LOGIC;
    signal bias1_buf_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bias1_buf_ce0 : STD_LOGIC;
    signal bias1_buf_we0 : STD_LOGIC;
    signal bias1_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias3_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bias3_buf_ce0 : STD_LOGIC;
    signal bias3_buf_we0 : STD_LOGIC;
    signal bias3_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias5_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias5_buf_ce0 : STD_LOGIC;
    signal bias5_buf_we0 : STD_LOGIC;
    signal bias5_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias6_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bias6_buf_ce0 : STD_LOGIC;
    signal bias6_buf_we0 : STD_LOGIC;
    signal output_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_buf_ce0 : STD_LOGIC;
    signal output_buf_we0 : STD_LOGIC;
    signal output_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_inter_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal input2_inter_ce0 : STD_LOGIC;
    signal input2_inter_we0 : STD_LOGIC;
    signal input2_inter_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_inter_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input3_inter_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal input3_inter_ce0 : STD_LOGIC;
    signal input3_inter_we0 : STD_LOGIC;
    signal input3_inter_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input3_inter_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input4_inter_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal input4_inter_ce0 : STD_LOGIC;
    signal input4_inter_we0 : STD_LOGIC;
    signal input4_inter_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input4_inter_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input5_inter_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal input5_inter_ce0 : STD_LOGIC;
    signal input5_inter_we0 : STD_LOGIC;
    signal input5_inter_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input5_inter_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input6_inter_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal input6_inter_0_0_ce0 : STD_LOGIC;
    signal input6_inter_0_0_we0 : STD_LOGIC;
    signal input6_inter_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_convolution3_fu_561_ap_start : STD_LOGIC;
    signal grp_i_convolution3_fu_561_ap_done : STD_LOGIC;
    signal grp_i_convolution3_fu_561_ap_idle : STD_LOGIC;
    signal grp_i_convolution3_fu_561_ap_ready : STD_LOGIC;
    signal grp_i_convolution3_fu_561_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_i_convolution3_fu_561_input_r_ce0 : STD_LOGIC;
    signal grp_i_convolution3_fu_561_weights_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_i_convolution3_fu_561_weights_ce0 : STD_LOGIC;
    signal grp_i_convolution3_fu_561_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_convolution3_fu_561_bias_ce0 : STD_LOGIC;
    signal grp_i_convolution3_fu_561_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_i_convolution3_fu_561_output_r_ce0 : STD_LOGIC;
    signal grp_i_convolution3_fu_561_output_r_we0 : STD_LOGIC;
    signal grp_i_convolution3_fu_561_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_convolution5_fu_569_ap_start : STD_LOGIC;
    signal grp_i_convolution5_fu_569_ap_done : STD_LOGIC;
    signal grp_i_convolution5_fu_569_ap_idle : STD_LOGIC;
    signal grp_i_convolution5_fu_569_ap_ready : STD_LOGIC;
    signal grp_i_convolution5_fu_569_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_i_convolution5_fu_569_input_r_ce0 : STD_LOGIC;
    signal grp_i_convolution5_fu_569_weights_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_i_convolution5_fu_569_weights_ce0 : STD_LOGIC;
    signal grp_i_convolution5_fu_569_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_i_convolution5_fu_569_bias_ce0 : STD_LOGIC;
    signal grp_i_convolution5_fu_569_output_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_i_convolution5_fu_569_output_0_0_ce0 : STD_LOGIC;
    signal grp_i_convolution5_fu_569_output_0_0_we0 : STD_LOGIC;
    signal grp_i_convolution5_fu_569_output_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_convolution1_fu_577_ap_start : STD_LOGIC;
    signal grp_i_convolution1_fu_577_ap_done : STD_LOGIC;
    signal grp_i_convolution1_fu_577_ap_idle : STD_LOGIC;
    signal grp_i_convolution1_fu_577_ap_ready : STD_LOGIC;
    signal grp_i_convolution1_fu_577_input_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_i_convolution1_fu_577_input_0_ce0 : STD_LOGIC;
    signal grp_i_convolution1_fu_577_weights_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_i_convolution1_fu_577_weights_0_ce0 : STD_LOGIC;
    signal grp_i_convolution1_fu_577_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_i_convolution1_fu_577_bias_ce0 : STD_LOGIC;
    signal grp_i_convolution1_fu_577_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_i_convolution1_fu_577_output_r_ce0 : STD_LOGIC;
    signal grp_i_convolution1_fu_577_output_r_we0 : STD_LOGIC;
    signal grp_i_convolution1_fu_577_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_max_pooling2_fu_585_ap_start : STD_LOGIC;
    signal grp_i_max_pooling2_fu_585_ap_done : STD_LOGIC;
    signal grp_i_max_pooling2_fu_585_ap_idle : STD_LOGIC;
    signal grp_i_max_pooling2_fu_585_ap_ready : STD_LOGIC;
    signal grp_i_max_pooling2_fu_585_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_i_max_pooling2_fu_585_input_r_ce0 : STD_LOGIC;
    signal grp_i_max_pooling2_fu_585_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_i_max_pooling2_fu_585_output_r_ce0 : STD_LOGIC;
    signal grp_i_max_pooling2_fu_585_output_r_we0 : STD_LOGIC;
    signal grp_i_max_pooling2_fu_585_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_max_pooling4_fu_591_ap_start : STD_LOGIC;
    signal grp_i_max_pooling4_fu_591_ap_done : STD_LOGIC;
    signal grp_i_max_pooling4_fu_591_ap_idle : STD_LOGIC;
    signal grp_i_max_pooling4_fu_591_ap_ready : STD_LOGIC;
    signal grp_i_max_pooling4_fu_591_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_i_max_pooling4_fu_591_input_r_ce0 : STD_LOGIC;
    signal grp_i_max_pooling4_fu_591_output_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_i_max_pooling4_fu_591_output_r_ce0 : STD_LOGIC;
    signal grp_i_max_pooling4_fu_591_output_r_we0 : STD_LOGIC;
    signal grp_i_max_pooling4_fu_591_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_relu1_fu_597_ap_start : STD_LOGIC;
    signal grp_i_relu1_fu_597_ap_done : STD_LOGIC;
    signal grp_i_relu1_fu_597_ap_idle : STD_LOGIC;
    signal grp_i_relu1_fu_597_ap_ready : STD_LOGIC;
    signal grp_i_relu1_fu_597_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_i_relu1_fu_597_input_r_ce0 : STD_LOGIC;
    signal grp_i_relu1_fu_597_input_r_we0 : STD_LOGIC;
    signal grp_i_relu1_fu_597_input_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_relu3_fu_602_ap_start : STD_LOGIC;
    signal grp_i_relu3_fu_602_ap_done : STD_LOGIC;
    signal grp_i_relu3_fu_602_ap_idle : STD_LOGIC;
    signal grp_i_relu3_fu_602_ap_ready : STD_LOGIC;
    signal grp_i_relu3_fu_602_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_i_relu3_fu_602_input_r_ce0 : STD_LOGIC;
    signal grp_i_relu3_fu_602_input_r_we0 : STD_LOGIC;
    signal grp_i_relu3_fu_602_input_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_relu4_fu_607_ap_start : STD_LOGIC;
    signal grp_i_relu4_fu_607_ap_done : STD_LOGIC;
    signal grp_i_relu4_fu_607_ap_idle : STD_LOGIC;
    signal grp_i_relu4_fu_607_ap_ready : STD_LOGIC;
    signal grp_i_relu4_fu_607_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_i_relu4_fu_607_input_r_ce0 : STD_LOGIC;
    signal grp_i_relu4_fu_607_input_r_we0 : STD_LOGIC;
    signal grp_i_relu4_fu_607_input_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_relu2_fu_612_ap_start : STD_LOGIC;
    signal grp_i_relu2_fu_612_ap_done : STD_LOGIC;
    signal grp_i_relu2_fu_612_ap_idle : STD_LOGIC;
    signal grp_i_relu2_fu_612_ap_ready : STD_LOGIC;
    signal grp_i_relu2_fu_612_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_i_relu2_fu_612_input_r_ce0 : STD_LOGIC;
    signal grp_i_relu2_fu_612_input_r_we0 : STD_LOGIC;
    signal grp_i_relu2_fu_612_input_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights5_fu_617_ap_start : STD_LOGIC;
    signal grp_ld_weights5_fu_617_ap_done : STD_LOGIC;
    signal grp_ld_weights5_fu_617_ap_idle : STD_LOGIC;
    signal grp_ld_weights5_fu_617_ap_ready : STD_LOGIC;
    signal grp_ld_weights5_fu_617_weights5_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_ld_weights5_fu_617_weights5_ce0 : STD_LOGIC;
    signal grp_ld_weights5_fu_617_weights5_buf_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_ld_weights5_fu_617_weights5_buf_ce0 : STD_LOGIC;
    signal grp_ld_weights5_fu_617_weights5_buf_we0 : STD_LOGIC;
    signal grp_ld_weights5_fu_617_weights5_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights3_fu_624_ap_start : STD_LOGIC;
    signal grp_ld_weights3_fu_624_ap_done : STD_LOGIC;
    signal grp_ld_weights3_fu_624_ap_idle : STD_LOGIC;
    signal grp_ld_weights3_fu_624_ap_ready : STD_LOGIC;
    signal grp_ld_weights3_fu_624_weights3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ld_weights3_fu_624_weights3_ce0 : STD_LOGIC;
    signal grp_ld_weights3_fu_624_weights3_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ld_weights3_fu_624_weights3_buf_ce0 : STD_LOGIC;
    signal grp_ld_weights3_fu_624_weights3_buf_we0 : STD_LOGIC;
    signal grp_ld_weights3_fu_624_weights3_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights1_fu_631_ap_start : STD_LOGIC;
    signal grp_ld_weights1_fu_631_ap_done : STD_LOGIC;
    signal grp_ld_weights1_fu_631_ap_idle : STD_LOGIC;
    signal grp_ld_weights1_fu_631_ap_ready : STD_LOGIC;
    signal grp_ld_weights1_fu_631_weights1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ld_weights1_fu_631_weights1_ce0 : STD_LOGIC;
    signal grp_ld_weights1_fu_631_weights1_buf_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ld_weights1_fu_631_weights1_buf_0_ce0 : STD_LOGIC;
    signal grp_ld_weights1_fu_631_weights1_buf_0_we0 : STD_LOGIC;
    signal grp_ld_weights1_fu_631_weights1_buf_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_406 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_i_reg_417 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_0_i10_reg_428 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal j_0_i12_reg_439 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_0_i16_reg_450 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_0_i18_reg_461 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_0_i20_reg_472 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_0_i22_reg_483 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_0_i24_reg_494 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal n_0_i_reg_505 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal empty_14_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_0_i_reg_528 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_i29_reg_539 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal i_0_i35_reg_550 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_i_convolution3_fu_561_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_i_convolution5_fu_569_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_i_convolution1_fu_577_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_i_max_pooling2_fu_585_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_i_max_pooling4_fu_591_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_i_relu1_fu_597_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_i_relu3_fu_602_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_i_relu4_fu_607_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_i_relu2_fu_612_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_ld_weights5_fu_617_ap_start_reg : STD_LOGIC := '0';
    signal grp_ld_weights3_fu_624_ap_start_reg : STD_LOGIC := '0';
    signal grp_ld_weights1_fu_631_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln142_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln154_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln154_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln164_fu_993_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln142_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln164_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_647_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_672_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln173_fu_696_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln173_fu_700_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_722_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_734_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln215_fu_730_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln215_1_fu_742_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln215_2_fu_764_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_fu_768_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln142_fu_863_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_867_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln142_fu_877_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln142_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_920_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_932_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln154_1_fu_928_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln154_2_fu_940_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln154_3_fu_967_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln154_fu_971_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln164_fu_998_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1002_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln164_fu_1012_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln164_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (59 downto 0);

    component i_convolution3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_ce0 : OUT STD_LOGIC;
        weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component i_convolution5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights_ce0 : OUT STD_LOGIC;
        weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_0_0_ce0 : OUT STD_LOGIC;
        output_0_0_we0 : OUT STD_LOGIC;
        output_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component i_convolution1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weights_0_ce0 : OUT STD_LOGIC;
        weights_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component i_max_pooling2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component i_max_pooling4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component i_relu1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_we0 : OUT STD_LOGIC;
        input_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component i_relu3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_we0 : OUT STD_LOGIC;
        input_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component i_relu4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_we0 : OUT STD_LOGIC;
        input_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component i_relu2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_we0 : OUT STD_LOGIC;
        input_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ld_weights5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weights5_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights5_ce0 : OUT STD_LOGIC;
        weights5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights5_buf_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights5_buf_ce0 : OUT STD_LOGIC;
        weights5_buf_we0 : OUT STD_LOGIC;
        weights5_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ld_weights3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weights3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights3_ce0 : OUT STD_LOGIC;
        weights3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights3_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights3_buf_ce0 : OUT STD_LOGIC;
        weights3_buf_we0 : OUT STD_LOGIC;
        weights3_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ld_weights1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weights1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weights1_ce0 : OUT STD_LOGIC;
        weights1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights1_buf_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weights1_buf_0_ce0 : OUT STD_LOGIC;
        weights1_buf_0_we0 : OUT STD_LOGIC;
        weights1_buf_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_fcmp_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_top_input_beOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_weightsfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_weightsg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_weightshbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_weightsibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_bias1_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_bias3_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_bias5_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_bias6_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_input2_kbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_input3_lbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_input4_mb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_input5_ncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_buf_0_U : component lenet_top_input_beOg
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_buf_0_address0,
        ce0 => input_buf_0_ce0,
        we0 => input_buf_0_we0,
        d0 => input_r_q0,
        q0 => input_buf_0_q0);

    weights1_buf_0_U : component lenet_top_weightsfYi
    generic map (
        DataWidth => 32,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights1_buf_0_address0,
        ce0 => weights1_buf_0_ce0,
        we0 => weights1_buf_0_we0,
        d0 => grp_ld_weights1_fu_631_weights1_buf_0_d0,
        q0 => weights1_buf_0_q0);

    weights3_buf_U : component lenet_top_weightsg8j
    generic map (
        DataWidth => 32,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights3_buf_address0,
        ce0 => weights3_buf_ce0,
        we0 => weights3_buf_we0,
        d0 => grp_ld_weights3_fu_624_weights3_buf_d0,
        q0 => weights3_buf_q0);

    weights5_buf_U : component lenet_top_weightshbi
    generic map (
        DataWidth => 32,
        AddressRange => 48000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights5_buf_address0,
        ce0 => weights5_buf_ce0,
        we0 => weights5_buf_we0,
        d0 => grp_ld_weights5_fu_617_weights5_buf_d0,
        q0 => weights5_buf_q0);

    weights6_buf_0_0_U : component lenet_top_weightsibs
    generic map (
        DataWidth => 32,
        AddressRange => 1200,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights6_buf_0_0_address0,
        ce0 => weights6_buf_0_0_ce0,
        we0 => weights6_buf_0_0_we0,
        d0 => weights6_q0,
        q0 => weights6_buf_0_0_q0);

    bias1_buf_U : component lenet_top_bias1_buf
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias1_buf_address0,
        ce0 => bias1_buf_ce0,
        we0 => bias1_buf_we0,
        d0 => bias1_q0,
        q0 => bias1_buf_q0);

    bias3_buf_U : component lenet_top_bias3_buf
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias3_buf_address0,
        ce0 => bias3_buf_ce0,
        we0 => bias3_buf_we0,
        d0 => bias3_q0,
        q0 => bias3_buf_q0);

    bias5_buf_U : component lenet_top_bias5_buf
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias5_buf_address0,
        ce0 => bias5_buf_ce0,
        we0 => bias5_buf_we0,
        d0 => bias5_q0,
        q0 => bias5_buf_q0);

    bias6_buf_U : component lenet_top_bias6_buf
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias6_buf_address0,
        ce0 => bias6_buf_ce0,
        we0 => bias6_buf_we0,
        d0 => bias6_q0,
        q0 => bias6_buf_q0);

    output_buf_U : component lenet_top_bias6_buf
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_buf_address0,
        ce0 => output_buf_ce0,
        we0 => output_buf_we0,
        d0 => output_buf_d0,
        q0 => output_buf_q0);

    input2_inter_U : component lenet_top_input2_kbM
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input2_inter_address0,
        ce0 => input2_inter_ce0,
        we0 => input2_inter_we0,
        d0 => input2_inter_d0,
        q0 => input2_inter_q0);

    input3_inter_U : component lenet_top_input3_lbW
    generic map (
        DataWidth => 32,
        AddressRange => 1176,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input3_inter_address0,
        ce0 => input3_inter_ce0,
        we0 => input3_inter_we0,
        d0 => input3_inter_d0,
        q0 => input3_inter_q0);

    input4_inter_U : component lenet_top_input4_mb6
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input4_inter_address0,
        ce0 => input4_inter_ce0,
        we0 => input4_inter_we0,
        d0 => input4_inter_d0,
        q0 => input4_inter_q0);

    input5_inter_U : component lenet_top_input5_ncg
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input5_inter_address0,
        ce0 => input5_inter_ce0,
        we0 => input5_inter_we0,
        d0 => input5_inter_d0,
        q0 => input5_inter_q0);

    input6_inter_0_0_U : component lenet_top_bias5_buf
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input6_inter_0_0_address0,
        ce0 => input6_inter_0_0_ce0,
        we0 => input6_inter_0_0_we0,
        d0 => input6_inter_0_0_d0,
        q0 => input6_inter_0_0_q0);

    grp_i_convolution3_fu_561 : component i_convolution3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_i_convolution3_fu_561_ap_start,
        ap_done => grp_i_convolution3_fu_561_ap_done,
        ap_idle => grp_i_convolution3_fu_561_ap_idle,
        ap_ready => grp_i_convolution3_fu_561_ap_ready,
        input_r_address0 => grp_i_convolution3_fu_561_input_r_address0,
        input_r_ce0 => grp_i_convolution3_fu_561_input_r_ce0,
        input_r_q0 => input3_inter_q0,
        weights_address0 => grp_i_convolution3_fu_561_weights_address0,
        weights_ce0 => grp_i_convolution3_fu_561_weights_ce0,
        weights_q0 => weights3_buf_q0,
        bias_address0 => grp_i_convolution3_fu_561_bias_address0,
        bias_ce0 => grp_i_convolution3_fu_561_bias_ce0,
        bias_q0 => bias3_buf_q0,
        output_r_address0 => grp_i_convolution3_fu_561_output_r_address0,
        output_r_ce0 => grp_i_convolution3_fu_561_output_r_ce0,
        output_r_we0 => grp_i_convolution3_fu_561_output_r_we0,
        output_r_d0 => grp_i_convolution3_fu_561_output_r_d0);

    grp_i_convolution5_fu_569 : component i_convolution5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_i_convolution5_fu_569_ap_start,
        ap_done => grp_i_convolution5_fu_569_ap_done,
        ap_idle => grp_i_convolution5_fu_569_ap_idle,
        ap_ready => grp_i_convolution5_fu_569_ap_ready,
        input_r_address0 => grp_i_convolution5_fu_569_input_r_address0,
        input_r_ce0 => grp_i_convolution5_fu_569_input_r_ce0,
        input_r_q0 => input5_inter_q0,
        weights_address0 => grp_i_convolution5_fu_569_weights_address0,
        weights_ce0 => grp_i_convolution5_fu_569_weights_ce0,
        weights_q0 => weights5_buf_q0,
        bias_address0 => grp_i_convolution5_fu_569_bias_address0,
        bias_ce0 => grp_i_convolution5_fu_569_bias_ce0,
        bias_q0 => bias5_buf_q0,
        output_0_0_address0 => grp_i_convolution5_fu_569_output_0_0_address0,
        output_0_0_ce0 => grp_i_convolution5_fu_569_output_0_0_ce0,
        output_0_0_we0 => grp_i_convolution5_fu_569_output_0_0_we0,
        output_0_0_d0 => grp_i_convolution5_fu_569_output_0_0_d0);

    grp_i_convolution1_fu_577 : component i_convolution1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_i_convolution1_fu_577_ap_start,
        ap_done => grp_i_convolution1_fu_577_ap_done,
        ap_idle => grp_i_convolution1_fu_577_ap_idle,
        ap_ready => grp_i_convolution1_fu_577_ap_ready,
        input_0_address0 => grp_i_convolution1_fu_577_input_0_address0,
        input_0_ce0 => grp_i_convolution1_fu_577_input_0_ce0,
        input_0_q0 => input_buf_0_q0,
        weights_0_address0 => grp_i_convolution1_fu_577_weights_0_address0,
        weights_0_ce0 => grp_i_convolution1_fu_577_weights_0_ce0,
        weights_0_q0 => weights1_buf_0_q0,
        bias_address0 => grp_i_convolution1_fu_577_bias_address0,
        bias_ce0 => grp_i_convolution1_fu_577_bias_ce0,
        bias_q0 => bias1_buf_q0,
        output_r_address0 => grp_i_convolution1_fu_577_output_r_address0,
        output_r_ce0 => grp_i_convolution1_fu_577_output_r_ce0,
        output_r_we0 => grp_i_convolution1_fu_577_output_r_we0,
        output_r_d0 => grp_i_convolution1_fu_577_output_r_d0);

    grp_i_max_pooling2_fu_585 : component i_max_pooling2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_i_max_pooling2_fu_585_ap_start,
        ap_done => grp_i_max_pooling2_fu_585_ap_done,
        ap_idle => grp_i_max_pooling2_fu_585_ap_idle,
        ap_ready => grp_i_max_pooling2_fu_585_ap_ready,
        input_r_address0 => grp_i_max_pooling2_fu_585_input_r_address0,
        input_r_ce0 => grp_i_max_pooling2_fu_585_input_r_ce0,
        input_r_q0 => input2_inter_q0,
        output_r_address0 => grp_i_max_pooling2_fu_585_output_r_address0,
        output_r_ce0 => grp_i_max_pooling2_fu_585_output_r_ce0,
        output_r_we0 => grp_i_max_pooling2_fu_585_output_r_we0,
        output_r_d0 => grp_i_max_pooling2_fu_585_output_r_d0);

    grp_i_max_pooling4_fu_591 : component i_max_pooling4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_i_max_pooling4_fu_591_ap_start,
        ap_done => grp_i_max_pooling4_fu_591_ap_done,
        ap_idle => grp_i_max_pooling4_fu_591_ap_idle,
        ap_ready => grp_i_max_pooling4_fu_591_ap_ready,
        input_r_address0 => grp_i_max_pooling4_fu_591_input_r_address0,
        input_r_ce0 => grp_i_max_pooling4_fu_591_input_r_ce0,
        input_r_q0 => input4_inter_q0,
        output_r_address0 => grp_i_max_pooling4_fu_591_output_r_address0,
        output_r_ce0 => grp_i_max_pooling4_fu_591_output_r_ce0,
        output_r_we0 => grp_i_max_pooling4_fu_591_output_r_we0,
        output_r_d0 => grp_i_max_pooling4_fu_591_output_r_d0);

    grp_i_relu1_fu_597 : component i_relu1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_i_relu1_fu_597_ap_start,
        ap_done => grp_i_relu1_fu_597_ap_done,
        ap_idle => grp_i_relu1_fu_597_ap_idle,
        ap_ready => grp_i_relu1_fu_597_ap_ready,
        input_r_address0 => grp_i_relu1_fu_597_input_r_address0,
        input_r_ce0 => grp_i_relu1_fu_597_input_r_ce0,
        input_r_we0 => grp_i_relu1_fu_597_input_r_we0,
        input_r_d0 => grp_i_relu1_fu_597_input_r_d0,
        input_r_q0 => input2_inter_q0);

    grp_i_relu3_fu_602 : component i_relu3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_i_relu3_fu_602_ap_start,
        ap_done => grp_i_relu3_fu_602_ap_done,
        ap_idle => grp_i_relu3_fu_602_ap_idle,
        ap_ready => grp_i_relu3_fu_602_ap_ready,
        input_r_address0 => grp_i_relu3_fu_602_input_r_address0,
        input_r_ce0 => grp_i_relu3_fu_602_input_r_ce0,
        input_r_we0 => grp_i_relu3_fu_602_input_r_we0,
        input_r_d0 => grp_i_relu3_fu_602_input_r_d0,
        input_r_q0 => input4_inter_q0);

    grp_i_relu4_fu_607 : component i_relu4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_i_relu4_fu_607_ap_start,
        ap_done => grp_i_relu4_fu_607_ap_done,
        ap_idle => grp_i_relu4_fu_607_ap_idle,
        ap_ready => grp_i_relu4_fu_607_ap_ready,
        input_r_address0 => grp_i_relu4_fu_607_input_r_address0,
        input_r_ce0 => grp_i_relu4_fu_607_input_r_ce0,
        input_r_we0 => grp_i_relu4_fu_607_input_r_we0,
        input_r_d0 => grp_i_relu4_fu_607_input_r_d0,
        input_r_q0 => input5_inter_q0);

    grp_i_relu2_fu_612 : component i_relu2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_i_relu2_fu_612_ap_start,
        ap_done => grp_i_relu2_fu_612_ap_done,
        ap_idle => grp_i_relu2_fu_612_ap_idle,
        ap_ready => grp_i_relu2_fu_612_ap_ready,
        input_r_address0 => grp_i_relu2_fu_612_input_r_address0,
        input_r_ce0 => grp_i_relu2_fu_612_input_r_ce0,
        input_r_we0 => grp_i_relu2_fu_612_input_r_we0,
        input_r_d0 => grp_i_relu2_fu_612_input_r_d0,
        input_r_q0 => input3_inter_q0);

    grp_ld_weights5_fu_617 : component ld_weights5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ld_weights5_fu_617_ap_start,
        ap_done => grp_ld_weights5_fu_617_ap_done,
        ap_idle => grp_ld_weights5_fu_617_ap_idle,
        ap_ready => grp_ld_weights5_fu_617_ap_ready,
        weights5_address0 => grp_ld_weights5_fu_617_weights5_address0,
        weights5_ce0 => grp_ld_weights5_fu_617_weights5_ce0,
        weights5_q0 => weights5_q0,
        weights5_buf_address0 => grp_ld_weights5_fu_617_weights5_buf_address0,
        weights5_buf_ce0 => grp_ld_weights5_fu_617_weights5_buf_ce0,
        weights5_buf_we0 => grp_ld_weights5_fu_617_weights5_buf_we0,
        weights5_buf_d0 => grp_ld_weights5_fu_617_weights5_buf_d0);

    grp_ld_weights3_fu_624 : component ld_weights3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ld_weights3_fu_624_ap_start,
        ap_done => grp_ld_weights3_fu_624_ap_done,
        ap_idle => grp_ld_weights3_fu_624_ap_idle,
        ap_ready => grp_ld_weights3_fu_624_ap_ready,
        weights3_address0 => grp_ld_weights3_fu_624_weights3_address0,
        weights3_ce0 => grp_ld_weights3_fu_624_weights3_ce0,
        weights3_q0 => weights3_q0,
        weights3_buf_address0 => grp_ld_weights3_fu_624_weights3_buf_address0,
        weights3_buf_ce0 => grp_ld_weights3_fu_624_weights3_buf_ce0,
        weights3_buf_we0 => grp_ld_weights3_fu_624_weights3_buf_we0,
        weights3_buf_d0 => grp_ld_weights3_fu_624_weights3_buf_d0);

    grp_ld_weights1_fu_631 : component ld_weights1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ld_weights1_fu_631_ap_start,
        ap_done => grp_ld_weights1_fu_631_ap_done,
        ap_idle => grp_ld_weights1_fu_631_ap_idle,
        ap_ready => grp_ld_weights1_fu_631_ap_ready,
        weights1_address0 => grp_ld_weights1_fu_631_weights1_address0,
        weights1_ce0 => grp_ld_weights1_fu_631_weights1_ce0,
        weights1_q0 => weights1_q0,
        weights1_buf_0_address0 => grp_ld_weights1_fu_631_weights1_buf_0_address0,
        weights1_buf_0_ce0 => grp_ld_weights1_fu_631_weights1_buf_0_ce0,
        weights1_buf_0_we0 => grp_ld_weights1_fu_631_weights1_buf_0_we0,
        weights1_buf_0_d0 => grp_ld_weights1_fu_631_weights1_buf_0_d0);

    lenet_top_fadd_32bkb_U42 : component lenet_top_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_14_reg_516,
        din1 => grp_fu_638_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_638_p2);

    lenet_top_fmul_32cud_U43 : component lenet_top_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights6_buf_0_0_l_reg_1261,
        din1 => reg_654,
        ce => ap_const_logic_1,
        dout => grp_fu_643_p2);

    lenet_top_fcmp_32dEe_U44 : component lenet_top_fcmp_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_647_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_647_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_i_convolution1_fu_577_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_i_convolution1_fu_577_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln239_fu_829_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    grp_i_convolution1_fu_577_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_convolution1_fu_577_ap_ready = ap_const_logic_1)) then 
                    grp_i_convolution1_fu_577_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_i_convolution3_fu_561_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_i_convolution3_fu_561_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    grp_i_convolution3_fu_561_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_convolution3_fu_561_ap_ready = ap_const_logic_1)) then 
                    grp_i_convolution3_fu_561_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_i_convolution5_fu_569_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_i_convolution5_fu_569_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    grp_i_convolution5_fu_569_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_convolution5_fu_569_ap_ready = ap_const_logic_1)) then 
                    grp_i_convolution5_fu_569_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_i_max_pooling2_fu_585_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_i_max_pooling2_fu_585_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_i_max_pooling2_fu_585_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_max_pooling2_fu_585_ap_ready = ap_const_logic_1)) then 
                    grp_i_max_pooling2_fu_585_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_i_max_pooling4_fu_591_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_i_max_pooling4_fu_591_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    grp_i_max_pooling4_fu_591_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_max_pooling4_fu_591_ap_ready = ap_const_logic_1)) then 
                    grp_i_max_pooling4_fu_591_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_i_relu1_fu_597_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_i_relu1_fu_597_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    grp_i_relu1_fu_597_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_relu1_fu_597_ap_ready = ap_const_logic_1)) then 
                    grp_i_relu1_fu_597_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_i_relu2_fu_612_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_i_relu2_fu_612_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    grp_i_relu2_fu_612_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_relu2_fu_612_ap_ready = ap_const_logic_1)) then 
                    grp_i_relu2_fu_612_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_i_relu3_fu_602_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_i_relu3_fu_602_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_i_relu3_fu_602_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_relu3_fu_602_ap_ready = ap_const_logic_1)) then 
                    grp_i_relu3_fu_602_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_i_relu4_fu_607_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_i_relu4_fu_607_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    grp_i_relu4_fu_607_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_relu4_fu_607_ap_ready = ap_const_logic_1)) then 
                    grp_i_relu4_fu_607_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ld_weights1_fu_631_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ld_weights1_fu_631_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_660_p2 = ap_const_lv1_1))) then 
                    grp_ld_weights1_fu_631_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ld_weights1_fu_631_ap_ready = ap_const_logic_1)) then 
                    grp_ld_weights1_fu_631_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ld_weights3_fu_624_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ld_weights3_fu_624_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_660_p2 = ap_const_lv1_1))) then 
                    grp_ld_weights3_fu_624_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ld_weights3_fu_624_ap_ready = ap_const_logic_1)) then 
                    grp_ld_weights3_fu_624_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ld_weights5_fu_617_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ld_weights5_fu_617_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_660_p2 = ap_const_lv1_1))) then 
                    grp_ld_weights5_fu_617_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ld_weights5_fu_617_ap_ready = ap_const_logic_1)) then 
                    grp_ld_weights5_fu_617_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_i_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                c_0_i_reg_528 <= c_reg_1241;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln149_fu_903_p2 = ap_const_lv1_0))) then 
                c_0_i_reg_528 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    empty_14_reg_516_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                empty_14_reg_516 <= grp_fu_638_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln149_fu_903_p2 = ap_const_lv1_0))) then 
                empty_14_reg_516 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_i10_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln214_fu_752_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_0_i10_reg_428 <= i_2_reg_1089;
            elsif (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_i10_reg_428 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i16_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln213_fu_710_p2 = ap_const_lv1_1))) then 
                i_0_i16_reg_450 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_0_i16_reg_450 <= i_9_reg_1120;
            end if; 
        end if;
    end process;

    i_0_i18_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_fu_778_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_0_i18_reg_461 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_0_i18_reg_461 <= i_10_reg_1138;
            end if; 
        end if;
    end process;

    i_0_i20_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln227_fu_795_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_0_i20_reg_472 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_0_i20_reg_472 <= i_11_reg_1156;
            end if; 
        end if;
    end process;

    i_0_i22_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln233_fu_812_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_0_i22_reg_483 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_0_i22_reg_483 <= i_12_reg_1174;
            end if; 
        end if;
    end process;

    i_0_i24_reg_494_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                i_0_i24_reg_494 <= i_13_reg_1192;
            elsif (((grp_i_convolution5_fu_569_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                i_0_i24_reg_494 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_0_i29_reg_539_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln149_fu_903_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                i_0_i29_reg_539 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                i_0_i29_reg_539 <= i_14_reg_1289;
            end if; 
        end if;
    end process;

    i_0_i35_reg_550_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln163_fu_981_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                i_0_i35_reg_550 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                i_0_i35_reg_550 <= i_15_reg_1320;
            end if; 
        end if;
    end process;

    i_0_i_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln172_fu_684_p2 = ap_const_lv1_1))) then 
                i_0_i_reg_406 <= i_reg_1058;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_406 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i12_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln213_fu_710_p2 = ap_const_lv1_0))) then 
                j_0_i12_reg_439 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_0_i12_reg_439 <= j_1_reg_1102;
            end if; 
        end if;
    end process;

    j_0_i_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_660_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_417 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_i_reg_417 <= j_reg_1071;
            end if; 
        end if;
    end process;

    n_0_i_reg_505_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln141_fu_846_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                n_0_i_reg_505 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                n_0_i_reg_505 <= n_reg_1218;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                bias6_buf_load_reg_1276 <= bias6_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                c_reg_1241 <= c_fu_956_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_10_reg_1138 <= i_10_fu_801_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_11_reg_1156 <= i_11_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_12_reg_1174 <= i_12_fu_835_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                i_13_reg_1192 <= i_13_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                i_14_reg_1289 <= i_14_fu_987_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                i_15_reg_1320 <= i_15_fu_1044_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_2_reg_1089 <= i_2_fu_716_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_9_reg_1120 <= i_9_fu_784_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1058 <= i_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                icmp_ln142_1_reg_1207 <= icmp_ln142_1_fu_887_p2;
                icmp_ln142_reg_1202 <= icmp_ln142_fu_881_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                icmp_ln164_1_reg_1309 <= icmp_ln164_1_fu_1022_p2;
                icmp_ln164_reg_1304 <= icmp_ln164_fu_1016_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln141_fu_846_p2 = ap_const_lv1_0))) then
                input6_inter_0_0_a_reg_1197 <= zext_ln142_fu_858_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_1_reg_1102 <= j_1_fu_758_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_1071 <= j_fu_690_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                n_reg_1218 <= n_fu_909_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln163_fu_981_p2 = ap_const_lv1_0))) then
                output_buf_addr_1_reg_1294 <= zext_ln164_fu_993_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln149_fu_903_p2 = ap_const_lv1_0))) then
                output_buf_addr_reg_1233 <= zext_ln151_fu_915_p1(4 - 1 downto 0);
                    sub_ln154_reg_1228(11 downto 3) <= sub_ln154_fu_944_p2(11 downto 3);
                    zext_ln151_reg_1223(3 downto 0) <= zext_ln151_fu_915_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state35))) then
                reg_654 <= input6_inter_0_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln214_fu_752_p2 = ap_const_lv1_0))) then
                sext_ln215_reg_1107 <= sext_ln215_fu_773_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln213_fu_710_p2 = ap_const_lv1_0))) then
                    sub_ln215_reg_1094(11 downto 3) <= sub_ln215_fu_746_p2(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                tmp_1_i_reg_1266 <= grp_fu_643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                tmp_i2_reg_1281 <= grp_fu_638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                weights6_buf_0_0_l_reg_1261 <= weights6_buf_0_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_660_p2 = ap_const_lv1_0))) then
                    zext_ln172_reg_1063(10 downto 5) <= zext_ln172_fu_680_p1(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln172_fu_684_p2 = ap_const_lv1_0))) then
                    zext_ln173_1_reg_1076(11 downto 0) <= zext_ln173_1_fu_705_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln221_fu_778_p2 = ap_const_lv1_0))) then
                    zext_ln222_reg_1125(2 downto 0) <= zext_ln222_fu_790_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln227_fu_795_p2 = ap_const_lv1_0))) then
                    zext_ln228_reg_1143(4 downto 0) <= zext_ln228_fu_807_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln233_fu_812_p2 = ap_const_lv1_0))) then
                    zext_ln234_reg_1161(6 downto 0) <= zext_ln234_fu_824_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln239_fu_829_p2 = ap_const_lv1_0))) then
                    zext_ln240_reg_1179(3 downto 0) <= zext_ln240_fu_841_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln245_fu_1038_p2 = ap_const_lv1_0))) then
                    zext_ln246_reg_1325(3 downto 0) <= zext_ln246_fu_1050_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln172_reg_1063(4 downto 0) <= "00000";
    zext_ln172_reg_1063(11) <= '0';
    zext_ln173_1_reg_1076(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    sub_ln215_reg_1094(2 downto 0) <= "000";
    zext_ln222_reg_1125(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln228_reg_1143(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln234_reg_1161(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln240_reg_1179(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln151_reg_1223(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    sub_ln154_reg_1228(2 downto 0) <= "000";
    zext_ln246_reg_1325(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln171_fu_660_p2, ap_CS_fsm_state3, icmp_ln172_fu_684_p2, ap_CS_fsm_state6, icmp_ln213_fu_710_p2, ap_CS_fsm_state7, icmp_ln214_fu_752_p2, ap_CS_fsm_state9, icmp_ln221_fu_778_p2, ap_CS_fsm_state11, icmp_ln227_fu_795_p2, ap_CS_fsm_state13, icmp_ln233_fu_812_p2, ap_CS_fsm_state15, icmp_ln239_fu_829_p2, ap_CS_fsm_state34, icmp_ln141_fu_846_p2, ap_CS_fsm_state37, icmp_ln149_fu_903_p2, ap_CS_fsm_state38, icmp_ln152_fu_950_p2, ap_CS_fsm_state56, icmp_ln163_fu_981_p2, ap_CS_fsm_state59, icmp_ln245_fu_1038_p2, grp_i_convolution3_fu_561_ap_done, grp_i_convolution5_fu_569_ap_done, grp_i_convolution1_fu_577_ap_done, grp_i_max_pooling2_fu_585_ap_done, grp_i_max_pooling4_fu_591_ap_done, grp_i_relu1_fu_597_ap_done, grp_i_relu3_fu_602_ap_done, grp_i_relu4_fu_607_ap_done, grp_i_relu2_fu_612_ap_done, ap_CS_fsm_state5, ap_block_state5_on_subcall_done, ap_CS_fsm_state33, ap_CS_fsm_state25, ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_CS_fsm_state31, ap_CS_fsm_state23)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_660_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln172_fu_684_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln213_fu_710_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln214_fu_752_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln221_fu_778_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln227_fu_795_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln233_fu_812_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln239_fu_829_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                if (((grp_i_convolution1_fu_577_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_i_relu1_fu_597_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_i_max_pooling2_fu_585_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((grp_i_relu2_fu_612_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_i_convolution3_fu_561_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_i_relu3_fu_602_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((grp_i_max_pooling4_fu_591_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((grp_i_relu4_fu_607_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((grp_i_convolution5_fu_569_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((icmp_ln141_fu_846_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state37 => 
                if (((icmp_ln149_fu_903_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                if (((icmp_ln152_fu_950_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state56 => 
                if (((icmp_ln163_fu_981_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state59 => 
                if (((icmp_ln245_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln154_fu_971_p2 <= std_logic_vector(unsigned(sub_ln154_reg_1228) + unsigned(zext_ln154_3_fu_967_p1));
    add_ln173_fu_700_p2 <= std_logic_vector(unsigned(zext_ln172_reg_1063) + unsigned(zext_ln173_fu_696_p1));
    add_ln215_fu_768_p2 <= std_logic_vector(unsigned(sub_ln215_reg_1094) + unsigned(zext_ln215_2_fu_764_p1));
    and_ln142_fu_897_p2 <= (or_ln142_fu_893_p2 and grp_fu_647_p2);
    and_ln164_fu_1032_p2 <= (or_ln164_fu_1028_p2 and grp_fu_647_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state5_on_subcall_done_assign_proc : process(grp_ld_weights5_fu_617_ap_done, grp_ld_weights3_fu_624_ap_done, grp_ld_weights1_fu_631_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((grp_ld_weights1_fu_631_ap_done = ap_const_logic_0) or (grp_ld_weights3_fu_624_ap_done = ap_const_logic_0) or (grp_ld_weights5_fu_617_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state59, icmp_ln245_fu_1038_p2)
    begin
        if (((icmp_ln245_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state59, icmp_ln245_fu_1038_p2)
    begin
        if (((icmp_ln245_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;
    bias1_address0 <= zext_ln222_fu_790_p1(3 - 1 downto 0);

    bias1_buf_address0_assign_proc : process(zext_ln222_reg_1125, grp_i_convolution1_fu_577_bias_address0, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bias1_buf_address0 <= zext_ln222_reg_1125(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            bias1_buf_address0 <= grp_i_convolution1_fu_577_bias_address0;
        else 
            bias1_buf_address0 <= "XXX";
        end if; 
    end process;


    bias1_buf_ce0_assign_proc : process(grp_i_convolution1_fu_577_bias_ce0, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bias1_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            bias1_buf_ce0 <= grp_i_convolution1_fu_577_bias_ce0;
        else 
            bias1_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias1_buf_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bias1_buf_we0 <= ap_const_logic_1;
        else 
            bias1_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias1_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bias1_ce0 <= ap_const_logic_1;
        else 
            bias1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias3_address0 <= zext_ln228_fu_807_p1(4 - 1 downto 0);

    bias3_buf_address0_assign_proc : process(zext_ln228_reg_1143, grp_i_convolution3_fu_561_bias_address0, ap_CS_fsm_state12, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bias3_buf_address0 <= zext_ln228_reg_1143(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            bias3_buf_address0 <= grp_i_convolution3_fu_561_bias_address0;
        else 
            bias3_buf_address0 <= "XXXX";
        end if; 
    end process;


    bias3_buf_ce0_assign_proc : process(grp_i_convolution3_fu_561_bias_ce0, ap_CS_fsm_state12, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bias3_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            bias3_buf_ce0 <= grp_i_convolution3_fu_561_bias_ce0;
        else 
            bias3_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias3_buf_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bias3_buf_we0 <= ap_const_logic_1;
        else 
            bias3_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias3_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            bias3_ce0 <= ap_const_logic_1;
        else 
            bias3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias5_address0 <= zext_ln234_fu_824_p1(7 - 1 downto 0);

    bias5_buf_address0_assign_proc : process(zext_ln234_reg_1161, grp_i_convolution5_fu_569_bias_address0, ap_CS_fsm_state14, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            bias5_buf_address0 <= zext_ln234_reg_1161(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            bias5_buf_address0 <= grp_i_convolution5_fu_569_bias_address0;
        else 
            bias5_buf_address0 <= "XXXXXXX";
        end if; 
    end process;


    bias5_buf_ce0_assign_proc : process(grp_i_convolution5_fu_569_bias_ce0, ap_CS_fsm_state14, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            bias5_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            bias5_buf_ce0 <= grp_i_convolution5_fu_569_bias_ce0;
        else 
            bias5_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias5_buf_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            bias5_buf_we0 <= ap_const_logic_1;
        else 
            bias5_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias5_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            bias5_ce0 <= ap_const_logic_1;
        else 
            bias5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias6_address0 <= zext_ln240_fu_841_p1(4 - 1 downto 0);

    bias6_buf_address0_assign_proc : process(zext_ln240_reg_1179, zext_ln151_reg_1223, ap_CS_fsm_state38, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            bias6_buf_address0 <= zext_ln151_reg_1223(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            bias6_buf_address0 <= zext_ln240_reg_1179(4 - 1 downto 0);
        else 
            bias6_buf_address0 <= "XXXX";
        end if; 
    end process;


    bias6_buf_ce0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            bias6_buf_ce0 <= ap_const_logic_1;
        else 
            bias6_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias6_buf_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            bias6_buf_we0 <= ap_const_logic_1;
        else 
            bias6_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias6_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bias6_ce0 <= ap_const_logic_1;
        else 
            bias6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln142_fu_863_p1 <= input6_inter_0_0_q0;
    bitcast_ln164_fu_998_p1 <= output_buf_q0;
    c_fu_956_p2 <= std_logic_vector(unsigned(c_0_i_reg_528) + unsigned(ap_const_lv7_1));

    grp_fu_638_p1_assign_proc : process(tmp_1_i_reg_1266, bias6_buf_load_reg_1276, ap_CS_fsm_state44, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_638_p1 <= bias6_buf_load_reg_1276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_638_p1 <= tmp_1_i_reg_1266;
        else 
            grp_fu_638_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_647_p0_assign_proc : process(input6_inter_0_0_q0, ap_CS_fsm_state35, output_buf_q0, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_647_p0 <= output_buf_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_647_p0 <= input6_inter_0_0_q0;
        else 
            grp_fu_647_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_i_convolution1_fu_577_ap_start <= grp_i_convolution1_fu_577_ap_start_reg;
    grp_i_convolution3_fu_561_ap_start <= grp_i_convolution3_fu_561_ap_start_reg;
    grp_i_convolution5_fu_569_ap_start <= grp_i_convolution5_fu_569_ap_start_reg;
    grp_i_max_pooling2_fu_585_ap_start <= grp_i_max_pooling2_fu_585_ap_start_reg;
    grp_i_max_pooling4_fu_591_ap_start <= grp_i_max_pooling4_fu_591_ap_start_reg;
    grp_i_relu1_fu_597_ap_start <= grp_i_relu1_fu_597_ap_start_reg;
    grp_i_relu2_fu_612_ap_start <= grp_i_relu2_fu_612_ap_start_reg;
    grp_i_relu3_fu_602_ap_start <= grp_i_relu3_fu_602_ap_start_reg;
    grp_i_relu4_fu_607_ap_start <= grp_i_relu4_fu_607_ap_start_reg;
    grp_ld_weights1_fu_631_ap_start <= grp_ld_weights1_fu_631_ap_start_reg;
    grp_ld_weights3_fu_624_ap_start <= grp_ld_weights3_fu_624_ap_start_reg;
    grp_ld_weights5_fu_617_ap_start <= grp_ld_weights5_fu_617_ap_start_reg;
    i_10_fu_801_p2 <= std_logic_vector(unsigned(i_0_i18_reg_461) + unsigned(ap_const_lv5_1));
    i_11_fu_818_p2 <= std_logic_vector(unsigned(i_0_i20_reg_472) + unsigned(ap_const_lv7_1));
    i_12_fu_835_p2 <= std_logic_vector(unsigned(i_0_i22_reg_483) + unsigned(ap_const_lv4_1));
    i_13_fu_852_p2 <= std_logic_vector(unsigned(i_0_i24_reg_494) + unsigned(ap_const_lv7_1));
    i_14_fu_987_p2 <= std_logic_vector(unsigned(i_0_i29_reg_539) + unsigned(ap_const_lv4_1));
    i_15_fu_1044_p2 <= std_logic_vector(unsigned(i_0_i35_reg_550) + unsigned(ap_const_lv4_1));
    i_2_fu_716_p2 <= std_logic_vector(unsigned(i_0_i10_reg_428) + unsigned(ap_const_lv4_1));
    i_9_fu_784_p2 <= std_logic_vector(unsigned(i_0_i16_reg_450) + unsigned(ap_const_lv3_1));
    i_fu_666_p2 <= std_logic_vector(unsigned(i_0_i_reg_406) + unsigned(ap_const_lv6_1));
    icmp_ln141_fu_846_p2 <= "1" when (i_0_i24_reg_494 = ap_const_lv7_78) else "0";
    icmp_ln142_1_fu_887_p2 <= "1" when (trunc_ln142_fu_877_p1 = ap_const_lv23_0) else "0";
    icmp_ln142_fu_881_p2 <= "0" when (tmp_fu_867_p4 = ap_const_lv8_FF) else "1";
    icmp_ln149_fu_903_p2 <= "1" when (n_0_i_reg_505 = ap_const_lv4_A) else "0";
    icmp_ln152_fu_950_p2 <= "1" when (c_0_i_reg_528 = ap_const_lv7_78) else "0";
    icmp_ln163_fu_981_p2 <= "1" when (i_0_i29_reg_539 = ap_const_lv4_A) else "0";
    icmp_ln164_1_fu_1022_p2 <= "1" when (trunc_ln164_fu_1012_p1 = ap_const_lv23_0) else "0";
    icmp_ln164_fu_1016_p2 <= "0" when (tmp_2_fu_1002_p4 = ap_const_lv8_FF) else "1";
    icmp_ln171_fu_660_p2 <= "1" when (i_0_i_reg_406 = ap_const_lv6_20) else "0";
    icmp_ln172_fu_684_p2 <= "1" when (j_0_i_reg_417 = ap_const_lv6_20) else "0";
    icmp_ln213_fu_710_p2 <= "1" when (i_0_i10_reg_428 = ap_const_lv4_A) else "0";
    icmp_ln214_fu_752_p2 <= "1" when (j_0_i12_reg_439 = ap_const_lv7_78) else "0";
    icmp_ln221_fu_778_p2 <= "1" when (i_0_i16_reg_450 = ap_const_lv3_6) else "0";
    icmp_ln227_fu_795_p2 <= "1" when (i_0_i18_reg_461 = ap_const_lv5_10) else "0";
    icmp_ln233_fu_812_p2 <= "1" when (i_0_i20_reg_472 = ap_const_lv7_78) else "0";
    icmp_ln239_fu_829_p2 <= "1" when (i_0_i22_reg_483 = ap_const_lv4_A) else "0";
    icmp_ln245_fu_1038_p2 <= "1" when (i_0_i35_reg_550 = ap_const_lv4_A) else "0";

    input2_inter_address0_assign_proc : process(grp_i_convolution1_fu_577_output_r_address0, grp_i_max_pooling2_fu_585_input_r_address0, grp_i_relu1_fu_597_input_r_address0, ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input2_inter_address0 <= grp_i_relu1_fu_597_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input2_inter_address0 <= grp_i_max_pooling2_fu_585_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input2_inter_address0 <= grp_i_convolution1_fu_577_output_r_address0;
        else 
            input2_inter_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    input2_inter_ce0_assign_proc : process(grp_i_convolution1_fu_577_output_r_ce0, grp_i_max_pooling2_fu_585_input_r_ce0, grp_i_relu1_fu_597_input_r_ce0, ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input2_inter_ce0 <= grp_i_relu1_fu_597_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input2_inter_ce0 <= grp_i_max_pooling2_fu_585_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input2_inter_ce0 <= grp_i_convolution1_fu_577_output_r_ce0;
        else 
            input2_inter_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input2_inter_d0_assign_proc : process(grp_i_convolution1_fu_577_output_r_d0, grp_i_relu1_fu_597_input_r_d0, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input2_inter_d0 <= grp_i_relu1_fu_597_input_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input2_inter_d0 <= grp_i_convolution1_fu_577_output_r_d0;
        else 
            input2_inter_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input2_inter_we0_assign_proc : process(grp_i_convolution1_fu_577_output_r_we0, grp_i_relu1_fu_597_input_r_we0, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input2_inter_we0 <= grp_i_relu1_fu_597_input_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input2_inter_we0 <= grp_i_convolution1_fu_577_output_r_we0;
        else 
            input2_inter_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input3_inter_address0_assign_proc : process(grp_i_convolution3_fu_561_input_r_address0, grp_i_max_pooling2_fu_585_output_r_address0, grp_i_relu2_fu_612_input_r_address0, ap_CS_fsm_state25, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            input3_inter_address0 <= grp_i_relu2_fu_612_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input3_inter_address0 <= grp_i_max_pooling2_fu_585_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input3_inter_address0 <= grp_i_convolution3_fu_561_input_r_address0;
        else 
            input3_inter_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    input3_inter_ce0_assign_proc : process(grp_i_convolution3_fu_561_input_r_ce0, grp_i_max_pooling2_fu_585_output_r_ce0, grp_i_relu2_fu_612_input_r_ce0, ap_CS_fsm_state25, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            input3_inter_ce0 <= grp_i_relu2_fu_612_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input3_inter_ce0 <= grp_i_max_pooling2_fu_585_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input3_inter_ce0 <= grp_i_convolution3_fu_561_input_r_ce0;
        else 
            input3_inter_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input3_inter_d0_assign_proc : process(grp_i_max_pooling2_fu_585_output_r_d0, grp_i_relu2_fu_612_input_r_d0, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            input3_inter_d0 <= grp_i_relu2_fu_612_input_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input3_inter_d0 <= grp_i_max_pooling2_fu_585_output_r_d0;
        else 
            input3_inter_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input3_inter_we0_assign_proc : process(grp_i_max_pooling2_fu_585_output_r_we0, grp_i_relu2_fu_612_input_r_we0, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            input3_inter_we0 <= grp_i_relu2_fu_612_input_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input3_inter_we0 <= grp_i_max_pooling2_fu_585_output_r_we0;
        else 
            input3_inter_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input4_inter_address0_assign_proc : process(grp_i_convolution3_fu_561_output_r_address0, grp_i_max_pooling4_fu_591_input_r_address0, grp_i_relu3_fu_602_input_r_address0, ap_CS_fsm_state25, ap_CS_fsm_state29, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            input4_inter_address0 <= grp_i_relu3_fu_602_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            input4_inter_address0 <= grp_i_max_pooling4_fu_591_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input4_inter_address0 <= grp_i_convolution3_fu_561_output_r_address0;
        else 
            input4_inter_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    input4_inter_ce0_assign_proc : process(grp_i_convolution3_fu_561_output_r_ce0, grp_i_max_pooling4_fu_591_input_r_ce0, grp_i_relu3_fu_602_input_r_ce0, ap_CS_fsm_state25, ap_CS_fsm_state29, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            input4_inter_ce0 <= grp_i_relu3_fu_602_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            input4_inter_ce0 <= grp_i_max_pooling4_fu_591_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input4_inter_ce0 <= grp_i_convolution3_fu_561_output_r_ce0;
        else 
            input4_inter_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input4_inter_d0_assign_proc : process(grp_i_convolution3_fu_561_output_r_d0, grp_i_relu3_fu_602_input_r_d0, ap_CS_fsm_state25, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            input4_inter_d0 <= grp_i_relu3_fu_602_input_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input4_inter_d0 <= grp_i_convolution3_fu_561_output_r_d0;
        else 
            input4_inter_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input4_inter_we0_assign_proc : process(grp_i_convolution3_fu_561_output_r_we0, grp_i_relu3_fu_602_input_r_we0, ap_CS_fsm_state25, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            input4_inter_we0 <= grp_i_relu3_fu_602_input_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input4_inter_we0 <= grp_i_convolution3_fu_561_output_r_we0;
        else 
            input4_inter_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input5_inter_address0_assign_proc : process(grp_i_convolution5_fu_569_input_r_address0, grp_i_max_pooling4_fu_591_output_r_address0, grp_i_relu4_fu_607_input_r_address0, ap_CS_fsm_state33, ap_CS_fsm_state29, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            input5_inter_address0 <= grp_i_relu4_fu_607_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            input5_inter_address0 <= grp_i_max_pooling4_fu_591_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            input5_inter_address0 <= grp_i_convolution5_fu_569_input_r_address0;
        else 
            input5_inter_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    input5_inter_ce0_assign_proc : process(grp_i_convolution5_fu_569_input_r_ce0, grp_i_max_pooling4_fu_591_output_r_ce0, grp_i_relu4_fu_607_input_r_ce0, ap_CS_fsm_state33, ap_CS_fsm_state29, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            input5_inter_ce0 <= grp_i_relu4_fu_607_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            input5_inter_ce0 <= grp_i_max_pooling4_fu_591_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            input5_inter_ce0 <= grp_i_convolution5_fu_569_input_r_ce0;
        else 
            input5_inter_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input5_inter_d0_assign_proc : process(grp_i_max_pooling4_fu_591_output_r_d0, grp_i_relu4_fu_607_input_r_d0, ap_CS_fsm_state29, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            input5_inter_d0 <= grp_i_relu4_fu_607_input_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            input5_inter_d0 <= grp_i_max_pooling4_fu_591_output_r_d0;
        else 
            input5_inter_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input5_inter_we0_assign_proc : process(grp_i_max_pooling4_fu_591_output_r_we0, grp_i_relu4_fu_607_input_r_we0, ap_CS_fsm_state29, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            input5_inter_we0 <= grp_i_relu4_fu_607_input_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            input5_inter_we0 <= grp_i_max_pooling4_fu_591_output_r_we0;
        else 
            input5_inter_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input6_inter_0_0_address0_assign_proc : process(ap_CS_fsm_state34, input6_inter_0_0_a_reg_1197, ap_CS_fsm_state38, grp_i_convolution5_fu_569_output_0_0_address0, ap_CS_fsm_state33, ap_CS_fsm_state36, zext_ln142_fu_858_p1, zext_ln154_fu_962_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            input6_inter_0_0_address0 <= zext_ln154_fu_962_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            input6_inter_0_0_address0 <= input6_inter_0_0_a_reg_1197;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            input6_inter_0_0_address0 <= zext_ln142_fu_858_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            input6_inter_0_0_address0 <= grp_i_convolution5_fu_569_output_0_0_address0;
        else 
            input6_inter_0_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    input6_inter_0_0_ce0_assign_proc : process(ap_CS_fsm_state34, ap_CS_fsm_state38, grp_i_convolution5_fu_569_output_0_0_ce0, ap_CS_fsm_state33, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            input6_inter_0_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            input6_inter_0_0_ce0 <= grp_i_convolution5_fu_569_output_0_0_ce0;
        else 
            input6_inter_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input6_inter_0_0_d0_assign_proc : process(grp_i_convolution5_fu_569_output_0_0_d0, ap_CS_fsm_state33, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            input6_inter_0_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            input6_inter_0_0_d0 <= grp_i_convolution5_fu_569_output_0_0_d0;
        else 
            input6_inter_0_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input6_inter_0_0_we0_assign_proc : process(grp_i_convolution5_fu_569_output_0_0_we0, ap_CS_fsm_state33, ap_CS_fsm_state36, and_ln142_fu_897_p2)
    begin
        if (((ap_const_lv1_1 = and_ln142_fu_897_p2) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            input6_inter_0_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            input6_inter_0_0_we0 <= grp_i_convolution5_fu_569_output_0_0_we0;
        else 
            input6_inter_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_buf_0_address0_assign_proc : process(zext_ln173_1_reg_1076, grp_i_convolution1_fu_577_input_0_address0, ap_CS_fsm_state4, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_buf_0_address0 <= zext_ln173_1_reg_1076(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_buf_0_address0 <= grp_i_convolution1_fu_577_input_0_address0;
        else 
            input_buf_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_buf_0_ce0_assign_proc : process(grp_i_convolution1_fu_577_input_0_ce0, ap_CS_fsm_state4, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_buf_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_buf_0_ce0 <= grp_i_convolution1_fu_577_input_0_ce0;
        else 
            input_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_buf_0_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_buf_0_we0 <= ap_const_logic_1;
        else 
            input_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_r_address0 <= zext_ln173_1_fu_705_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_758_p2 <= std_logic_vector(unsigned(j_0_i12_reg_439) + unsigned(ap_const_lv7_1));
    j_fu_690_p2 <= std_logic_vector(unsigned(j_0_i_reg_417) + unsigned(ap_const_lv6_1));
    n_fu_909_p2 <= std_logic_vector(unsigned(n_0_i_reg_505) + unsigned(ap_const_lv4_1));
    or_ln142_fu_893_p2 <= (icmp_ln142_reg_1202 or icmp_ln142_1_reg_1207);
    or_ln164_fu_1028_p2 <= (icmp_ln164_reg_1304 or icmp_ln164_1_reg_1309);

    output_buf_address0_assign_proc : process(output_buf_addr_reg_1233, ap_CS_fsm_state56, output_buf_addr_1_reg_1294, ap_CS_fsm_state59, zext_ln246_fu_1050_p1, ap_CS_fsm_state55, ap_CS_fsm_state58, zext_ln164_fu_993_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            output_buf_address0 <= zext_ln246_fu_1050_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            output_buf_address0 <= output_buf_addr_1_reg_1294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            output_buf_address0 <= zext_ln164_fu_993_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            output_buf_address0 <= output_buf_addr_reg_1233;
        else 
            output_buf_address0 <= "XXXX";
        end if; 
    end process;


    output_buf_ce0_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state59, ap_CS_fsm_state55, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            output_buf_ce0 <= ap_const_logic_1;
        else 
            output_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_buf_d0_assign_proc : process(tmp_i2_reg_1281, ap_CS_fsm_state55, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            output_buf_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            output_buf_d0 <= tmp_i2_reg_1281;
        else 
            output_buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_buf_we0_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state58, and_ln164_fu_1032_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_const_lv1_1 = and_ln164_fu_1032_p2) and (ap_const_logic_1 = ap_CS_fsm_state58)))) then 
            output_buf_we0 <= ap_const_logic_1;
        else 
            output_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_address0 <= zext_ln246_reg_1325(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= output_buf_q0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln154_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln154_fu_971_p2),64));

        sext_ln215_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln215_fu_768_p2),64));

    sub_ln154_fu_944_p2 <= std_logic_vector(unsigned(zext_ln154_1_fu_928_p1) - unsigned(zext_ln154_2_fu_940_p1));
    sub_ln215_fu_746_p2 <= std_logic_vector(unsigned(zext_ln215_fu_730_p1) - unsigned(zext_ln215_1_fu_742_p1));
    tmp_2_fu_1002_p4 <= bitcast_ln164_fu_998_p1(30 downto 23);
    tmp_4_fu_672_p3 <= (i_0_i_reg_406 & ap_const_lv5_0);
    tmp_5_fu_722_p3 <= (i_0_i10_reg_428 & ap_const_lv7_0);
    tmp_6_fu_734_p3 <= (i_0_i10_reg_428 & ap_const_lv3_0);
    tmp_7_fu_920_p3 <= (n_0_i_reg_505 & ap_const_lv7_0);
    tmp_8_fu_932_p3 <= (n_0_i_reg_505 & ap_const_lv3_0);
    tmp_fu_867_p4 <= bitcast_ln142_fu_863_p1(30 downto 23);
    trunc_ln142_fu_877_p1 <= bitcast_ln142_fu_863_p1(23 - 1 downto 0);
    trunc_ln164_fu_1012_p1 <= bitcast_ln164_fu_998_p1(23 - 1 downto 0);
    weights1_address0 <= grp_ld_weights1_fu_631_weights1_address0;

    weights1_buf_0_address0_assign_proc : process(grp_i_convolution1_fu_577_weights_0_address0, grp_ld_weights1_fu_631_weights1_buf_0_address0, ap_CS_fsm_state5, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights1_buf_0_address0 <= grp_ld_weights1_fu_631_weights1_buf_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            weights1_buf_0_address0 <= grp_i_convolution1_fu_577_weights_0_address0;
        else 
            weights1_buf_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    weights1_buf_0_ce0_assign_proc : process(grp_i_convolution1_fu_577_weights_0_ce0, grp_ld_weights1_fu_631_weights1_buf_0_ce0, ap_CS_fsm_state5, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights1_buf_0_ce0 <= grp_ld_weights1_fu_631_weights1_buf_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            weights1_buf_0_ce0 <= grp_i_convolution1_fu_577_weights_0_ce0;
        else 
            weights1_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights1_buf_0_we0_assign_proc : process(grp_ld_weights1_fu_631_weights1_buf_0_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights1_buf_0_we0 <= grp_ld_weights1_fu_631_weights1_buf_0_we0;
        else 
            weights1_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weights1_ce0 <= grp_ld_weights1_fu_631_weights1_ce0;
    weights3_address0 <= grp_ld_weights3_fu_624_weights3_address0;

    weights3_buf_address0_assign_proc : process(grp_i_convolution3_fu_561_weights_address0, grp_ld_weights3_fu_624_weights3_buf_address0, ap_CS_fsm_state5, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights3_buf_address0 <= grp_ld_weights3_fu_624_weights3_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            weights3_buf_address0 <= grp_i_convolution3_fu_561_weights_address0;
        else 
            weights3_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights3_buf_ce0_assign_proc : process(grp_i_convolution3_fu_561_weights_ce0, grp_ld_weights3_fu_624_weights3_buf_ce0, ap_CS_fsm_state5, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights3_buf_ce0 <= grp_ld_weights3_fu_624_weights3_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            weights3_buf_ce0 <= grp_i_convolution3_fu_561_weights_ce0;
        else 
            weights3_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights3_buf_we0_assign_proc : process(grp_ld_weights3_fu_624_weights3_buf_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights3_buf_we0 <= grp_ld_weights3_fu_624_weights3_buf_we0;
        else 
            weights3_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weights3_ce0 <= grp_ld_weights3_fu_624_weights3_ce0;
    weights5_address0 <= grp_ld_weights5_fu_617_weights5_address0;

    weights5_buf_address0_assign_proc : process(grp_i_convolution5_fu_569_weights_address0, grp_ld_weights5_fu_617_weights5_buf_address0, ap_CS_fsm_state5, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights5_buf_address0 <= grp_ld_weights5_fu_617_weights5_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            weights5_buf_address0 <= grp_i_convolution5_fu_569_weights_address0;
        else 
            weights5_buf_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    weights5_buf_ce0_assign_proc : process(grp_i_convolution5_fu_569_weights_ce0, grp_ld_weights5_fu_617_weights5_buf_ce0, ap_CS_fsm_state5, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights5_buf_ce0 <= grp_ld_weights5_fu_617_weights5_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            weights5_buf_ce0 <= grp_i_convolution5_fu_569_weights_ce0;
        else 
            weights5_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights5_buf_we0_assign_proc : process(grp_ld_weights5_fu_617_weights5_buf_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights5_buf_we0 <= grp_ld_weights5_fu_617_weights5_buf_we0;
        else 
            weights5_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weights5_ce0 <= grp_ld_weights5_fu_617_weights5_ce0;
    weights6_address0 <= sext_ln215_fu_773_p1(11 - 1 downto 0);

    weights6_buf_0_0_address0_assign_proc : process(sext_ln215_reg_1107, ap_CS_fsm_state38, ap_CS_fsm_state8, sext_ln154_fu_976_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            weights6_buf_0_0_address0 <= sext_ln154_fu_976_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights6_buf_0_0_address0 <= sext_ln215_reg_1107(11 - 1 downto 0);
        else 
            weights6_buf_0_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    weights6_buf_0_0_ce0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            weights6_buf_0_0_ce0 <= ap_const_logic_1;
        else 
            weights6_buf_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights6_buf_0_0_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights6_buf_0_0_we0 <= ap_const_logic_1;
        else 
            weights6_buf_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights6_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weights6_ce0 <= ap_const_logic_1;
        else 
            weights6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln142_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i24_reg_494),64));
    zext_ln151_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_i_reg_505),64));
    zext_ln154_1_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_920_p3),12));
    zext_ln154_2_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_932_p3),12));
    zext_ln154_3_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_i_reg_528),12));
    zext_ln154_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_i_reg_528),64));
    zext_ln164_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i29_reg_539),64));
    zext_ln172_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_672_p3),12));
    zext_ln173_1_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_fu_700_p2),64));
    zext_ln173_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_417),12));
    zext_ln215_1_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_734_p3),12));
    zext_ln215_2_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i12_reg_439),12));
    zext_ln215_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_722_p3),12));
    zext_ln222_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i16_reg_450),64));
    zext_ln228_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i18_reg_461),64));
    zext_ln234_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i20_reg_472),64));
    zext_ln240_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i22_reg_483),64));
    zext_ln246_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i35_reg_550),64));
end behav;
