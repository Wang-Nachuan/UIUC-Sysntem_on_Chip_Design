-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ld_weights1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weights1_ce0 : OUT STD_LOGIC;
    weights1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights1_buf_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weights1_buf_0_ce0 : OUT STD_LOGIC;
    weights1_buf_0_we0 : OUT STD_LOGIC;
    weights1_buf_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ld_weights1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_92_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_192 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln182_fu_114_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln182_reg_197 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln179_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_126_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_205 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln182_2_fu_157_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln182_2_reg_210 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln180_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_169_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_218 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln182_6_fu_184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln182_6_reg_223 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln181_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_53 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_64 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_0_reg_75 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_102_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln182_fu_98_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln182_1_fu_110_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln182_2_fu_132_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln182_1_fu_136_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_145_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln182_4_fu_153_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln182_3_fu_141_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln182_5_fu_175_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln182_3_fu_179_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_53_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_120_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_53 <= i_reg_192;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_53 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln181_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_64 <= j_reg_205;
            elsif (((icmp_ln179_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_64 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_0_reg_75_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_75 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_0_reg_75 <= k_reg_218;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln182_2_reg_210 <= add_ln182_2_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln179_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln182_reg_197 <= add_ln182_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_192 <= i_fu_92_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_205 <= j_fu_126_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_218 <= k_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln181_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln182_6_reg_223(8 downto 0) <= zext_ln182_6_fu_184_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln182_6_reg_223(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln179_fu_86_p2, ap_CS_fsm_state3, icmp_ln180_fu_120_p2, ap_CS_fsm_state4, icmp_ln181_fu_163_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln179_fu_86_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln180_fu_120_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln181_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln182_1_fu_136_p2 <= std_logic_vector(unsigned(zext_ln182_2_fu_132_p1) + unsigned(add_ln182_reg_197));
    add_ln182_2_fu_157_p2 <= std_logic_vector(unsigned(zext_ln182_4_fu_153_p1) + unsigned(zext_ln182_3_fu_141_p1));
    add_ln182_3_fu_179_p2 <= std_logic_vector(unsigned(add_ln182_2_reg_210) + unsigned(zext_ln182_5_fu_175_p1));
    add_ln182_fu_114_p2 <= std_logic_vector(unsigned(zext_ln182_fu_98_p1) + unsigned(zext_ln182_1_fu_110_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln179_fu_86_p2)
    begin
        if ((((icmp_ln179_fu_86_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln179_fu_86_p2)
    begin
        if (((icmp_ln179_fu_86_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_92_p2 <= std_logic_vector(unsigned(i_0_reg_53) + unsigned(ap_const_lv3_1));
    icmp_ln179_fu_86_p2 <= "1" when (i_0_reg_53 = ap_const_lv3_6) else "0";
    icmp_ln180_fu_120_p2 <= "1" when (j_0_reg_64 = ap_const_lv3_5) else "0";
    icmp_ln181_fu_163_p2 <= "1" when (k_0_reg_75 = ap_const_lv3_5) else "0";
    j_fu_126_p2 <= std_logic_vector(unsigned(j_0_reg_64) + unsigned(ap_const_lv3_1));
    k_fu_169_p2 <= std_logic_vector(unsigned(k_0_reg_75) + unsigned(ap_const_lv3_1));
    tmp_3_fu_145_p3 <= (add_ln182_1_fu_136_p2 & ap_const_lv2_0);
    tmp_fu_102_p3 <= (i_0_reg_53 & ap_const_lv2_0);
    weights1_address0 <= zext_ln182_6_fu_184_p1(8 - 1 downto 0);
    weights1_buf_0_address0 <= zext_ln182_6_reg_223(8 - 1 downto 0);

    weights1_buf_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights1_buf_0_ce0 <= ap_const_logic_1;
        else 
            weights1_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights1_buf_0_d0 <= weights1_q0;

    weights1_buf_0_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights1_buf_0_we0 <= ap_const_logic_1;
        else 
            weights1_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights1_ce0 <= ap_const_logic_1;
        else 
            weights1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln182_1_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_102_p3),6));
    zext_ln182_2_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_64),6));
    zext_ln182_3_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_1_fu_136_p2),9));
    zext_ln182_4_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_145_p3),9));
    zext_ln182_5_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_75),9));
    zext_ln182_6_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_3_fu_179_p2),64));
    zext_ln182_fu_98_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_53),6));
end behav;
