-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity i_max_pooling4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of i_max_pooling4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D368D4A5 : STD_LOGIC_VECTOR (31 downto 0) := "11010011011010001101010010100101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c_fu_179_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_reg_502 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln104_2_fu_213_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln104_2_reg_507 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln96_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln106_fu_231_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln106_reg_512 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_fu_243_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_reg_520 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln_fu_249_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_525 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln97_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln106_2_fu_278_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln106_2_reg_530 : STD_LOGIC_VECTOR (9 downto 0);
    signal w_fu_290_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_538 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shl_ln104_1_fu_296_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln104_1_reg_543 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln98_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_314_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_551 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln104_4_fu_354_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln104_4_reg_556 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln101_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_384_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_564 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln103_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_574 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal max_value_fu_492_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal c_0_reg_86 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_0_reg_97 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_0_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal max_value_0_reg_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_133 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_value_1_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_156 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln106_4_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_6_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_189_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_201_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln104_2_fu_209_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln104_1_fu_197_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_219_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln104_fu_185_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln106_fu_227_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln106_1_fu_257_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln106_1_fu_261_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_270_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln106_2_fu_266_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln101_fu_304_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln104_fu_320_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln104_3_fu_325_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln104_3_fu_329_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_342_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_334_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln104_4_fu_350_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln106_3_fu_360_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln106_3_fu_364_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln103_fu_374_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln104_1_fu_390_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln104_5_fu_395_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln104_5_fu_399_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln104_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln104_1_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_413_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln104_fu_423_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln104_1_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_430_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln104_1_fu_440_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln104_3_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_2_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln104_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln104_1_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_1_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component lenet_top_fcmp_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    lenet_top_fcmp_32dEe_U31 : component lenet_top_fcmp_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => max_value_1_reg_144,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_167_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_reg_86 <= c_reg_502;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_86 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_0_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                h_0_reg_97 <= h_reg_520;
            elsif (((icmp_ln96_fu_173_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                h_0_reg_97 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln103_fu_378_p2 = ap_const_lv1_1))) then 
                i_0_reg_133 <= i_reg_551;
            elsif (((icmp_ln98_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_133 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_0_reg_156 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_0_reg_156 <= j_reg_564;
            end if; 
        end if;
    end process;

    max_value_0_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln103_fu_378_p2 = ap_const_lv1_1))) then 
                max_value_0_reg_120 <= max_value_1_reg_144;
            elsif (((icmp_ln98_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_value_0_reg_120 <= ap_const_lv32_D368D4A5;
            end if; 
        end if;
    end process;

    max_value_1_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                max_value_1_reg_144 <= max_value_0_reg_120;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                max_value_1_reg_144 <= max_value_fu_492_p3;
            end if; 
        end if;
    end process;

    w_0_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                w_0_reg_108 <= ap_const_lv3_0;
            elsif (((icmp_ln101_fu_308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                w_0_reg_108 <= w_reg_538;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_173_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln104_2_reg_507(8 downto 1) <= add_ln104_2_fu_213_p2(8 downto 1);
                add_ln106_reg_512 <= add_ln106_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    add_ln104_4_reg_556(11 downto 1) <= add_ln104_4_fu_354_p2(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln106_2_reg_530 <= add_ln106_2_fu_278_p2;
                    shl_ln_reg_525(3 downto 1) <= shl_ln_fu_249_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c_reg_502 <= c_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_reg_520 <= h_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_reg_551 <= i_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_load_reg_574 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_reg_564 <= j_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    shl_ln104_1_reg_543(3 downto 1) <= shl_ln104_1_fu_296_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_reg_538 <= w_fu_290_p2;
            end if;
        end if;
    end process;
    add_ln104_2_reg_507(0) <= '0';
    shl_ln_reg_525(0) <= '0';
    shl_ln104_1_reg_543(0) <= '0';
    add_ln104_4_reg_556(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln96_fu_173_p2, ap_CS_fsm_state3, icmp_ln97_fu_237_p2, ap_CS_fsm_state4, icmp_ln98_fu_284_p2, ap_CS_fsm_state5, icmp_ln101_fu_308_p2, ap_CS_fsm_state6, icmp_ln103_fu_378_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln96_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln97_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln98_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln101_fu_308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln103_fu_378_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln104_1_fu_390_p2 <= std_logic_vector(unsigned(zext_ln103_fu_374_p1) + unsigned(shl_ln104_1_reg_543));
    add_ln104_2_fu_213_p2 <= std_logic_vector(unsigned(zext_ln104_2_fu_209_p1) + unsigned(zext_ln104_1_fu_197_p1));
    add_ln104_3_fu_329_p2 <= std_logic_vector(unsigned(zext_ln104_3_fu_325_p1) + unsigned(add_ln104_2_reg_507));
    add_ln104_4_fu_354_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_334_p3) + unsigned(zext_ln104_4_fu_350_p1));
    add_ln104_5_fu_399_p2 <= std_logic_vector(unsigned(add_ln104_4_reg_556) + unsigned(zext_ln104_5_fu_395_p1));
    add_ln104_fu_320_p2 <= std_logic_vector(unsigned(shl_ln_reg_525) + unsigned(zext_ln101_fu_304_p1));
    add_ln106_1_fu_261_p2 <= std_logic_vector(unsigned(zext_ln106_1_fu_257_p1) + unsigned(add_ln106_reg_512));
    add_ln106_2_fu_278_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_270_p3) + unsigned(zext_ln106_2_fu_266_p1));
    add_ln106_3_fu_364_p2 <= std_logic_vector(unsigned(add_ln106_2_reg_530) + unsigned(zext_ln106_3_fu_360_p1));
    add_ln106_fu_231_p2 <= std_logic_vector(unsigned(zext_ln104_fu_185_p1) + unsigned(zext_ln106_fu_227_p1));
    and_ln104_1_fu_486_p2 <= (grp_fu_167_p2 and and_ln104_fu_480_p2);
    and_ln104_fu_480_p2 <= (or_ln104_fu_456_p2 and or_ln104_1_fu_474_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln96_fu_173_p2)
    begin
        if ((((icmp_ln96_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln96_fu_173_p2)
    begin
        if (((icmp_ln96_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln104_1_fu_427_p1 <= input_load_reg_574;
    bitcast_ln104_fu_409_p1 <= max_value_1_reg_144;
    c_fu_179_p2 <= std_logic_vector(unsigned(c_0_reg_86) + unsigned(ap_const_lv5_1));
    h_fu_243_p2 <= std_logic_vector(unsigned(h_0_reg_97) + unsigned(ap_const_lv3_1));
    i_fu_314_p2 <= std_logic_vector(unsigned(i_0_reg_133) + unsigned(ap_const_lv2_1));
    icmp_ln101_fu_308_p2 <= "1" when (i_0_reg_133 = ap_const_lv2_2) else "0";
    icmp_ln103_fu_378_p2 <= "1" when (j_0_reg_156 = ap_const_lv2_2) else "0";
    icmp_ln104_1_fu_450_p2 <= "1" when (trunc_ln104_fu_423_p1 = ap_const_lv23_0) else "0";
    icmp_ln104_2_fu_462_p2 <= "0" when (tmp_8_fu_430_p4 = ap_const_lv8_FF) else "1";
    icmp_ln104_3_fu_468_p2 <= "1" when (trunc_ln104_1_fu_440_p1 = ap_const_lv23_0) else "0";
    icmp_ln104_fu_444_p2 <= "0" when (tmp_fu_413_p4 = ap_const_lv8_FF) else "1";
    icmp_ln96_fu_173_p2 <= "1" when (c_0_reg_86 = ap_const_lv5_10) else "0";
    icmp_ln97_fu_237_p2 <= "1" when (h_0_reg_97 = ap_const_lv3_5) else "0";
    icmp_ln98_fu_284_p2 <= "1" when (w_0_reg_108 = ap_const_lv3_5) else "0";
    input_r_address0 <= zext_ln104_6_fu_404_p1(11 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_384_p2 <= std_logic_vector(unsigned(j_0_reg_156) + unsigned(ap_const_lv2_1));
    max_value_fu_492_p3 <= 
        max_value_1_reg_144 when (and_ln104_1_fu_486_p2(0) = '1') else 
        input_load_reg_574;
    or_ln104_1_fu_474_p2 <= (icmp_ln104_3_fu_468_p2 or icmp_ln104_2_fu_462_p2);
    or_ln104_fu_456_p2 <= (icmp_ln104_fu_444_p2 or icmp_ln104_1_fu_450_p2);
    output_r_address0 <= zext_ln106_4_fu_369_p1(9 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= max_value_0_reg_120;

    output_r_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln101_fu_308_p2)
    begin
        if (((icmp_ln101_fu_308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl3_cast_fu_270_p3 <= (add_ln106_1_fu_261_p2 & ap_const_lv2_0);
    p_shl4_cast_fu_334_p3 <= (add_ln104_3_fu_329_p2 & ap_const_lv3_0);
    shl_ln104_1_fu_296_p3 <= (w_0_reg_108 & ap_const_lv1_0);
    shl_ln_fu_249_p3 <= (h_0_reg_97 & ap_const_lv1_0);
    tmp_4_fu_201_p3 <= (c_0_reg_86 & ap_const_lv1_0);
    tmp_5_fu_219_p3 <= (c_0_reg_86 & ap_const_lv2_0);
    tmp_7_fu_342_p3 <= (add_ln104_3_fu_329_p2 & ap_const_lv1_0);
    tmp_8_fu_430_p4 <= bitcast_ln104_1_fu_427_p1(30 downto 23);
    tmp_fu_413_p4 <= bitcast_ln104_fu_409_p1(30 downto 23);
    tmp_s_fu_189_p3 <= (c_0_reg_86 & ap_const_lv3_0);
    trunc_ln104_1_fu_440_p1 <= bitcast_ln104_1_fu_427_p1(23 - 1 downto 0);
    trunc_ln104_fu_423_p1 <= bitcast_ln104_fu_409_p1(23 - 1 downto 0);
    w_fu_290_p2 <= std_logic_vector(unsigned(w_0_reg_108) + unsigned(ap_const_lv3_1));
    zext_ln101_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_133),4));
    zext_ln103_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_156),4));
    zext_ln104_1_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_189_p3),9));
    zext_ln104_2_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_201_p3),9));
    zext_ln104_3_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_fu_320_p2),9));
    zext_ln104_4_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_342_p3),12));
    zext_ln104_5_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_1_fu_390_p2),12));
    zext_ln104_6_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_5_fu_399_p2),64));
    zext_ln104_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_86),8));
    zext_ln106_1_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_0_reg_97),8));
    zext_ln106_2_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_1_fu_261_p2),10));
    zext_ln106_3_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_0_reg_108),10));
    zext_ln106_4_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_3_fu_364_p2),64));
    zext_ln106_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_219_p3),8));
end behav;
