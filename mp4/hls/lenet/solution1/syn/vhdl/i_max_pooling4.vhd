-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity i_max_pooling4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of i_max_pooling4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D368D4A5 : STD_LOGIC_VECTOR (31 downto 0) := "11010011011010001101010010100101";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_177 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_reg_188 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_value_1_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_211 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln77_fu_235_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln77_reg_710 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln78_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln85_fu_247_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln85_reg_724 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln85_1_fu_261_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln85_1_reg_730 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln85_fu_296_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln85_reg_735 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln78_fu_362_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln78_reg_740 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln78_1_fu_378_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln78_1_reg_746 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln78_2_fu_386_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln78_2_reg_751 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln88_2_fu_415_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln88_2_reg_756 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln85_1_fu_421_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln85_1_reg_761 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln82_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln82_reg_766_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln82_1_fu_435_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln82_1_reg_770 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln82_fu_453_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln82_reg_775 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln82_1_fu_461_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln82_1_reg_780 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln85_2_fu_482_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln85_2_reg_785 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln85_1_fu_491_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln85_1_reg_791 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal j_fu_534_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_801 : STD_LOGIC_VECTOR (1 downto 0);
    signal input_load_reg_806 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln85_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_1_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_1_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_value_fu_620_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal add_ln88_3_fu_630_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln88_3_reg_828 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal w_fu_635_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_833 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln78_3_fu_646_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln78_3_reg_838 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten24_reg_118 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal c_0_reg_129 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten6_reg_141 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_0_reg_153 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_0_reg_165 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_181_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_0_phi_fu_192_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_max_value_1_phi_fu_203_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_j_0_phi_fu_215_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln85_6_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln88_3_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_222_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_255_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_272_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_284_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln85_2_fu_292_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln85_1_fu_280_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_302_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln85_fu_268_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln88_fu_310_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_320_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln79_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln85_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_2_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln78_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_fu_352_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln85_mid1_fu_370_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln85_2_fu_328_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln88_fu_314_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln78_fu_393_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln88_1_fu_397_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln88_1_fu_403_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_407_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln83_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_441_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln82_fu_469_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln82_fu_473_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln85_3_fu_478_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln83_fu_487_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_503_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln85_4_fu_510_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_496_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln85_3_fu_514_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln85_5_fu_520_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln85_4_fu_523_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln85_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_543_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln85_fu_553_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln85_1_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_572_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln85_1_fu_582_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln85_3_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_2_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln85_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln85_1_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_1_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln88_2_fu_627_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_1_fu_640_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln87_fu_653_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_657_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln87_fu_667_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln87_1_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component lenet_top_fcmp_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    lenet_top_fcmp_32dEe_U56 : component lenet_top_fcmp_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_222_p0,
        din1 => grp_fu_222_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_222_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                c_0_reg_129 <= select_ln85_1_reg_730;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_129 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                h_0_reg_153 <= select_ln78_2_reg_751;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_0_reg_153 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln82_reg_766 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_188 <= select_ln82_1_reg_780;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_188 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten24_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_flatten24_reg_118 <= add_ln77_reg_710;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten24_reg_118 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_flatten6_reg_141 <= select_ln78_3_reg_838;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten6_reg_141 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln82_reg_766 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_177 <= add_ln82_1_reg_770;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_177 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln82_reg_766 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_0_reg_211 <= j_reg_801;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_reg_211 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    max_value_1_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_reg_766_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                max_value_1_reg_199 <= max_value_fu_620_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                max_value_1_reg_199 <= ap_const_lv32_D368D4A5;
            end if; 
        end if;
    end process;

    w_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                w_0_reg_165 <= w_reg_833;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_0_reg_165 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln77_reg_710 <= add_ln77_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln82_1_reg_770 <= add_ln82_1_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln82_fu_429_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln85_1_reg_791 <= add_ln85_1_fu_491_p2;
                add_ln85_2_reg_785 <= add_ln85_2_fu_482_p2;
                select_ln82_reg_775 <= select_ln82_fu_453_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    add_ln85_reg_735(8 downto 1) <= add_ln85_fu_296_p2(8 downto 1);
                add_ln88_2_reg_756 <= add_ln88_2_fu_415_p2;
                    select_ln78_1_reg_746(3 downto 1) <= select_ln78_1_fu_378_p3(3 downto 1);
                select_ln78_2_reg_751 <= select_ln78_2_fu_386_p3;
                select_ln78_reg_740 <= select_ln78_fu_362_p3;
                select_ln85_1_reg_730 <= select_ln85_1_fu_261_p3;
                    shl_ln85_1_reg_761(3 downto 1) <= shl_ln85_1_fu_421_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln88_3_reg_828 <= add_ln88_3_fu_630_p2;
                select_ln78_3_reg_838 <= select_ln78_3_fu_646_p3;
                w_reg_833 <= w_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_229_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln78_reg_715 <= icmp_ln78_fu_241_p2;
                select_ln85_reg_724 <= select_ln85_fu_247_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln82_reg_766 <= icmp_ln82_fu_429_p2;
                icmp_ln82_reg_766_pp0_iter1_reg <= icmp_ln82_reg_766;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln82_reg_766 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln85_1_reg_818 <= icmp_ln85_1_fu_563_p2;
                icmp_ln85_reg_813 <= icmp_ln85_fu_557_p2;
                input_load_reg_806 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_reg_766 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                j_reg_801 <= j_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln82_fu_429_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln82_1_reg_780 <= select_ln82_1_fu_461_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_1_reg_843 <= grp_fu_222_p2;
            end if;
        end if;
    end process;
    add_ln85_reg_735(0) <= '0';
    select_ln78_1_reg_746(0) <= '0';
    shl_ln85_1_reg_761(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln77_fu_229_p2, icmp_ln82_fu_429_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln77_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln82_fu_429_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln82_fu_429_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln77_fu_235_p2 <= std_logic_vector(unsigned(indvar_flatten24_reg_118) + unsigned(ap_const_lv9_1));
    add_ln78_1_fu_640_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(indvar_flatten6_reg_141));
    add_ln82_1_fu_435_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_181_p4) + unsigned(ap_const_lv3_1));
    add_ln82_fu_473_p2 <= std_logic_vector(unsigned(zext_ln82_fu_469_p1) + unsigned(select_ln78_1_reg_746));
    add_ln85_1_fu_491_p2 <= std_logic_vector(unsigned(zext_ln83_fu_487_p1) + unsigned(shl_ln85_1_reg_761));
    add_ln85_2_fu_482_p2 <= std_logic_vector(unsigned(add_ln85_reg_735) + unsigned(zext_ln85_3_fu_478_p1));
    add_ln85_3_fu_514_p2 <= std_logic_vector(unsigned(zext_ln85_4_fu_510_p1) + unsigned(p_shl1_cast_fu_496_p3));
    add_ln85_4_fu_523_p2 <= std_logic_vector(unsigned(add_ln85_3_fu_514_p2) + unsigned(zext_ln85_5_fu_520_p1));
    add_ln85_fu_296_p2 <= std_logic_vector(unsigned(zext_ln85_2_fu_292_p1) + unsigned(zext_ln85_1_fu_280_p1));
    add_ln88_1_fu_397_p2 <= std_logic_vector(unsigned(add_ln88_fu_314_p2) + unsigned(zext_ln78_fu_393_p1));
    add_ln88_2_fu_415_p2 <= std_logic_vector(unsigned(zext_ln88_1_fu_403_p1) + unsigned(p_shl_cast_fu_407_p3));
    add_ln88_3_fu_630_p2 <= std_logic_vector(unsigned(add_ln88_2_reg_756) + unsigned(zext_ln88_2_fu_627_p1));
    add_ln88_fu_314_p2 <= std_logic_vector(unsigned(zext_ln85_fu_268_p1) + unsigned(zext_ln88_fu_310_p1));
    and_ln85_1_fu_614_p2 <= (grp_fu_222_p2 and and_ln85_fu_608_p2);
    and_ln85_2_fu_346_p2 <= (xor_ln85_fu_335_p2 and icmp_ln79_fu_340_p2);
    and_ln85_fu_608_p2 <= (or_ln85_fu_586_p2 and or_ln85_1_fu_602_p2);
    and_ln87_fu_689_p2 <= (tmp_1_reg_843 and or_ln87_fu_683_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln82_fu_429_p2)
    begin
        if ((icmp_ln82_fu_429_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln77_fu_229_p2)
    begin
        if ((((icmp_ln77_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_192_p4_assign_proc : process(i_0_reg_188, icmp_ln82_reg_766, ap_CS_fsm_pp0_stage0, select_ln82_1_reg_780, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln82_reg_766 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_phi_fu_192_p4 <= select_ln82_1_reg_780;
        else 
            ap_phi_mux_i_0_phi_fu_192_p4 <= i_0_reg_188;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_181_p4_assign_proc : process(indvar_flatten_reg_177, icmp_ln82_reg_766, ap_CS_fsm_pp0_stage0, add_ln82_1_reg_770, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln82_reg_766 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_181_p4 <= add_ln82_1_reg_770;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_181_p4 <= indvar_flatten_reg_177;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_215_p4_assign_proc : process(j_0_reg_211, icmp_ln82_reg_766, ap_CS_fsm_pp0_stage0, j_reg_801, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln82_reg_766 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_0_phi_fu_215_p4 <= j_reg_801;
        else 
            ap_phi_mux_j_0_phi_fu_215_p4 <= j_0_reg_211;
        end if; 
    end process;

    ap_phi_mux_max_value_1_phi_fu_203_p4 <= max_value_1_reg_199;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln77_fu_229_p2)
    begin
        if (((icmp_ln77_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln85_1_fu_569_p1 <= input_load_reg_806;
    bitcast_ln85_fu_539_p1 <= max_value_1_reg_199;
    bitcast_ln87_fu_653_p1 <= max_value_1_reg_199;
    c_fu_255_p2 <= std_logic_vector(unsigned(c_0_reg_129) + unsigned(ap_const_lv5_1));

    grp_fu_222_p0_assign_proc : process(max_value_1_reg_199, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, ap_block_pp0_stage0, ap_phi_mux_max_value_1_phi_fu_203_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_222_p0 <= max_value_1_reg_199;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_222_p0 <= ap_phi_mux_max_value_1_phi_fu_203_p4;
        else 
            grp_fu_222_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_222_p1_assign_proc : process(input_r_q0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_222_p1 <= ap_const_lv32_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_222_p1 <= input_r_q0;
        else 
            grp_fu_222_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_fu_352_p2 <= std_logic_vector(unsigned(select_ln85_reg_724) + unsigned(ap_const_lv3_1));
    i_fu_441_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_i_0_phi_fu_192_p4));
    icmp_ln77_fu_229_p2 <= "1" when (indvar_flatten24_reg_118 = ap_const_lv9_190) else "0";
    icmp_ln78_fu_241_p2 <= "1" when (indvar_flatten6_reg_141 = ap_const_lv6_19) else "0";
    icmp_ln79_fu_340_p2 <= "1" when (w_0_reg_165 = ap_const_lv3_5) else "0";
    icmp_ln82_fu_429_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_181_p4 = ap_const_lv3_4) else "0";
    icmp_ln83_fu_447_p2 <= "1" when (ap_phi_mux_j_0_phi_fu_215_p4 = ap_const_lv2_2) else "0";
    icmp_ln85_1_fu_563_p2 <= "1" when (trunc_ln85_fu_553_p1 = ap_const_lv23_0) else "0";
    icmp_ln85_2_fu_590_p2 <= "0" when (tmp_4_fu_572_p4 = ap_const_lv8_FF) else "1";
    icmp_ln85_3_fu_596_p2 <= "1" when (trunc_ln85_1_fu_582_p1 = ap_const_lv23_0) else "0";
    icmp_ln85_fu_557_p2 <= "0" when (tmp_3_fu_543_p4 = ap_const_lv8_FF) else "1";
    icmp_ln87_1_fu_677_p2 <= "1" when (trunc_ln87_fu_667_p1 = ap_const_lv23_0) else "0";
    icmp_ln87_fu_671_p2 <= "0" when (tmp_fu_657_p4 = ap_const_lv8_FF) else "1";
    input_r_address0 <= zext_ln85_6_fu_529_p1(11 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_534_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln82_reg_775));
    max_value_fu_620_p3 <= 
        max_value_1_reg_199 when (and_ln85_1_fu_614_p2(0) = '1') else 
        input_load_reg_806;
    or_ln78_fu_357_p2 <= (icmp_ln78_reg_715 or and_ln85_2_fu_346_p2);
    or_ln85_1_fu_602_p2 <= (icmp_ln85_3_fu_596_p2 or icmp_ln85_2_fu_590_p2);
    or_ln85_fu_586_p2 <= (icmp_ln85_reg_813 or icmp_ln85_1_reg_818);
    or_ln87_fu_683_p2 <= (icmp_ln87_fu_671_p2 or icmp_ln87_1_fu_677_p2);
    output_r_address0 <= zext_ln88_3_fu_694_p1(9 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        max_value_1_reg_199 when (and_ln87_fu_689_p2(0) = '1') else 
        ap_const_lv32_0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_496_p3 <= (add_ln85_2_reg_785 & ap_const_lv3_0);
    p_shl_cast_fu_407_p3 <= (add_ln88_1_fu_397_p2 & ap_const_lv2_0);
    select_ln78_1_fu_378_p3 <= 
        shl_ln85_mid1_fu_370_p3 when (and_ln85_2_fu_346_p2(0) = '1') else 
        select_ln85_2_fu_328_p3;
    select_ln78_2_fu_386_p3 <= 
        h_fu_352_p2 when (and_ln85_2_fu_346_p2(0) = '1') else 
        select_ln85_reg_724;
    select_ln78_3_fu_646_p3 <= 
        ap_const_lv6_1 when (icmp_ln78_reg_715(0) = '1') else 
        add_ln78_1_fu_640_p2;
    select_ln78_fu_362_p3 <= 
        ap_const_lv3_0 when (or_ln78_fu_357_p2(0) = '1') else 
        w_0_reg_165;
    select_ln82_1_fu_461_p3 <= 
        i_fu_441_p2 when (icmp_ln83_fu_447_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_192_p4;
    select_ln82_fu_453_p3 <= 
        ap_const_lv2_0 when (icmp_ln83_fu_447_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_215_p4;
    select_ln85_1_fu_261_p3 <= 
        c_fu_255_p2 when (icmp_ln78_reg_715(0) = '1') else 
        c_0_reg_129;
    select_ln85_2_fu_328_p3 <= 
        ap_const_lv4_0 when (icmp_ln78_reg_715(0) = '1') else 
        shl_ln_fu_320_p3;
    select_ln85_fu_247_p3 <= 
        ap_const_lv3_0 when (icmp_ln78_fu_241_p2(0) = '1') else 
        h_0_reg_153;
    shl_ln85_1_fu_421_p3 <= (select_ln78_fu_362_p3 & ap_const_lv1_0);
    shl_ln85_mid1_fu_370_p3 <= (h_fu_352_p2 & ap_const_lv1_0);
    shl_ln_fu_320_p3 <= (h_0_reg_153 & ap_const_lv1_0);
    tmp_3_fu_543_p4 <= bitcast_ln85_fu_539_p1(30 downto 23);
    tmp_4_fu_572_p4 <= bitcast_ln85_1_fu_569_p1(30 downto 23);
    tmp_6_fu_503_p3 <= (add_ln85_2_reg_785 & ap_const_lv1_0);
    tmp_7_fu_272_p3 <= (select_ln85_1_fu_261_p3 & ap_const_lv3_0);
    tmp_8_fu_284_p3 <= (select_ln85_1_fu_261_p3 & ap_const_lv1_0);
    tmp_9_fu_302_p3 <= (select_ln85_1_fu_261_p3 & ap_const_lv2_0);
    tmp_fu_657_p4 <= bitcast_ln87_fu_653_p1(30 downto 23);
    trunc_ln85_1_fu_582_p1 <= bitcast_ln85_1_fu_569_p1(23 - 1 downto 0);
    trunc_ln85_fu_553_p1 <= bitcast_ln85_fu_539_p1(23 - 1 downto 0);
    trunc_ln87_fu_667_p1 <= bitcast_ln87_fu_653_p1(23 - 1 downto 0);
    w_fu_635_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln78_reg_740));
    xor_ln85_fu_335_p2 <= (icmp_ln78_reg_715 xor ap_const_lv1_1);
    zext_ln78_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln78_2_fu_386_p3),8));
    zext_ln82_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln82_1_fu_461_p3),4));
    zext_ln83_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln82_fu_453_p3),4));
    zext_ln85_1_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_272_p3),9));
    zext_ln85_2_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_284_p3),9));
    zext_ln85_3_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln82_fu_473_p2),9));
    zext_ln85_4_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_503_p3),12));
    zext_ln85_5_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_1_reg_791),12));
    zext_ln85_6_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_4_fu_523_p2),64));
    zext_ln85_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln85_1_fu_261_p3),8));
    zext_ln88_1_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln88_1_fu_397_p2),10));
    zext_ln88_2_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln78_reg_740),10));
    zext_ln88_3_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln88_3_reg_828),64));
    zext_ln88_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_302_p3),8));
end behav;
