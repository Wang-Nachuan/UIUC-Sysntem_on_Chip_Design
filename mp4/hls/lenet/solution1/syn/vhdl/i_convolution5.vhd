-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity i_convolution5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    weights_ce0 : OUT STD_LOGIC;
    weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_0_0_ce0 : OUT STD_LOGIC;
    output_0_0_we0 : OUT STD_LOGIC;
    output_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of i_convolution5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten15_reg_151 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_0_reg_162 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_173 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_reg_184 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_0_reg_207 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln97_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal co_fu_238_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_reg_551 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln104_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_556 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_fu_256_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln100_reg_562 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln100_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_567 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln100_reg_567_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_567_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln100_fu_266_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_reg_571 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln101_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_576 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_1_fu_292_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln104_1_reg_581 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln104_3_fu_342_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln104_3_reg_587 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln104_1_fu_376_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln104_1_reg_594 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln104_4_fu_382_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln104_4_reg_600 : STD_LOGIC_VECTOR (11 downto 0);
    signal ci_fu_387_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ci_reg_606 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln101_1_fu_393_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln101_1_reg_611 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln104_8_fu_483_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln104_8_reg_621 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal input_load_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_load_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal select_ln101_fu_493_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln101_reg_641 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state7_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal bias_load_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal sum_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal sum_1_fu_540_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_reg_673 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal co_0_reg_140 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_phi_mux_indvar_flatten15_phi_fu_155_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_0_phi_fu_166_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_177_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_j_0_phi_fu_188_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_sum_2_phi_fu_199_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ci_0_phi_fu_211_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln104_9_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln104_12_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_218_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_9_fu_248_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_fu_272_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln102_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_fu_284_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln104_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln104_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_322_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln104_2_fu_334_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_358_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln104_7_fu_366_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln104_6_fu_354_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln104_2_fu_300_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln104_fu_370_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln104_5_fu_350_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl5_cast_fu_411_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln104_8_fu_408_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln104_4_fu_405_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln104_2_fu_418_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln104_3_fu_424_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_438_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln104_11_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_10_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_1_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln104_5_fu_449_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln104_6_fu_455_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln104_1_fu_465_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_cast_fu_469_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln104_fu_461_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln104_3_fu_402_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln104_7_fu_477_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal bitcast_ln108_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_502_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln108_fu_512_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln108_1_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln108_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln108_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln108_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component lenet_top_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_fcmp_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    lenet_top_fadd_32bkb_U59 : component lenet_top_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_218_p0,
        din1 => grp_fu_218_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_218_p2);

    lenet_top_fmul_32cud_U60 : component lenet_top_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_load_reg_636,
        din1 => input_load_reg_631,
        ce => ap_const_logic_1,
        dout => grp_fu_223_p2);

    lenet_top_fcmp_32dEe_U61 : component lenet_top_fcmp_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_666,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_227_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln97_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln97_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ci_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_reg_567 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ci_0_reg_207 <= ci_reg_606;
            elsif (((icmp_ln97_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ci_0_reg_207 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    co_0_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                co_0_reg_140 <= co_reg_551;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                co_0_reg_140 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_reg_567 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_162 <= select_ln104_1_reg_581;
            elsif (((icmp_ln97_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_162 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten15_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_reg_567 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten15_reg_151 <= add_ln100_reg_571;
            elsif (((icmp_ln97_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten15_reg_151 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_reg_567 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_173 <= select_ln101_reg_641;
            elsif (((icmp_ln97_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_173 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_0_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_reg_567 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_reg_184 <= select_ln104_3_reg_587;
            elsif (((icmp_ln97_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_184 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    sum_2_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_reg_567_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                sum_2_reg_195 <= grp_fu_218_p2;
            elsif (((icmp_ln97_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                sum_2_reg_195 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln100_reg_571 <= add_ln100_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_260_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln101_1_reg_611 <= add_ln101_1_fu_393_p2;
                add_ln104_1_reg_594 <= add_ln104_1_fu_376_p2;
                add_ln104_4_reg_600 <= add_ln104_4_fu_382_p2;
                icmp_ln101_reg_576 <= icmp_ln101_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_reg_567 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln104_8_reg_621 <= add_ln104_8_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                bias_load_reg_661 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_260_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ci_reg_606 <= ci_fu_387_p2;
                select_ln104_1_reg_581 <= select_ln104_1_fu_292_p3;
                select_ln104_3_reg_587 <= select_ln104_3_fu_342_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_reg_551 <= co_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln100_reg_567 <= icmp_ln100_fu_260_p2;
                icmp_ln100_reg_567_pp0_iter1_reg <= icmp_ln100_reg_567;
                icmp_ln100_reg_567_pp0_iter2_reg <= icmp_ln100_reg_567_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_reg_567 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                input_load_reg_631 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_reg_567 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                select_ln101_reg_641 <= select_ln101_fu_493_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                sum_1_reg_673 <= sum_1_fu_540_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                sum_reg_666 <= grp_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_reg_567_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_6_reg_646 <= grp_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_reg_567 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                weights_load_reg_636 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln100_reg_562(10 downto 4) <= zext_ln100_fu_256_p1(10 downto 4);
                    zext_ln104_reg_556(6 downto 0) <= zext_ln104_fu_244_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln104_reg_556(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln100_reg_562(3 downto 0) <= "0000";
    zext_ln100_reg_562(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln97_fu_232_p2, ap_CS_fsm_state2, icmp_ln100_fu_260_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln97_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln100_fu_260_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln100_fu_260_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln100_fu_266_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten15_phi_fu_155_p4) + unsigned(ap_const_lv9_1));
    add_ln101_1_fu_393_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_177_p4));
    add_ln104_1_fu_376_p2 <= std_logic_vector(unsigned(zext_ln104_2_fu_300_p1) + unsigned(add_ln104_fu_370_p2));
    add_ln104_2_fu_418_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_411_p3) + unsigned(zext_ln104_8_fu_408_p1));
    add_ln104_3_fu_424_p2 <= std_logic_vector(unsigned(zext_ln104_4_fu_405_p1) + unsigned(add_ln104_2_fu_418_p2));
    add_ln104_4_fu_382_p2 <= std_logic_vector(unsigned(zext_ln104_5_fu_350_p1) + unsigned(zext_ln100_reg_562));
    add_ln104_5_fu_449_p2 <= std_logic_vector(unsigned(zext_ln104_11_fu_445_p1) + unsigned(zext_ln104_10_fu_435_p1));
    add_ln104_6_fu_455_p2 <= std_logic_vector(unsigned(zext_ln104_1_fu_399_p1) + unsigned(add_ln104_5_fu_449_p2));
    add_ln104_7_fu_477_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_469_p3) + unsigned(trunc_ln104_fu_461_p1));
    add_ln104_8_fu_483_p2 <= std_logic_vector(unsigned(zext_ln104_3_fu_402_p1) + unsigned(add_ln104_7_fu_477_p2));
    add_ln104_fu_370_p2 <= std_logic_vector(unsigned(zext_ln104_7_fu_366_p1) + unsigned(zext_ln104_6_fu_354_p1));
    and_ln104_fu_316_p2 <= (xor_ln104_fu_304_p2 and icmp_ln102_fu_310_p2);
    and_ln108_fu_534_p2 <= (or_ln108_fu_528_p2 and grp_fu_227_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(7);
    ap_CS_fsm_state17 <= ap_CS_fsm(8);
    ap_CS_fsm_state18 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(13);
    ap_CS_fsm_state23 <= ap_CS_fsm(14);
    ap_CS_fsm_state24 <= ap_CS_fsm(15);
    ap_CS_fsm_state25 <= ap_CS_fsm(16);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln100_fu_260_p2)
    begin
        if ((icmp_ln100_fu_260_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln97_fu_232_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln97_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ci_0_phi_fu_211_p4_assign_proc : process(ci_0_reg_207, icmp_ln100_reg_567, ap_CS_fsm_pp0_stage0, ci_reg_606, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln100_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_ci_0_phi_fu_211_p4 <= ci_reg_606;
        else 
            ap_phi_mux_ci_0_phi_fu_211_p4 <= ci_0_reg_207;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_166_p4_assign_proc : process(i_0_reg_162, icmp_ln100_reg_567, ap_CS_fsm_pp0_stage0, select_ln104_1_reg_581, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln100_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_phi_fu_166_p4 <= select_ln104_1_reg_581;
        else 
            ap_phi_mux_i_0_phi_fu_166_p4 <= i_0_reg_162;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten15_phi_fu_155_p4_assign_proc : process(indvar_flatten15_reg_151, icmp_ln100_reg_567, ap_CS_fsm_pp0_stage0, add_ln100_reg_571, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln100_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten15_phi_fu_155_p4 <= add_ln100_reg_571;
        else 
            ap_phi_mux_indvar_flatten15_phi_fu_155_p4 <= indvar_flatten15_reg_151;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_177_p4_assign_proc : process(indvar_flatten_reg_173, icmp_ln100_reg_567, ap_CS_fsm_pp0_stage0, select_ln101_reg_641, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln100_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_177_p4 <= select_ln101_reg_641;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_177_p4 <= indvar_flatten_reg_173;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_188_p4_assign_proc : process(j_0_reg_184, icmp_ln100_reg_567, ap_CS_fsm_pp0_stage0, select_ln104_3_reg_587, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln100_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_0_phi_fu_188_p4 <= select_ln104_3_reg_587;
        else 
            ap_phi_mux_j_0_phi_fu_188_p4 <= j_0_reg_184;
        end if; 
    end process;

    ap_phi_mux_sum_2_phi_fu_199_p4 <= sum_2_reg_195;

    ap_ready_assign_proc : process(icmp_ln97_fu_232_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln97_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln104_reg_556(7 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln108_fu_499_p1 <= sum_reg_666;
    ci_fu_387_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln104_2_fu_334_p3));
    co_fu_238_p2 <= std_logic_vector(unsigned(co_0_reg_140) + unsigned(ap_const_lv7_1));

    grp_fu_218_p0_assign_proc : process(sum_2_reg_195, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_phi_mux_sum_2_phi_fu_199_p4, ap_block_pp0_stage3, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_218_p0 <= sum_2_reg_195;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_218_p0 <= ap_phi_mux_sum_2_phi_fu_199_p4;
        else 
            grp_fu_218_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_218_p1_assign_proc : process(ap_CS_fsm_pp0_stage3, tmp_6_reg_646, bias_load_reg_661, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_218_p1 <= bias_load_reg_661;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_218_p1 <= tmp_6_reg_646;
        else 
            grp_fu_218_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_272_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_i_0_phi_fu_166_p4));
    icmp_ln100_fu_260_p2 <= "1" when (ap_phi_mux_indvar_flatten15_phi_fu_155_p4 = ap_const_lv9_190) else "0";
    icmp_ln101_fu_278_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_177_p4 = ap_const_lv8_50) else "0";
    icmp_ln102_fu_310_p2 <= "1" when (ap_phi_mux_ci_0_phi_fu_211_p4 = ap_const_lv5_10) else "0";
    icmp_ln108_1_fu_522_p2 <= "1" when (trunc_ln108_fu_512_p1 = ap_const_lv23_0) else "0";
    icmp_ln108_fu_516_p2 <= "0" when (tmp_fu_502_p4 = ap_const_lv8_FF) else "1";
    icmp_ln97_fu_232_p2 <= "1" when (co_0_reg_140 = ap_const_lv7_78) else "0";
    input_r_address0 <= zext_ln104_9_fu_430_p1(9 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_322_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln104_fu_284_p3));
    or_ln104_fu_328_p2 <= (icmp_ln101_fu_278_p2 or and_ln104_fu_316_p2);
    or_ln108_fu_528_p2 <= (icmp_ln108_fu_516_p2 or icmp_ln108_1_fu_522_p2);
    output_0_0_address0 <= zext_ln104_reg_556(7 - 1 downto 0);

    output_0_0_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_0_0_ce0 <= ap_const_logic_1;
        else 
            output_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_0_d0 <= sum_1_reg_673;

    output_0_0_we0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_0_0_we0 <= ap_const_logic_1;
        else 
            output_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl5_cast_fu_411_p3 <= (add_ln104_1_reg_594 & ap_const_lv2_0);
    p_shl_cast_fu_469_p3 <= (trunc_ln104_1_fu_465_p1 & ap_const_lv2_0);
    select_ln101_fu_493_p3 <= 
        ap_const_lv8_1 when (icmp_ln101_reg_576(0) = '1') else 
        add_ln101_1_reg_611;
    select_ln104_1_fu_292_p3 <= 
        i_fu_272_p2 when (icmp_ln101_fu_278_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_166_p4;
    select_ln104_2_fu_334_p3 <= 
        ap_const_lv5_0 when (or_ln104_fu_328_p2(0) = '1') else 
        ap_phi_mux_ci_0_phi_fu_211_p4;
    select_ln104_3_fu_342_p3 <= 
        j_fu_322_p2 when (and_ln104_fu_316_p2(0) = '1') else 
        select_ln104_fu_284_p3;
    select_ln104_fu_284_p3 <= 
        ap_const_lv3_0 when (icmp_ln101_fu_278_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_188_p4;
    sum_1_fu_540_p3 <= 
        ap_const_lv32_0 when (and_ln108_fu_534_p2(0) = '1') else 
        sum_reg_666;
    tmp_10_fu_358_p3 <= (select_ln104_2_fu_334_p3 & ap_const_lv2_0);
    tmp_12_fu_438_p3 <= (add_ln104_4_reg_600 & ap_const_lv2_0);
    tmp_9_fu_248_p3 <= (co_0_reg_140 & ap_const_lv4_0);
    tmp_fu_502_p4 <= bitcast_ln108_fu_499_p1(30 downto 23);
    trunc_ln104_1_fu_465_p1 <= add_ln104_6_fu_455_p2(15 - 1 downto 0);
    trunc_ln104_fu_461_p1 <= add_ln104_6_fu_455_p2(17 - 1 downto 0);
    trunc_ln108_fu_512_p1 <= bitcast_ln108_fu_499_p1(23 - 1 downto 0);
    weights_address0 <= zext_ln104_12_fu_489_p1(16 - 1 downto 0);

    weights_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln104_fu_304_p2 <= (icmp_ln101_fu_278_p2 xor ap_const_lv1_1);
    zext_ln100_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_248_p3),12));
    zext_ln104_10_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_4_reg_600),64));
    zext_ln104_11_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_438_p3),64));
    zext_ln104_12_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_8_reg_621),64));
    zext_ln104_1_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln104_1_reg_581),64));
    zext_ln104_2_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln104_1_fu_292_p3),8));
    zext_ln104_3_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln104_3_reg_587),17));
    zext_ln104_4_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln104_3_reg_587),10));
    zext_ln104_5_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln104_2_fu_334_p3),12));
    zext_ln104_6_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln104_2_fu_334_p3),8));
    zext_ln104_7_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_358_p3),8));
    zext_ln104_8_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_1_reg_594),10));
    zext_ln104_9_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_3_fu_424_p2),64));
    zext_ln104_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_0_reg_140),64));
end behav;
