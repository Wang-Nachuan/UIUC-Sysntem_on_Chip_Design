-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity i_relu2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_we0 : OUT STD_LOGIC;
    input_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of i_relu2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_103_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_263 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln61_fu_139_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln61_reg_268 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln58_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_149_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_276 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln61_1_fu_188_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln61_1_reg_281 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln59_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_200_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_289 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal input_addr_reg_294 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln60_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln61_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_304 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_1_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_1_reg_309 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_58 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_69 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_0_reg_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln61_4_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln61_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_109_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_121_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln61_fu_117_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_1_fu_129_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln61_fu_133_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_2_fu_155_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln61_fu_159_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln61_fu_164_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_176_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_168_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln61_1_fu_184_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln61_3_fu_206_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln61_1_fu_210_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln61_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_224_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln61_1_fu_234_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln61_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_91_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component lenet_top_fcmp_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    lenet_top_fcmp_32dEe_U21 : component lenet_top_fcmp_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_r_q0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_91_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_58 <= i_reg_263;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_58 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_69 <= j_reg_276;
            elsif (((icmp_ln58_fu_97_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_69 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_80 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k_0_reg_80 <= k_reg_289;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_263 <= i_fu_103_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln61_1_reg_309 <= icmp_ln61_1_fu_244_p2;
                icmp_ln61_reg_304 <= icmp_ln61_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                input_addr_reg_294 <= zext_ln61_4_fu_215_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_276 <= j_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_289 <= k_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_97_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sext_ln61_reg_268(8 downto 1) <= sext_ln61_fu_139_p1(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    sub_ln61_1_reg_281(11 downto 1) <= sub_ln61_1_fu_188_p2(11 downto 1);
            end if;
        end if;
    end process;
    sext_ln61_reg_268(0) <= '0';
    sub_ln61_1_reg_281(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln58_fu_97_p2, ap_CS_fsm_state3, icmp_ln59_fu_143_p2, ap_CS_fsm_state4, icmp_ln60_fu_194_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln58_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln59_fu_143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln60_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln61_1_fu_210_p2 <= std_logic_vector(unsigned(sub_ln61_1_reg_281) + unsigned(zext_ln61_3_fu_206_p1));
    add_ln61_fu_159_p2 <= std_logic_vector(signed(sext_ln61_reg_268) + signed(zext_ln61_2_fu_155_p1));
    and_ln61_fu_254_p2 <= (or_ln61_fu_250_p2 and grp_fu_91_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln58_fu_97_p2)
    begin
        if ((((icmp_ln58_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln58_fu_97_p2)
    begin
        if (((icmp_ln58_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln61_fu_220_p1 <= input_r_q0;
    i_fu_103_p2 <= std_logic_vector(unsigned(i_0_reg_58) + unsigned(ap_const_lv3_1));
    icmp_ln58_fu_97_p2 <= "1" when (i_0_reg_58 = ap_const_lv3_6) else "0";
    icmp_ln59_fu_143_p2 <= "1" when (j_0_reg_69 = ap_const_lv4_E) else "0";
    icmp_ln60_fu_194_p2 <= "1" when (k_0_reg_80 = ap_const_lv4_E) else "0";
    icmp_ln61_1_fu_244_p2 <= "1" when (trunc_ln61_1_fu_234_p1 = ap_const_lv23_0) else "0";
    icmp_ln61_fu_238_p2 <= "0" when (tmp_fu_224_p4 = ap_const_lv8_FF) else "1";

    input_r_address0_assign_proc : process(ap_CS_fsm_state4, input_addr_reg_294, ap_CS_fsm_state6, zext_ln61_4_fu_215_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= input_addr_reg_294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address0 <= zext_ln61_4_fu_215_p1(11 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_r_d0 <= ap_const_lv32_0;

    input_r_we0_assign_proc : process(ap_CS_fsm_state6, and_ln61_fu_254_p2)
    begin
        if (((ap_const_lv1_1 = and_ln61_fu_254_p2) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_r_we0 <= ap_const_logic_1;
        else 
            input_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_149_p2 <= std_logic_vector(unsigned(j_0_reg_69) + unsigned(ap_const_lv4_1));
    k_fu_200_p2 <= std_logic_vector(unsigned(k_0_reg_80) + unsigned(ap_const_lv4_1));
    or_ln61_fu_250_p2 <= (icmp_ln61_reg_304 or icmp_ln61_1_reg_309);
    p_shl2_cast_fu_168_p3 <= (trunc_ln61_fu_164_p1 & ap_const_lv4_0);
        sext_ln61_1_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_176_p3),12));

        sext_ln61_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln61_fu_133_p2),9));

    sub_ln61_1_fu_188_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_168_p3) - unsigned(sext_ln61_1_fu_184_p1));
    sub_ln61_fu_133_p2 <= std_logic_vector(unsigned(zext_ln61_fu_117_p1) - unsigned(zext_ln61_1_fu_129_p1));
    tmp_2_fu_121_p3 <= (i_0_reg_58 & ap_const_lv1_0);
    tmp_5_fu_176_p3 <= (add_ln61_fu_159_p2 & ap_const_lv1_0);
    tmp_fu_224_p4 <= bitcast_ln61_fu_220_p1(30 downto 23);
    tmp_s_fu_109_p3 <= (i_0_reg_58 & ap_const_lv4_0);
    trunc_ln61_1_fu_234_p1 <= bitcast_ln61_fu_220_p1(23 - 1 downto 0);
    trunc_ln61_fu_164_p1 <= add_ln61_fu_159_p2(8 - 1 downto 0);
    zext_ln61_1_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_121_p3),8));
    zext_ln61_2_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_69),9));
    zext_ln61_3_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_80),12));
    zext_ln61_4_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_1_fu_210_p2),64));
    zext_ln61_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_109_p3),8));
end behav;
