-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet_top is
generic (
    C_M_AXI_DATA_INPUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_INPUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_INPUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_WEIGHT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_WEIGHT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_BIAS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_BIAS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_OUTPUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_OUTPUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_INPUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_INPUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_INPUT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_WEIGHT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_WEIGHT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_WEIGHT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_BIAS_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_BIAS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_BIAS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_OUTPUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_OUTPUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_OUTPUT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_DATA_INPUT_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_INPUT_AWREADY : IN STD_LOGIC;
    m_axi_DATA_INPUT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_INPUT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_INPUT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_INPUT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_WVALID : OUT STD_LOGIC;
    m_axi_DATA_INPUT_WREADY : IN STD_LOGIC;
    m_axi_DATA_INPUT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_INPUT_WLAST : OUT STD_LOGIC;
    m_axi_DATA_INPUT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_INPUT_ARREADY : IN STD_LOGIC;
    m_axi_DATA_INPUT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_INPUT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_INPUT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_INPUT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_RVALID : IN STD_LOGIC;
    m_axi_DATA_INPUT_RREADY : OUT STD_LOGIC;
    m_axi_DATA_INPUT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_RLAST : IN STD_LOGIC;
    m_axi_DATA_INPUT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_BVALID : IN STD_LOGIC;
    m_axi_DATA_INPUT_BREADY : OUT STD_LOGIC;
    m_axi_DATA_INPUT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_AWREADY : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_WEIGHT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_WEIGHT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_WEIGHT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_WVALID : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_WREADY : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_WEIGHT_WLAST : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_ARREADY : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_WEIGHT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_WEIGHT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_WEIGHT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_RVALID : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_RREADY : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_RLAST : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_BVALID : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_BREADY : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_BIAS_AWREADY : IN STD_LOGIC;
    m_axi_DATA_BIAS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_BIAS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BIAS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BIAS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_WVALID : OUT STD_LOGIC;
    m_axi_DATA_BIAS_WREADY : IN STD_LOGIC;
    m_axi_DATA_BIAS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_DATA_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_BIAS_WLAST : OUT STD_LOGIC;
    m_axi_DATA_BIAS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_BIAS_ARREADY : IN STD_LOGIC;
    m_axi_DATA_BIAS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_BIAS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BIAS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BIAS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_RVALID : IN STD_LOGIC;
    m_axi_DATA_BIAS_RREADY : OUT STD_LOGIC;
    m_axi_DATA_BIAS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_DATA_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_RLAST : IN STD_LOGIC;
    m_axi_DATA_BIAS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_BVALID : IN STD_LOGIC;
    m_axi_DATA_BIAS_BREADY : OUT STD_LOGIC;
    m_axi_DATA_BIAS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_AWREADY : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_OUTPUT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_OUTPUT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_OUTPUT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_WVALID : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_WREADY : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_OUTPUT_WLAST : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_ARREADY : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_OUTPUT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_OUTPUT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_OUTPUT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_RVALID : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_RREADY : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_RLAST : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_BVALID : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_BREADY : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_BUSER_WIDTH-1 downto 0);
    s_axi_CTL_AWVALID : IN STD_LOGIC;
    s_axi_CTL_AWREADY : OUT STD_LOGIC;
    s_axi_CTL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_ADDR_WIDTH-1 downto 0);
    s_axi_CTL_WVALID : IN STD_LOGIC;
    s_axi_CTL_WREADY : OUT STD_LOGIC;
    s_axi_CTL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH-1 downto 0);
    s_axi_CTL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTL_ARVALID : IN STD_LOGIC;
    s_axi_CTL_ARREADY : OUT STD_LOGIC;
    s_axi_CTL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_ADDR_WIDTH-1 downto 0);
    s_axi_CTL_RVALID : OUT STD_LOGIC;
    s_axi_CTL_RREADY : IN STD_LOGIC;
    s_axi_CTL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH-1 downto 0);
    s_axi_CTL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTL_BVALID : OUT STD_LOGIC;
    s_axi_CTL_BREADY : IN STD_LOGIC;
    s_axi_CTL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of lenet_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lenet_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.657680,HLS_SYN_LAT=551271,HLS_SYN_TPT=none,HLS_SYN_MEM=175,HLS_SYN_DSP=51,HLS_SYN_FF=44101,HLS_SYN_LUT=38645,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (31 downto 0);
    signal weights1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias3 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights5 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias5 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights6 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias6 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_INPUT_AWREADY : STD_LOGIC;
    signal DATA_INPUT_WREADY : STD_LOGIC;
    signal DATA_INPUT_ARVALID : STD_LOGIC;
    signal DATA_INPUT_ARREADY : STD_LOGIC;
    signal DATA_INPUT_RVALID : STD_LOGIC;
    signal DATA_INPUT_RREADY : STD_LOGIC;
    signal DATA_INPUT_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_INPUT_RLAST : STD_LOGIC;
    signal DATA_INPUT_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_INPUT_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_INPUT_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_INPUT_BVALID : STD_LOGIC;
    signal DATA_INPUT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_INPUT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_INPUT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_AWREADY : STD_LOGIC;
    signal DATA_WEIGHT_WREADY : STD_LOGIC;
    signal DATA_WEIGHT_ARVALID : STD_LOGIC;
    signal DATA_WEIGHT_ARREADY : STD_LOGIC;
    signal DATA_WEIGHT_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_WEIGHT_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_WEIGHT_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal DATA_WEIGHT_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_WEIGHT_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_WEIGHT_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal DATA_WEIGHT_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal DATA_WEIGHT_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal DATA_WEIGHT_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal DATA_WEIGHT_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_RVALID : STD_LOGIC;
    signal DATA_WEIGHT_RREADY : STD_LOGIC;
    signal DATA_WEIGHT_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_WEIGHT_RLAST : STD_LOGIC;
    signal DATA_WEIGHT_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_WEIGHT_BVALID : STD_LOGIC;
    signal DATA_WEIGHT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_WEIGHT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_AWREADY : STD_LOGIC;
    signal DATA_BIAS_WREADY : STD_LOGIC;
    signal DATA_BIAS_ARVALID : STD_LOGIC;
    signal DATA_BIAS_ARREADY : STD_LOGIC;
    signal DATA_BIAS_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_BIAS_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_BIAS_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal DATA_BIAS_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_BIAS_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_BIAS_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal DATA_BIAS_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal DATA_BIAS_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal DATA_BIAS_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal DATA_BIAS_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_RVALID : STD_LOGIC;
    signal DATA_BIAS_RREADY : STD_LOGIC;
    signal DATA_BIAS_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_BIAS_RLAST : STD_LOGIC;
    signal DATA_BIAS_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_BIAS_BVALID : STD_LOGIC;
    signal DATA_BIAS_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_BIAS_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_OUTPUT_AWVALID : STD_LOGIC;
    signal DATA_OUTPUT_AWREADY : STD_LOGIC;
    signal DATA_OUTPUT_WVALID : STD_LOGIC;
    signal DATA_OUTPUT_WREADY : STD_LOGIC;
    signal DATA_OUTPUT_ARREADY : STD_LOGIC;
    signal DATA_OUTPUT_RVALID : STD_LOGIC;
    signal DATA_OUTPUT_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_OUTPUT_RLAST : STD_LOGIC;
    signal DATA_OUTPUT_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_OUTPUT_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_OUTPUT_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_OUTPUT_BVALID : STD_LOGIC;
    signal DATA_OUTPUT_BREADY : STD_LOGIC;
    signal DATA_OUTPUT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_OUTPUT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_OUTPUT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal output1_reg_478 : STD_LOGIC_VECTOR (29 downto 0);
    signal bias_reg_483 : STD_LOGIC_VECTOR (29 downto 0);
    signal weights_reg_488 : STD_LOGIC_VECTOR (29 downto 0);
    signal bias2_reg_493 : STD_LOGIC_VECTOR (29 downto 0);
    signal weights2_reg_498 : STD_LOGIC_VECTOR (29 downto 0);
    signal bias4_reg_503 : STD_LOGIC_VECTOR (29 downto 0);
    signal weights4_reg_508 : STD_LOGIC_VECTOR (29 downto 0);
    signal bias7_reg_513 : STD_LOGIC_VECTOR (29 downto 0);
    signal weights7_reg_518 : STD_LOGIC_VECTOR (29 downto 0);
    signal input1_reg_523 : STD_LOGIC_VECTOR (29 downto 0);
    signal input_buf_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_buf_0_ce0 : STD_LOGIC;
    signal input_buf_0_we0 : STD_LOGIC;
    signal input_buf_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_buf_0_ce1 : STD_LOGIC;
    signal input_buf_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights1_buf_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights1_buf_0_ce0 : STD_LOGIC;
    signal weights1_buf_0_we0 : STD_LOGIC;
    signal weights1_buf_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights1_buf_0_ce1 : STD_LOGIC;
    signal weights1_buf_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights3_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights3_buf_ce0 : STD_LOGIC;
    signal weights3_buf_we0 : STD_LOGIC;
    signal weights3_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights3_buf_ce1 : STD_LOGIC;
    signal weights3_buf_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights5_buf_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights5_buf_ce0 : STD_LOGIC;
    signal weights5_buf_we0 : STD_LOGIC;
    signal weights5_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias1_buf_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bias1_buf_ce0 : STD_LOGIC;
    signal bias1_buf_we0 : STD_LOGIC;
    signal bias1_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias3_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bias3_buf_ce0 : STD_LOGIC;
    signal bias3_buf_we0 : STD_LOGIC;
    signal bias3_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias5_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias5_buf_ce0 : STD_LOGIC;
    signal bias5_buf_we0 : STD_LOGIC;
    signal bias5_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_inter_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal input2_inter_ce0 : STD_LOGIC;
    signal input2_inter_we0 : STD_LOGIC;
    signal input2_inter_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input3_inter_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal input3_inter_ce0 : STD_LOGIC;
    signal input3_inter_we0 : STD_LOGIC;
    signal input3_inter_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input3_inter_ce1 : STD_LOGIC;
    signal input3_inter_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input4_inter_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal input4_inter_ce0 : STD_LOGIC;
    signal input4_inter_we0 : STD_LOGIC;
    signal input4_inter_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input5_inter_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal input5_inter_ce0 : STD_LOGIC;
    signal input5_inter_we0 : STD_LOGIC;
    signal input5_inter_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input6_inter_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal input6_inter_0_0_ce0 : STD_LOGIC;
    signal input6_inter_0_0_we0 : STD_LOGIC;
    signal input6_inter_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_buf_ce0 : STD_LOGIC;
    signal output_buf_we0 : STD_LOGIC;
    signal output_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_convolution3_fu_266_ap_start : STD_LOGIC;
    signal grp_i_convolution3_fu_266_ap_done : STD_LOGIC;
    signal grp_i_convolution3_fu_266_ap_idle : STD_LOGIC;
    signal grp_i_convolution3_fu_266_ap_ready : STD_LOGIC;
    signal grp_i_convolution3_fu_266_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_i_convolution3_fu_266_input_r_ce0 : STD_LOGIC;
    signal grp_i_convolution3_fu_266_input_r_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_i_convolution3_fu_266_input_r_ce1 : STD_LOGIC;
    signal grp_i_convolution3_fu_266_weights_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_i_convolution3_fu_266_weights_ce0 : STD_LOGIC;
    signal grp_i_convolution3_fu_266_weights_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_i_convolution3_fu_266_weights_ce1 : STD_LOGIC;
    signal grp_i_convolution3_fu_266_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_convolution3_fu_266_bias_ce0 : STD_LOGIC;
    signal grp_i_convolution3_fu_266_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_i_convolution3_fu_266_output_r_ce0 : STD_LOGIC;
    signal grp_i_convolution3_fu_266_output_r_we0 : STD_LOGIC;
    signal grp_i_convolution3_fu_266_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_convolution1_fu_274_ap_start : STD_LOGIC;
    signal grp_i_convolution1_fu_274_ap_done : STD_LOGIC;
    signal grp_i_convolution1_fu_274_ap_idle : STD_LOGIC;
    signal grp_i_convolution1_fu_274_ap_ready : STD_LOGIC;
    signal grp_i_convolution1_fu_274_input_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_i_convolution1_fu_274_input_0_ce0 : STD_LOGIC;
    signal grp_i_convolution1_fu_274_input_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_i_convolution1_fu_274_input_0_ce1 : STD_LOGIC;
    signal grp_i_convolution1_fu_274_weights_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_i_convolution1_fu_274_weights_0_ce0 : STD_LOGIC;
    signal grp_i_convolution1_fu_274_weights_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_i_convolution1_fu_274_weights_0_ce1 : STD_LOGIC;
    signal grp_i_convolution1_fu_274_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_i_convolution1_fu_274_bias_ce0 : STD_LOGIC;
    signal grp_i_convolution1_fu_274_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_i_convolution1_fu_274_output_r_ce0 : STD_LOGIC;
    signal grp_i_convolution1_fu_274_output_r_we0 : STD_LOGIC;
    signal grp_i_convolution1_fu_274_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_convolution5_fu_282_ap_start : STD_LOGIC;
    signal grp_i_convolution5_fu_282_ap_done : STD_LOGIC;
    signal grp_i_convolution5_fu_282_ap_idle : STD_LOGIC;
    signal grp_i_convolution5_fu_282_ap_ready : STD_LOGIC;
    signal grp_i_convolution5_fu_282_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_i_convolution5_fu_282_input_r_ce0 : STD_LOGIC;
    signal grp_i_convolution5_fu_282_weights_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_i_convolution5_fu_282_weights_ce0 : STD_LOGIC;
    signal grp_i_convolution5_fu_282_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_i_convolution5_fu_282_bias_ce0 : STD_LOGIC;
    signal grp_i_convolution5_fu_282_output_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_i_convolution5_fu_282_output_0_0_ce0 : STD_LOGIC;
    signal grp_i_convolution5_fu_282_output_0_0_we0 : STD_LOGIC;
    signal grp_i_convolution5_fu_282_output_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_fc6_fu_290_ap_start : STD_LOGIC;
    signal grp_i_fc6_fu_290_ap_done : STD_LOGIC;
    signal grp_i_fc6_fu_290_ap_idle : STD_LOGIC;
    signal grp_i_fc6_fu_290_ap_ready : STD_LOGIC;
    signal grp_i_fc6_fu_290_input_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_i_fc6_fu_290_input_0_0_ce0 : STD_LOGIC;
    signal grp_i_fc6_fu_290_m_axi_weights_AWVALID : STD_LOGIC;
    signal grp_i_fc6_fu_290_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_WVALID : STD_LOGIC;
    signal grp_i_fc6_fu_290_m_axi_weights_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_WLAST : STD_LOGIC;
    signal grp_i_fc6_fu_290_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_ARVALID : STD_LOGIC;
    signal grp_i_fc6_fu_290_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_i_fc6_fu_290_m_axi_weights_RREADY : STD_LOGIC;
    signal grp_i_fc6_fu_290_m_axi_weights_BREADY : STD_LOGIC;
    signal grp_i_fc6_fu_290_m_axi_bias_AWVALID : STD_LOGIC;
    signal grp_i_fc6_fu_290_m_axi_bias_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_WVALID : STD_LOGIC;
    signal grp_i_fc6_fu_290_m_axi_bias_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_WLAST : STD_LOGIC;
    signal grp_i_fc6_fu_290_m_axi_bias_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_ARVALID : STD_LOGIC;
    signal grp_i_fc6_fu_290_m_axi_bias_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_i_fc6_fu_290_m_axi_bias_RREADY : STD_LOGIC;
    signal grp_i_fc6_fu_290_m_axi_bias_BREADY : STD_LOGIC;
    signal grp_i_fc6_fu_290_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_i_fc6_fu_290_output_r_ce0 : STD_LOGIC;
    signal grp_i_fc6_fu_290_output_r_we0 : STD_LOGIC;
    signal grp_i_fc6_fu_290_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_max_pooling2_fu_302_ap_start : STD_LOGIC;
    signal grp_i_max_pooling2_fu_302_ap_done : STD_LOGIC;
    signal grp_i_max_pooling2_fu_302_ap_idle : STD_LOGIC;
    signal grp_i_max_pooling2_fu_302_ap_ready : STD_LOGIC;
    signal grp_i_max_pooling2_fu_302_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_i_max_pooling2_fu_302_input_r_ce0 : STD_LOGIC;
    signal grp_i_max_pooling2_fu_302_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_i_max_pooling2_fu_302_output_r_ce0 : STD_LOGIC;
    signal grp_i_max_pooling2_fu_302_output_r_we0 : STD_LOGIC;
    signal grp_i_max_pooling2_fu_302_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_max_pooling4_fu_308_ap_start : STD_LOGIC;
    signal grp_i_max_pooling4_fu_308_ap_done : STD_LOGIC;
    signal grp_i_max_pooling4_fu_308_ap_idle : STD_LOGIC;
    signal grp_i_max_pooling4_fu_308_ap_ready : STD_LOGIC;
    signal grp_i_max_pooling4_fu_308_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_i_max_pooling4_fu_308_input_r_ce0 : STD_LOGIC;
    signal grp_i_max_pooling4_fu_308_output_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_i_max_pooling4_fu_308_output_r_ce0 : STD_LOGIC;
    signal grp_i_max_pooling4_fu_308_output_r_we0 : STD_LOGIC;
    signal grp_i_max_pooling4_fu_308_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights5_fu_314_ap_start : STD_LOGIC;
    signal grp_ld_weights5_fu_314_ap_done : STD_LOGIC;
    signal grp_ld_weights5_fu_314_ap_idle : STD_LOGIC;
    signal grp_ld_weights5_fu_314_ap_ready : STD_LOGIC;
    signal grp_ld_weights5_fu_314_m_axi_weights5_AWVALID : STD_LOGIC;
    signal grp_ld_weights5_fu_314_m_axi_weights5_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_WVALID : STD_LOGIC;
    signal grp_ld_weights5_fu_314_m_axi_weights5_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_WLAST : STD_LOGIC;
    signal grp_ld_weights5_fu_314_m_axi_weights5_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_ARVALID : STD_LOGIC;
    signal grp_ld_weights5_fu_314_m_axi_weights5_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights5_fu_314_m_axi_weights5_RREADY : STD_LOGIC;
    signal grp_ld_weights5_fu_314_m_axi_weights5_BREADY : STD_LOGIC;
    signal grp_ld_weights5_fu_314_weights5_buf_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_ld_weights5_fu_314_weights5_buf_ce0 : STD_LOGIC;
    signal grp_ld_weights5_fu_314_weights5_buf_we0 : STD_LOGIC;
    signal grp_ld_weights5_fu_314_weights5_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights3_fu_322_ap_start : STD_LOGIC;
    signal grp_ld_weights3_fu_322_ap_done : STD_LOGIC;
    signal grp_ld_weights3_fu_322_ap_idle : STD_LOGIC;
    signal grp_ld_weights3_fu_322_ap_ready : STD_LOGIC;
    signal grp_ld_weights3_fu_322_m_axi_weights3_AWVALID : STD_LOGIC;
    signal grp_ld_weights3_fu_322_m_axi_weights3_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_WVALID : STD_LOGIC;
    signal grp_ld_weights3_fu_322_m_axi_weights3_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_WLAST : STD_LOGIC;
    signal grp_ld_weights3_fu_322_m_axi_weights3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_ARVALID : STD_LOGIC;
    signal grp_ld_weights3_fu_322_m_axi_weights3_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights3_fu_322_m_axi_weights3_RREADY : STD_LOGIC;
    signal grp_ld_weights3_fu_322_m_axi_weights3_BREADY : STD_LOGIC;
    signal grp_ld_weights3_fu_322_weights3_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ld_weights3_fu_322_weights3_buf_ce0 : STD_LOGIC;
    signal grp_ld_weights3_fu_322_weights3_buf_we0 : STD_LOGIC;
    signal grp_ld_weights3_fu_322_weights3_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights1_fu_330_ap_start : STD_LOGIC;
    signal grp_ld_weights1_fu_330_ap_done : STD_LOGIC;
    signal grp_ld_weights1_fu_330_ap_idle : STD_LOGIC;
    signal grp_ld_weights1_fu_330_ap_ready : STD_LOGIC;
    signal grp_ld_weights1_fu_330_m_axi_weights1_AWVALID : STD_LOGIC;
    signal grp_ld_weights1_fu_330_m_axi_weights1_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_WVALID : STD_LOGIC;
    signal grp_ld_weights1_fu_330_m_axi_weights1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_WLAST : STD_LOGIC;
    signal grp_ld_weights1_fu_330_m_axi_weights1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_ARVALID : STD_LOGIC;
    signal grp_ld_weights1_fu_330_m_axi_weights1_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_weights1_fu_330_m_axi_weights1_RREADY : STD_LOGIC;
    signal grp_ld_weights1_fu_330_m_axi_weights1_BREADY : STD_LOGIC;
    signal grp_ld_weights1_fu_330_weights1_buf_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ld_weights1_fu_330_weights1_buf_0_ce0 : STD_LOGIC;
    signal grp_ld_weights1_fu_330_weights1_buf_0_we0 : STD_LOGIC;
    signal grp_ld_weights1_fu_330_weights1_buf_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_input_fu_338_ap_start : STD_LOGIC;
    signal grp_ld_input_fu_338_ap_done : STD_LOGIC;
    signal grp_ld_input_fu_338_ap_idle : STD_LOGIC;
    signal grp_ld_input_fu_338_ap_ready : STD_LOGIC;
    signal grp_ld_input_fu_338_m_axi_input_r_AWVALID : STD_LOGIC;
    signal grp_ld_input_fu_338_m_axi_input_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_WVALID : STD_LOGIC;
    signal grp_ld_input_fu_338_m_axi_input_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_WLAST : STD_LOGIC;
    signal grp_ld_input_fu_338_m_axi_input_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_ARVALID : STD_LOGIC;
    signal grp_ld_input_fu_338_m_axi_input_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_input_fu_338_m_axi_input_r_RREADY : STD_LOGIC;
    signal grp_ld_input_fu_338_m_axi_input_r_BREADY : STD_LOGIC;
    signal grp_ld_input_fu_338_input_buf_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ld_input_fu_338_input_buf_0_ce0 : STD_LOGIC;
    signal grp_ld_input_fu_338_input_buf_0_we0 : STD_LOGIC;
    signal grp_ld_input_fu_338_input_buf_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias5_fu_346_ap_start : STD_LOGIC;
    signal grp_ld_bias5_fu_346_ap_done : STD_LOGIC;
    signal grp_ld_bias5_fu_346_ap_idle : STD_LOGIC;
    signal grp_ld_bias5_fu_346_ap_ready : STD_LOGIC;
    signal grp_ld_bias5_fu_346_m_axi_bias5_AWVALID : STD_LOGIC;
    signal grp_ld_bias5_fu_346_m_axi_bias5_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_WVALID : STD_LOGIC;
    signal grp_ld_bias5_fu_346_m_axi_bias5_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_WLAST : STD_LOGIC;
    signal grp_ld_bias5_fu_346_m_axi_bias5_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_ARVALID : STD_LOGIC;
    signal grp_ld_bias5_fu_346_m_axi_bias5_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias5_fu_346_m_axi_bias5_RREADY : STD_LOGIC;
    signal grp_ld_bias5_fu_346_m_axi_bias5_BREADY : STD_LOGIC;
    signal grp_ld_bias5_fu_346_bias5_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_ld_bias5_fu_346_bias5_buf_ce0 : STD_LOGIC;
    signal grp_ld_bias5_fu_346_bias5_buf_we0 : STD_LOGIC;
    signal grp_ld_bias5_fu_346_bias5_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias3_fu_354_ap_start : STD_LOGIC;
    signal grp_ld_bias3_fu_354_ap_done : STD_LOGIC;
    signal grp_ld_bias3_fu_354_ap_idle : STD_LOGIC;
    signal grp_ld_bias3_fu_354_ap_ready : STD_LOGIC;
    signal grp_ld_bias3_fu_354_m_axi_bias3_AWVALID : STD_LOGIC;
    signal grp_ld_bias3_fu_354_m_axi_bias3_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_WVALID : STD_LOGIC;
    signal grp_ld_bias3_fu_354_m_axi_bias3_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_WLAST : STD_LOGIC;
    signal grp_ld_bias3_fu_354_m_axi_bias3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_ARVALID : STD_LOGIC;
    signal grp_ld_bias3_fu_354_m_axi_bias3_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias3_fu_354_m_axi_bias3_RREADY : STD_LOGIC;
    signal grp_ld_bias3_fu_354_m_axi_bias3_BREADY : STD_LOGIC;
    signal grp_ld_bias3_fu_354_bias3_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias3_fu_354_bias3_buf_ce0 : STD_LOGIC;
    signal grp_ld_bias3_fu_354_bias3_buf_we0 : STD_LOGIC;
    signal grp_ld_bias3_fu_354_bias3_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_st_output_fu_362_ap_start : STD_LOGIC;
    signal grp_st_output_fu_362_ap_done : STD_LOGIC;
    signal grp_st_output_fu_362_ap_idle : STD_LOGIC;
    signal grp_st_output_fu_362_ap_ready : STD_LOGIC;
    signal grp_st_output_fu_362_m_axi_output_r_AWVALID : STD_LOGIC;
    signal grp_st_output_fu_362_m_axi_output_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_WVALID : STD_LOGIC;
    signal grp_st_output_fu_362_m_axi_output_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_WLAST : STD_LOGIC;
    signal grp_st_output_fu_362_m_axi_output_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_ARVALID : STD_LOGIC;
    signal grp_st_output_fu_362_m_axi_output_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_st_output_fu_362_m_axi_output_r_RREADY : STD_LOGIC;
    signal grp_st_output_fu_362_m_axi_output_r_BREADY : STD_LOGIC;
    signal grp_st_output_fu_362_output_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_st_output_fu_362_output_buf_ce0 : STD_LOGIC;
    signal grp_ld_bias1_fu_370_ap_start : STD_LOGIC;
    signal grp_ld_bias1_fu_370_ap_done : STD_LOGIC;
    signal grp_ld_bias1_fu_370_ap_idle : STD_LOGIC;
    signal grp_ld_bias1_fu_370_ap_ready : STD_LOGIC;
    signal grp_ld_bias1_fu_370_m_axi_bias1_AWVALID : STD_LOGIC;
    signal grp_ld_bias1_fu_370_m_axi_bias1_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_WVALID : STD_LOGIC;
    signal grp_ld_bias1_fu_370_m_axi_bias1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_WLAST : STD_LOGIC;
    signal grp_ld_bias1_fu_370_m_axi_bias1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_ARVALID : STD_LOGIC;
    signal grp_ld_bias1_fu_370_m_axi_bias1_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ld_bias1_fu_370_m_axi_bias1_RREADY : STD_LOGIC;
    signal grp_ld_bias1_fu_370_m_axi_bias1_BREADY : STD_LOGIC;
    signal grp_ld_bias1_fu_370_bias1_buf_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ld_bias1_fu_370_bias1_buf_ce0 : STD_LOGIC;
    signal grp_ld_bias1_fu_370_bias1_buf_we0 : STD_LOGIC;
    signal grp_ld_bias1_fu_370_bias1_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_i_convolution3_fu_266_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_i_convolution1_fu_274_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_i_convolution5_fu_282_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_i_fc6_fu_290_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_i_max_pooling2_fu_302_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_i_max_pooling4_fu_308_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_ld_weights5_fu_314_ap_start_reg : STD_LOGIC := '0';
    signal grp_ld_weights3_fu_322_ap_start_reg : STD_LOGIC := '0';
    signal grp_ld_weights1_fu_330_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_ld_input_fu_338_ap_start_reg : STD_LOGIC := '0';
    signal grp_ld_bias5_fu_346_ap_start_reg : STD_LOGIC := '0';
    signal grp_ld_bias3_fu_354_ap_start_reg : STD_LOGIC := '0';
    signal grp_st_output_fu_362_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_ld_bias1_fu_370_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal ap_block_state7_on_subcall_done : BOOLEAN;

    component i_convolution3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_ce0 : OUT STD_LOGIC;
        weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_ce1 : OUT STD_LOGIC;
        weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component i_convolution1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_0_ce1 : OUT STD_LOGIC;
        input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weights_0_ce0 : OUT STD_LOGIC;
        weights_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weights_0_ce1 : OUT STD_LOGIC;
        weights_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component i_convolution5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights_ce0 : OUT STD_LOGIC;
        weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_0_0_ce0 : OUT STD_LOGIC;
        output_0_0_we0 : OUT STD_LOGIC;
        output_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component i_fc6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        input_0_0_ce0 : OUT STD_LOGIC;
        input_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        m_axi_bias_AWVALID : OUT STD_LOGIC;
        m_axi_bias_AWREADY : IN STD_LOGIC;
        m_axi_bias_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_WVALID : OUT STD_LOGIC;
        m_axi_bias_WREADY : IN STD_LOGIC;
        m_axi_bias_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_WLAST : OUT STD_LOGIC;
        m_axi_bias_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_ARVALID : OUT STD_LOGIC;
        m_axi_bias_ARREADY : IN STD_LOGIC;
        m_axi_bias_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RVALID : IN STD_LOGIC;
        m_axi_bias_RREADY : OUT STD_LOGIC;
        m_axi_bias_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_RLAST : IN STD_LOGIC;
        m_axi_bias_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_BVALID : IN STD_LOGIC;
        m_axi_bias_BREADY : OUT STD_LOGIC;
        m_axi_bias_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bias_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component i_max_pooling2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component i_max_pooling4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ld_weights5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_weights5_AWVALID : OUT STD_LOGIC;
        m_axi_weights5_AWREADY : IN STD_LOGIC;
        m_axi_weights5_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights5_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights5_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights5_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights5_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights5_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights5_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights5_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights5_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights5_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights5_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights5_WVALID : OUT STD_LOGIC;
        m_axi_weights5_WREADY : IN STD_LOGIC;
        m_axi_weights5_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights5_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights5_WLAST : OUT STD_LOGIC;
        m_axi_weights5_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights5_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights5_ARVALID : OUT STD_LOGIC;
        m_axi_weights5_ARREADY : IN STD_LOGIC;
        m_axi_weights5_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights5_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights5_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights5_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights5_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights5_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights5_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights5_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights5_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights5_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights5_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights5_RVALID : IN STD_LOGIC;
        m_axi_weights5_RREADY : OUT STD_LOGIC;
        m_axi_weights5_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights5_RLAST : IN STD_LOGIC;
        m_axi_weights5_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights5_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights5_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights5_BVALID : IN STD_LOGIC;
        m_axi_weights5_BREADY : OUT STD_LOGIC;
        m_axi_weights5_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights5_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights5_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights5_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        weights5_buf_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights5_buf_ce0 : OUT STD_LOGIC;
        weights5_buf_we0 : OUT STD_LOGIC;
        weights5_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ld_weights3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_weights3_AWVALID : OUT STD_LOGIC;
        m_axi_weights3_AWREADY : IN STD_LOGIC;
        m_axi_weights3_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights3_WVALID : OUT STD_LOGIC;
        m_axi_weights3_WREADY : IN STD_LOGIC;
        m_axi_weights3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights3_WLAST : OUT STD_LOGIC;
        m_axi_weights3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights3_ARVALID : OUT STD_LOGIC;
        m_axi_weights3_ARREADY : IN STD_LOGIC;
        m_axi_weights3_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights3_RVALID : IN STD_LOGIC;
        m_axi_weights3_RREADY : OUT STD_LOGIC;
        m_axi_weights3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights3_RLAST : IN STD_LOGIC;
        m_axi_weights3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights3_BVALID : IN STD_LOGIC;
        m_axi_weights3_BREADY : OUT STD_LOGIC;
        m_axi_weights3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights3_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        weights3_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights3_buf_ce0 : OUT STD_LOGIC;
        weights3_buf_we0 : OUT STD_LOGIC;
        weights3_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ld_weights1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_weights1_AWVALID : OUT STD_LOGIC;
        m_axi_weights1_AWREADY : IN STD_LOGIC;
        m_axi_weights1_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights1_WVALID : OUT STD_LOGIC;
        m_axi_weights1_WREADY : IN STD_LOGIC;
        m_axi_weights1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights1_WLAST : OUT STD_LOGIC;
        m_axi_weights1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights1_ARVALID : OUT STD_LOGIC;
        m_axi_weights1_ARREADY : IN STD_LOGIC;
        m_axi_weights1_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights1_RVALID : IN STD_LOGIC;
        m_axi_weights1_RREADY : OUT STD_LOGIC;
        m_axi_weights1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights1_RLAST : IN STD_LOGIC;
        m_axi_weights1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights1_BVALID : IN STD_LOGIC;
        m_axi_weights1_BREADY : OUT STD_LOGIC;
        m_axi_weights1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights1_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        weights1_buf_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weights1_buf_0_ce0 : OUT STD_LOGIC;
        weights1_buf_0_we0 : OUT STD_LOGIC;
        weights1_buf_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ld_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_r_AWVALID : OUT STD_LOGIC;
        m_axi_input_r_AWREADY : IN STD_LOGIC;
        m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WVALID : OUT STD_LOGIC;
        m_axi_input_r_WREADY : IN STD_LOGIC;
        m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_WLAST : OUT STD_LOGIC;
        m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARVALID : OUT STD_LOGIC;
        m_axi_input_r_ARREADY : IN STD_LOGIC;
        m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RVALID : IN STD_LOGIC;
        m_axi_input_r_RREADY : OUT STD_LOGIC;
        m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_RLAST : IN STD_LOGIC;
        m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BVALID : IN STD_LOGIC;
        m_axi_input_r_BREADY : OUT STD_LOGIC;
        m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        input_buf_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_buf_0_ce0 : OUT STD_LOGIC;
        input_buf_0_we0 : OUT STD_LOGIC;
        input_buf_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ld_bias5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_bias5_AWVALID : OUT STD_LOGIC;
        m_axi_bias5_AWREADY : IN STD_LOGIC;
        m_axi_bias5_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias5_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias5_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias5_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias5_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias5_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias5_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias5_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias5_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias5_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias5_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias5_WVALID : OUT STD_LOGIC;
        m_axi_bias5_WREADY : IN STD_LOGIC;
        m_axi_bias5_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias5_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias5_WLAST : OUT STD_LOGIC;
        m_axi_bias5_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias5_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias5_ARVALID : OUT STD_LOGIC;
        m_axi_bias5_ARREADY : IN STD_LOGIC;
        m_axi_bias5_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias5_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias5_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias5_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias5_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias5_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias5_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias5_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias5_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias5_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias5_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias5_RVALID : IN STD_LOGIC;
        m_axi_bias5_RREADY : OUT STD_LOGIC;
        m_axi_bias5_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias5_RLAST : IN STD_LOGIC;
        m_axi_bias5_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias5_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias5_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias5_BVALID : IN STD_LOGIC;
        m_axi_bias5_BREADY : OUT STD_LOGIC;
        m_axi_bias5_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias5_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias5_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bias5_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        bias5_buf_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bias5_buf_ce0 : OUT STD_LOGIC;
        bias5_buf_we0 : OUT STD_LOGIC;
        bias5_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ld_bias3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_bias3_AWVALID : OUT STD_LOGIC;
        m_axi_bias3_AWREADY : IN STD_LOGIC;
        m_axi_bias3_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias3_WVALID : OUT STD_LOGIC;
        m_axi_bias3_WREADY : IN STD_LOGIC;
        m_axi_bias3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias3_WLAST : OUT STD_LOGIC;
        m_axi_bias3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias3_ARVALID : OUT STD_LOGIC;
        m_axi_bias3_ARREADY : IN STD_LOGIC;
        m_axi_bias3_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias3_RVALID : IN STD_LOGIC;
        m_axi_bias3_RREADY : OUT STD_LOGIC;
        m_axi_bias3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias3_RLAST : IN STD_LOGIC;
        m_axi_bias3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias3_BVALID : IN STD_LOGIC;
        m_axi_bias3_BREADY : OUT STD_LOGIC;
        m_axi_bias3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bias3_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        bias3_buf_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bias3_buf_ce0 : OUT STD_LOGIC;
        bias3_buf_we0 : OUT STD_LOGIC;
        bias3_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component st_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_output_r_AWVALID : OUT STD_LOGIC;
        m_axi_output_r_AWREADY : IN STD_LOGIC;
        m_axi_output_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_WVALID : OUT STD_LOGIC;
        m_axi_output_r_WREADY : IN STD_LOGIC;
        m_axi_output_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_WLAST : OUT STD_LOGIC;
        m_axi_output_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_ARVALID : OUT STD_LOGIC;
        m_axi_output_r_ARREADY : IN STD_LOGIC;
        m_axi_output_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RVALID : IN STD_LOGIC;
        m_axi_output_r_RREADY : OUT STD_LOGIC;
        m_axi_output_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_RLAST : IN STD_LOGIC;
        m_axi_output_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_BVALID : IN STD_LOGIC;
        m_axi_output_r_BREADY : OUT STD_LOGIC;
        m_axi_output_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        output_buf_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_buf_ce0 : OUT STD_LOGIC;
        output_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ld_bias1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_bias1_AWVALID : OUT STD_LOGIC;
        m_axi_bias1_AWREADY : IN STD_LOGIC;
        m_axi_bias1_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias1_WVALID : OUT STD_LOGIC;
        m_axi_bias1_WREADY : IN STD_LOGIC;
        m_axi_bias1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias1_WLAST : OUT STD_LOGIC;
        m_axi_bias1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias1_ARVALID : OUT STD_LOGIC;
        m_axi_bias1_ARREADY : IN STD_LOGIC;
        m_axi_bias1_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias1_RVALID : IN STD_LOGIC;
        m_axi_bias1_RREADY : OUT STD_LOGIC;
        m_axi_bias1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias1_RLAST : IN STD_LOGIC;
        m_axi_bias1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias1_BVALID : IN STD_LOGIC;
        m_axi_bias1_BREADY : OUT STD_LOGIC;
        m_axi_bias1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bias1_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        bias1_buf_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bias1_buf_ce0 : OUT STD_LOGIC;
        bias1_buf_we0 : OUT STD_LOGIC;
        bias1_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_input_bfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_weightsg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_weightshbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_weightsibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_bias1_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_bias3_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_bias5_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_input2_jbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_input3_kbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_input4_lbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_input5_mb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_output_ocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_CTL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_DATA_INPUT_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_top_DATA_WEIGHT_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_top_DATA_BIAS_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_top_DATA_OUTPUT_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    lenet_top_CTL_s_axi_U : component lenet_top_CTL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTL_AWVALID,
        AWREADY => s_axi_CTL_AWREADY,
        AWADDR => s_axi_CTL_AWADDR,
        WVALID => s_axi_CTL_WVALID,
        WREADY => s_axi_CTL_WREADY,
        WDATA => s_axi_CTL_WDATA,
        WSTRB => s_axi_CTL_WSTRB,
        ARVALID => s_axi_CTL_ARVALID,
        ARREADY => s_axi_CTL_ARREADY,
        ARADDR => s_axi_CTL_ARADDR,
        RVALID => s_axi_CTL_RVALID,
        RREADY => s_axi_CTL_RREADY,
        RDATA => s_axi_CTL_RDATA,
        RRESP => s_axi_CTL_RRESP,
        BVALID => s_axi_CTL_BVALID,
        BREADY => s_axi_CTL_BREADY,
        BRESP => s_axi_CTL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        input_r => input_r,
        weights1 => weights1,
        bias1 => bias1,
        weights3 => weights3,
        bias3 => bias3,
        weights5 => weights5,
        bias5 => bias5,
        weights6 => weights6,
        bias6 => bias6,
        output_r => output_r);

    lenet_top_DATA_INPUT_m_axi_U : component lenet_top_DATA_INPUT_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_INPUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_INPUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_INPUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_INPUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_INPUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_INPUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_INPUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_INPUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_INPUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_INPUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_INPUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_INPUT_AWVALID,
        AWREADY => m_axi_DATA_INPUT_AWREADY,
        AWADDR => m_axi_DATA_INPUT_AWADDR,
        AWID => m_axi_DATA_INPUT_AWID,
        AWLEN => m_axi_DATA_INPUT_AWLEN,
        AWSIZE => m_axi_DATA_INPUT_AWSIZE,
        AWBURST => m_axi_DATA_INPUT_AWBURST,
        AWLOCK => m_axi_DATA_INPUT_AWLOCK,
        AWCACHE => m_axi_DATA_INPUT_AWCACHE,
        AWPROT => m_axi_DATA_INPUT_AWPROT,
        AWQOS => m_axi_DATA_INPUT_AWQOS,
        AWREGION => m_axi_DATA_INPUT_AWREGION,
        AWUSER => m_axi_DATA_INPUT_AWUSER,
        WVALID => m_axi_DATA_INPUT_WVALID,
        WREADY => m_axi_DATA_INPUT_WREADY,
        WDATA => m_axi_DATA_INPUT_WDATA,
        WSTRB => m_axi_DATA_INPUT_WSTRB,
        WLAST => m_axi_DATA_INPUT_WLAST,
        WID => m_axi_DATA_INPUT_WID,
        WUSER => m_axi_DATA_INPUT_WUSER,
        ARVALID => m_axi_DATA_INPUT_ARVALID,
        ARREADY => m_axi_DATA_INPUT_ARREADY,
        ARADDR => m_axi_DATA_INPUT_ARADDR,
        ARID => m_axi_DATA_INPUT_ARID,
        ARLEN => m_axi_DATA_INPUT_ARLEN,
        ARSIZE => m_axi_DATA_INPUT_ARSIZE,
        ARBURST => m_axi_DATA_INPUT_ARBURST,
        ARLOCK => m_axi_DATA_INPUT_ARLOCK,
        ARCACHE => m_axi_DATA_INPUT_ARCACHE,
        ARPROT => m_axi_DATA_INPUT_ARPROT,
        ARQOS => m_axi_DATA_INPUT_ARQOS,
        ARREGION => m_axi_DATA_INPUT_ARREGION,
        ARUSER => m_axi_DATA_INPUT_ARUSER,
        RVALID => m_axi_DATA_INPUT_RVALID,
        RREADY => m_axi_DATA_INPUT_RREADY,
        RDATA => m_axi_DATA_INPUT_RDATA,
        RLAST => m_axi_DATA_INPUT_RLAST,
        RID => m_axi_DATA_INPUT_RID,
        RUSER => m_axi_DATA_INPUT_RUSER,
        RRESP => m_axi_DATA_INPUT_RRESP,
        BVALID => m_axi_DATA_INPUT_BVALID,
        BREADY => m_axi_DATA_INPUT_BREADY,
        BRESP => m_axi_DATA_INPUT_BRESP,
        BID => m_axi_DATA_INPUT_BID,
        BUSER => m_axi_DATA_INPUT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_INPUT_ARVALID,
        I_ARREADY => DATA_INPUT_ARREADY,
        I_ARADDR => grp_ld_input_fu_338_m_axi_input_r_ARADDR,
        I_ARID => grp_ld_input_fu_338_m_axi_input_r_ARID,
        I_ARLEN => grp_ld_input_fu_338_m_axi_input_r_ARLEN,
        I_ARSIZE => grp_ld_input_fu_338_m_axi_input_r_ARSIZE,
        I_ARLOCK => grp_ld_input_fu_338_m_axi_input_r_ARLOCK,
        I_ARCACHE => grp_ld_input_fu_338_m_axi_input_r_ARCACHE,
        I_ARQOS => grp_ld_input_fu_338_m_axi_input_r_ARQOS,
        I_ARPROT => grp_ld_input_fu_338_m_axi_input_r_ARPROT,
        I_ARUSER => grp_ld_input_fu_338_m_axi_input_r_ARUSER,
        I_ARBURST => grp_ld_input_fu_338_m_axi_input_r_ARBURST,
        I_ARREGION => grp_ld_input_fu_338_m_axi_input_r_ARREGION,
        I_RVALID => DATA_INPUT_RVALID,
        I_RREADY => DATA_INPUT_RREADY,
        I_RDATA => DATA_INPUT_RDATA,
        I_RID => DATA_INPUT_RID,
        I_RUSER => DATA_INPUT_RUSER,
        I_RRESP => DATA_INPUT_RRESP,
        I_RLAST => DATA_INPUT_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_INPUT_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_INPUT_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_INPUT_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_INPUT_BRESP,
        I_BID => DATA_INPUT_BID,
        I_BUSER => DATA_INPUT_BUSER);

    lenet_top_DATA_WEIGHT_m_axi_U : component lenet_top_DATA_WEIGHT_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_WEIGHT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_WEIGHT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_WEIGHT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_WEIGHT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_WEIGHT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_WEIGHT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_WEIGHT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_WEIGHT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_WEIGHT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_WEIGHT_AWVALID,
        AWREADY => m_axi_DATA_WEIGHT_AWREADY,
        AWADDR => m_axi_DATA_WEIGHT_AWADDR,
        AWID => m_axi_DATA_WEIGHT_AWID,
        AWLEN => m_axi_DATA_WEIGHT_AWLEN,
        AWSIZE => m_axi_DATA_WEIGHT_AWSIZE,
        AWBURST => m_axi_DATA_WEIGHT_AWBURST,
        AWLOCK => m_axi_DATA_WEIGHT_AWLOCK,
        AWCACHE => m_axi_DATA_WEIGHT_AWCACHE,
        AWPROT => m_axi_DATA_WEIGHT_AWPROT,
        AWQOS => m_axi_DATA_WEIGHT_AWQOS,
        AWREGION => m_axi_DATA_WEIGHT_AWREGION,
        AWUSER => m_axi_DATA_WEIGHT_AWUSER,
        WVALID => m_axi_DATA_WEIGHT_WVALID,
        WREADY => m_axi_DATA_WEIGHT_WREADY,
        WDATA => m_axi_DATA_WEIGHT_WDATA,
        WSTRB => m_axi_DATA_WEIGHT_WSTRB,
        WLAST => m_axi_DATA_WEIGHT_WLAST,
        WID => m_axi_DATA_WEIGHT_WID,
        WUSER => m_axi_DATA_WEIGHT_WUSER,
        ARVALID => m_axi_DATA_WEIGHT_ARVALID,
        ARREADY => m_axi_DATA_WEIGHT_ARREADY,
        ARADDR => m_axi_DATA_WEIGHT_ARADDR,
        ARID => m_axi_DATA_WEIGHT_ARID,
        ARLEN => m_axi_DATA_WEIGHT_ARLEN,
        ARSIZE => m_axi_DATA_WEIGHT_ARSIZE,
        ARBURST => m_axi_DATA_WEIGHT_ARBURST,
        ARLOCK => m_axi_DATA_WEIGHT_ARLOCK,
        ARCACHE => m_axi_DATA_WEIGHT_ARCACHE,
        ARPROT => m_axi_DATA_WEIGHT_ARPROT,
        ARQOS => m_axi_DATA_WEIGHT_ARQOS,
        ARREGION => m_axi_DATA_WEIGHT_ARREGION,
        ARUSER => m_axi_DATA_WEIGHT_ARUSER,
        RVALID => m_axi_DATA_WEIGHT_RVALID,
        RREADY => m_axi_DATA_WEIGHT_RREADY,
        RDATA => m_axi_DATA_WEIGHT_RDATA,
        RLAST => m_axi_DATA_WEIGHT_RLAST,
        RID => m_axi_DATA_WEIGHT_RID,
        RUSER => m_axi_DATA_WEIGHT_RUSER,
        RRESP => m_axi_DATA_WEIGHT_RRESP,
        BVALID => m_axi_DATA_WEIGHT_BVALID,
        BREADY => m_axi_DATA_WEIGHT_BREADY,
        BRESP => m_axi_DATA_WEIGHT_BRESP,
        BID => m_axi_DATA_WEIGHT_BID,
        BUSER => m_axi_DATA_WEIGHT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_WEIGHT_ARVALID,
        I_ARREADY => DATA_WEIGHT_ARREADY,
        I_ARADDR => DATA_WEIGHT_ARADDR,
        I_ARID => DATA_WEIGHT_ARID,
        I_ARLEN => DATA_WEIGHT_ARLEN,
        I_ARSIZE => DATA_WEIGHT_ARSIZE,
        I_ARLOCK => DATA_WEIGHT_ARLOCK,
        I_ARCACHE => DATA_WEIGHT_ARCACHE,
        I_ARQOS => DATA_WEIGHT_ARQOS,
        I_ARPROT => DATA_WEIGHT_ARPROT,
        I_ARUSER => DATA_WEIGHT_ARUSER,
        I_ARBURST => DATA_WEIGHT_ARBURST,
        I_ARREGION => DATA_WEIGHT_ARREGION,
        I_RVALID => DATA_WEIGHT_RVALID,
        I_RREADY => DATA_WEIGHT_RREADY,
        I_RDATA => DATA_WEIGHT_RDATA,
        I_RID => DATA_WEIGHT_RID,
        I_RUSER => DATA_WEIGHT_RUSER,
        I_RRESP => DATA_WEIGHT_RRESP,
        I_RLAST => DATA_WEIGHT_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_WEIGHT_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_WEIGHT_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_WEIGHT_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_WEIGHT_BRESP,
        I_BID => DATA_WEIGHT_BID,
        I_BUSER => DATA_WEIGHT_BUSER);

    lenet_top_DATA_BIAS_m_axi_U : component lenet_top_DATA_BIAS_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_BIAS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_BIAS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_BIAS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_BIAS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_BIAS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_BIAS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_BIAS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_BIAS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_BIAS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_BIAS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_BIAS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_BIAS_AWVALID,
        AWREADY => m_axi_DATA_BIAS_AWREADY,
        AWADDR => m_axi_DATA_BIAS_AWADDR,
        AWID => m_axi_DATA_BIAS_AWID,
        AWLEN => m_axi_DATA_BIAS_AWLEN,
        AWSIZE => m_axi_DATA_BIAS_AWSIZE,
        AWBURST => m_axi_DATA_BIAS_AWBURST,
        AWLOCK => m_axi_DATA_BIAS_AWLOCK,
        AWCACHE => m_axi_DATA_BIAS_AWCACHE,
        AWPROT => m_axi_DATA_BIAS_AWPROT,
        AWQOS => m_axi_DATA_BIAS_AWQOS,
        AWREGION => m_axi_DATA_BIAS_AWREGION,
        AWUSER => m_axi_DATA_BIAS_AWUSER,
        WVALID => m_axi_DATA_BIAS_WVALID,
        WREADY => m_axi_DATA_BIAS_WREADY,
        WDATA => m_axi_DATA_BIAS_WDATA,
        WSTRB => m_axi_DATA_BIAS_WSTRB,
        WLAST => m_axi_DATA_BIAS_WLAST,
        WID => m_axi_DATA_BIAS_WID,
        WUSER => m_axi_DATA_BIAS_WUSER,
        ARVALID => m_axi_DATA_BIAS_ARVALID,
        ARREADY => m_axi_DATA_BIAS_ARREADY,
        ARADDR => m_axi_DATA_BIAS_ARADDR,
        ARID => m_axi_DATA_BIAS_ARID,
        ARLEN => m_axi_DATA_BIAS_ARLEN,
        ARSIZE => m_axi_DATA_BIAS_ARSIZE,
        ARBURST => m_axi_DATA_BIAS_ARBURST,
        ARLOCK => m_axi_DATA_BIAS_ARLOCK,
        ARCACHE => m_axi_DATA_BIAS_ARCACHE,
        ARPROT => m_axi_DATA_BIAS_ARPROT,
        ARQOS => m_axi_DATA_BIAS_ARQOS,
        ARREGION => m_axi_DATA_BIAS_ARREGION,
        ARUSER => m_axi_DATA_BIAS_ARUSER,
        RVALID => m_axi_DATA_BIAS_RVALID,
        RREADY => m_axi_DATA_BIAS_RREADY,
        RDATA => m_axi_DATA_BIAS_RDATA,
        RLAST => m_axi_DATA_BIAS_RLAST,
        RID => m_axi_DATA_BIAS_RID,
        RUSER => m_axi_DATA_BIAS_RUSER,
        RRESP => m_axi_DATA_BIAS_RRESP,
        BVALID => m_axi_DATA_BIAS_BVALID,
        BREADY => m_axi_DATA_BIAS_BREADY,
        BRESP => m_axi_DATA_BIAS_BRESP,
        BID => m_axi_DATA_BIAS_BID,
        BUSER => m_axi_DATA_BIAS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_BIAS_ARVALID,
        I_ARREADY => DATA_BIAS_ARREADY,
        I_ARADDR => DATA_BIAS_ARADDR,
        I_ARID => DATA_BIAS_ARID,
        I_ARLEN => DATA_BIAS_ARLEN,
        I_ARSIZE => DATA_BIAS_ARSIZE,
        I_ARLOCK => DATA_BIAS_ARLOCK,
        I_ARCACHE => DATA_BIAS_ARCACHE,
        I_ARQOS => DATA_BIAS_ARQOS,
        I_ARPROT => DATA_BIAS_ARPROT,
        I_ARUSER => DATA_BIAS_ARUSER,
        I_ARBURST => DATA_BIAS_ARBURST,
        I_ARREGION => DATA_BIAS_ARREGION,
        I_RVALID => DATA_BIAS_RVALID,
        I_RREADY => DATA_BIAS_RREADY,
        I_RDATA => DATA_BIAS_RDATA,
        I_RID => DATA_BIAS_RID,
        I_RUSER => DATA_BIAS_RUSER,
        I_RRESP => DATA_BIAS_RRESP,
        I_RLAST => DATA_BIAS_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_BIAS_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_BIAS_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_BIAS_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_BIAS_BRESP,
        I_BID => DATA_BIAS_BID,
        I_BUSER => DATA_BIAS_BUSER);

    lenet_top_DATA_OUTPUT_m_axi_U : component lenet_top_DATA_OUTPUT_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_OUTPUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_OUTPUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_OUTPUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_OUTPUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_OUTPUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_OUTPUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_OUTPUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_OUTPUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_OUTPUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_OUTPUT_AWVALID,
        AWREADY => m_axi_DATA_OUTPUT_AWREADY,
        AWADDR => m_axi_DATA_OUTPUT_AWADDR,
        AWID => m_axi_DATA_OUTPUT_AWID,
        AWLEN => m_axi_DATA_OUTPUT_AWLEN,
        AWSIZE => m_axi_DATA_OUTPUT_AWSIZE,
        AWBURST => m_axi_DATA_OUTPUT_AWBURST,
        AWLOCK => m_axi_DATA_OUTPUT_AWLOCK,
        AWCACHE => m_axi_DATA_OUTPUT_AWCACHE,
        AWPROT => m_axi_DATA_OUTPUT_AWPROT,
        AWQOS => m_axi_DATA_OUTPUT_AWQOS,
        AWREGION => m_axi_DATA_OUTPUT_AWREGION,
        AWUSER => m_axi_DATA_OUTPUT_AWUSER,
        WVALID => m_axi_DATA_OUTPUT_WVALID,
        WREADY => m_axi_DATA_OUTPUT_WREADY,
        WDATA => m_axi_DATA_OUTPUT_WDATA,
        WSTRB => m_axi_DATA_OUTPUT_WSTRB,
        WLAST => m_axi_DATA_OUTPUT_WLAST,
        WID => m_axi_DATA_OUTPUT_WID,
        WUSER => m_axi_DATA_OUTPUT_WUSER,
        ARVALID => m_axi_DATA_OUTPUT_ARVALID,
        ARREADY => m_axi_DATA_OUTPUT_ARREADY,
        ARADDR => m_axi_DATA_OUTPUT_ARADDR,
        ARID => m_axi_DATA_OUTPUT_ARID,
        ARLEN => m_axi_DATA_OUTPUT_ARLEN,
        ARSIZE => m_axi_DATA_OUTPUT_ARSIZE,
        ARBURST => m_axi_DATA_OUTPUT_ARBURST,
        ARLOCK => m_axi_DATA_OUTPUT_ARLOCK,
        ARCACHE => m_axi_DATA_OUTPUT_ARCACHE,
        ARPROT => m_axi_DATA_OUTPUT_ARPROT,
        ARQOS => m_axi_DATA_OUTPUT_ARQOS,
        ARREGION => m_axi_DATA_OUTPUT_ARREGION,
        ARUSER => m_axi_DATA_OUTPUT_ARUSER,
        RVALID => m_axi_DATA_OUTPUT_RVALID,
        RREADY => m_axi_DATA_OUTPUT_RREADY,
        RDATA => m_axi_DATA_OUTPUT_RDATA,
        RLAST => m_axi_DATA_OUTPUT_RLAST,
        RID => m_axi_DATA_OUTPUT_RID,
        RUSER => m_axi_DATA_OUTPUT_RUSER,
        RRESP => m_axi_DATA_OUTPUT_RRESP,
        BVALID => m_axi_DATA_OUTPUT_BVALID,
        BREADY => m_axi_DATA_OUTPUT_BREADY,
        BRESP => m_axi_DATA_OUTPUT_BRESP,
        BID => m_axi_DATA_OUTPUT_BID,
        BUSER => m_axi_DATA_OUTPUT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => DATA_OUTPUT_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_OUTPUT_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => DATA_OUTPUT_RDATA,
        I_RID => DATA_OUTPUT_RID,
        I_RUSER => DATA_OUTPUT_RUSER,
        I_RRESP => DATA_OUTPUT_RRESP,
        I_RLAST => DATA_OUTPUT_RLAST,
        I_AWVALID => DATA_OUTPUT_AWVALID,
        I_AWREADY => DATA_OUTPUT_AWREADY,
        I_AWADDR => grp_st_output_fu_362_m_axi_output_r_AWADDR,
        I_AWID => grp_st_output_fu_362_m_axi_output_r_AWID,
        I_AWLEN => grp_st_output_fu_362_m_axi_output_r_AWLEN,
        I_AWSIZE => grp_st_output_fu_362_m_axi_output_r_AWSIZE,
        I_AWLOCK => grp_st_output_fu_362_m_axi_output_r_AWLOCK,
        I_AWCACHE => grp_st_output_fu_362_m_axi_output_r_AWCACHE,
        I_AWQOS => grp_st_output_fu_362_m_axi_output_r_AWQOS,
        I_AWPROT => grp_st_output_fu_362_m_axi_output_r_AWPROT,
        I_AWUSER => grp_st_output_fu_362_m_axi_output_r_AWUSER,
        I_AWBURST => grp_st_output_fu_362_m_axi_output_r_AWBURST,
        I_AWREGION => grp_st_output_fu_362_m_axi_output_r_AWREGION,
        I_WVALID => DATA_OUTPUT_WVALID,
        I_WREADY => DATA_OUTPUT_WREADY,
        I_WDATA => grp_st_output_fu_362_m_axi_output_r_WDATA,
        I_WID => grp_st_output_fu_362_m_axi_output_r_WID,
        I_WUSER => grp_st_output_fu_362_m_axi_output_r_WUSER,
        I_WLAST => grp_st_output_fu_362_m_axi_output_r_WLAST,
        I_WSTRB => grp_st_output_fu_362_m_axi_output_r_WSTRB,
        I_BVALID => DATA_OUTPUT_BVALID,
        I_BREADY => DATA_OUTPUT_BREADY,
        I_BRESP => DATA_OUTPUT_BRESP,
        I_BID => DATA_OUTPUT_BID,
        I_BUSER => DATA_OUTPUT_BUSER);

    input_buf_0_U : component lenet_top_input_bfYi
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_buf_0_address0,
        ce0 => input_buf_0_ce0,
        we0 => input_buf_0_we0,
        d0 => grp_ld_input_fu_338_input_buf_0_d0,
        q0 => input_buf_0_q0,
        address1 => grp_i_convolution1_fu_274_input_0_address1,
        ce1 => input_buf_0_ce1,
        q1 => input_buf_0_q1);

    weights1_buf_0_U : component lenet_top_weightsg8j
    generic map (
        DataWidth => 32,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights1_buf_0_address0,
        ce0 => weights1_buf_0_ce0,
        we0 => weights1_buf_0_we0,
        d0 => grp_ld_weights1_fu_330_weights1_buf_0_d0,
        q0 => weights1_buf_0_q0,
        address1 => grp_i_convolution1_fu_274_weights_0_address1,
        ce1 => weights1_buf_0_ce1,
        q1 => weights1_buf_0_q1);

    weights3_buf_U : component lenet_top_weightshbi
    generic map (
        DataWidth => 32,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights3_buf_address0,
        ce0 => weights3_buf_ce0,
        we0 => weights3_buf_we0,
        d0 => grp_ld_weights3_fu_322_weights3_buf_d0,
        q0 => weights3_buf_q0,
        address1 => grp_i_convolution3_fu_266_weights_address1,
        ce1 => weights3_buf_ce1,
        q1 => weights3_buf_q1);

    weights5_buf_U : component lenet_top_weightsibs
    generic map (
        DataWidth => 32,
        AddressRange => 48000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights5_buf_address0,
        ce0 => weights5_buf_ce0,
        we0 => weights5_buf_we0,
        d0 => grp_ld_weights5_fu_314_weights5_buf_d0,
        q0 => weights5_buf_q0);

    bias1_buf_U : component lenet_top_bias1_buf
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias1_buf_address0,
        ce0 => bias1_buf_ce0,
        we0 => bias1_buf_we0,
        d0 => grp_ld_bias1_fu_370_bias1_buf_d0,
        q0 => bias1_buf_q0);

    bias3_buf_U : component lenet_top_bias3_buf
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias3_buf_address0,
        ce0 => bias3_buf_ce0,
        we0 => bias3_buf_we0,
        d0 => grp_ld_bias3_fu_354_bias3_buf_d0,
        q0 => bias3_buf_q0);

    bias5_buf_U : component lenet_top_bias5_buf
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias5_buf_address0,
        ce0 => bias5_buf_ce0,
        we0 => bias5_buf_we0,
        d0 => grp_ld_bias5_fu_346_bias5_buf_d0,
        q0 => bias5_buf_q0);

    input2_inter_U : component lenet_top_input2_jbC
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input2_inter_address0,
        ce0 => input2_inter_ce0,
        we0 => input2_inter_we0,
        d0 => grp_i_convolution1_fu_274_output_r_d0,
        q0 => input2_inter_q0);

    input3_inter_U : component lenet_top_input3_kbM
    generic map (
        DataWidth => 32,
        AddressRange => 1176,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input3_inter_address0,
        ce0 => input3_inter_ce0,
        we0 => input3_inter_we0,
        d0 => grp_i_max_pooling2_fu_302_output_r_d0,
        q0 => input3_inter_q0,
        address1 => grp_i_convolution3_fu_266_input_r_address1,
        ce1 => input3_inter_ce1,
        q1 => input3_inter_q1);

    input4_inter_U : component lenet_top_input4_lbW
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input4_inter_address0,
        ce0 => input4_inter_ce0,
        we0 => input4_inter_we0,
        d0 => grp_i_convolution3_fu_266_output_r_d0,
        q0 => input4_inter_q0);

    input5_inter_U : component lenet_top_input5_mb6
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input5_inter_address0,
        ce0 => input5_inter_ce0,
        we0 => input5_inter_we0,
        d0 => grp_i_max_pooling4_fu_308_output_r_d0,
        q0 => input5_inter_q0);

    input6_inter_0_0_U : component lenet_top_bias5_buf
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input6_inter_0_0_address0,
        ce0 => input6_inter_0_0_ce0,
        we0 => input6_inter_0_0_we0,
        d0 => grp_i_convolution5_fu_282_output_0_0_d0,
        q0 => input6_inter_0_0_q0);

    output_buf_U : component lenet_top_output_ocq
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_buf_address0,
        ce0 => output_buf_ce0,
        we0 => output_buf_we0,
        d0 => grp_i_fc6_fu_290_output_r_d0,
        q0 => output_buf_q0);

    grp_i_convolution3_fu_266 : component i_convolution3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_i_convolution3_fu_266_ap_start,
        ap_done => grp_i_convolution3_fu_266_ap_done,
        ap_idle => grp_i_convolution3_fu_266_ap_idle,
        ap_ready => grp_i_convolution3_fu_266_ap_ready,
        input_r_address0 => grp_i_convolution3_fu_266_input_r_address0,
        input_r_ce0 => grp_i_convolution3_fu_266_input_r_ce0,
        input_r_q0 => input3_inter_q0,
        input_r_address1 => grp_i_convolution3_fu_266_input_r_address1,
        input_r_ce1 => grp_i_convolution3_fu_266_input_r_ce1,
        input_r_q1 => input3_inter_q1,
        weights_address0 => grp_i_convolution3_fu_266_weights_address0,
        weights_ce0 => grp_i_convolution3_fu_266_weights_ce0,
        weights_q0 => weights3_buf_q0,
        weights_address1 => grp_i_convolution3_fu_266_weights_address1,
        weights_ce1 => grp_i_convolution3_fu_266_weights_ce1,
        weights_q1 => weights3_buf_q1,
        bias_address0 => grp_i_convolution3_fu_266_bias_address0,
        bias_ce0 => grp_i_convolution3_fu_266_bias_ce0,
        bias_q0 => bias3_buf_q0,
        output_r_address0 => grp_i_convolution3_fu_266_output_r_address0,
        output_r_ce0 => grp_i_convolution3_fu_266_output_r_ce0,
        output_r_we0 => grp_i_convolution3_fu_266_output_r_we0,
        output_r_d0 => grp_i_convolution3_fu_266_output_r_d0);

    grp_i_convolution1_fu_274 : component i_convolution1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_i_convolution1_fu_274_ap_start,
        ap_done => grp_i_convolution1_fu_274_ap_done,
        ap_idle => grp_i_convolution1_fu_274_ap_idle,
        ap_ready => grp_i_convolution1_fu_274_ap_ready,
        input_0_address0 => grp_i_convolution1_fu_274_input_0_address0,
        input_0_ce0 => grp_i_convolution1_fu_274_input_0_ce0,
        input_0_q0 => input_buf_0_q0,
        input_0_address1 => grp_i_convolution1_fu_274_input_0_address1,
        input_0_ce1 => grp_i_convolution1_fu_274_input_0_ce1,
        input_0_q1 => input_buf_0_q1,
        weights_0_address0 => grp_i_convolution1_fu_274_weights_0_address0,
        weights_0_ce0 => grp_i_convolution1_fu_274_weights_0_ce0,
        weights_0_q0 => weights1_buf_0_q0,
        weights_0_address1 => grp_i_convolution1_fu_274_weights_0_address1,
        weights_0_ce1 => grp_i_convolution1_fu_274_weights_0_ce1,
        weights_0_q1 => weights1_buf_0_q1,
        bias_address0 => grp_i_convolution1_fu_274_bias_address0,
        bias_ce0 => grp_i_convolution1_fu_274_bias_ce0,
        bias_q0 => bias1_buf_q0,
        output_r_address0 => grp_i_convolution1_fu_274_output_r_address0,
        output_r_ce0 => grp_i_convolution1_fu_274_output_r_ce0,
        output_r_we0 => grp_i_convolution1_fu_274_output_r_we0,
        output_r_d0 => grp_i_convolution1_fu_274_output_r_d0);

    grp_i_convolution5_fu_282 : component i_convolution5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_i_convolution5_fu_282_ap_start,
        ap_done => grp_i_convolution5_fu_282_ap_done,
        ap_idle => grp_i_convolution5_fu_282_ap_idle,
        ap_ready => grp_i_convolution5_fu_282_ap_ready,
        input_r_address0 => grp_i_convolution5_fu_282_input_r_address0,
        input_r_ce0 => grp_i_convolution5_fu_282_input_r_ce0,
        input_r_q0 => input5_inter_q0,
        weights_address0 => grp_i_convolution5_fu_282_weights_address0,
        weights_ce0 => grp_i_convolution5_fu_282_weights_ce0,
        weights_q0 => weights5_buf_q0,
        bias_address0 => grp_i_convolution5_fu_282_bias_address0,
        bias_ce0 => grp_i_convolution5_fu_282_bias_ce0,
        bias_q0 => bias5_buf_q0,
        output_0_0_address0 => grp_i_convolution5_fu_282_output_0_0_address0,
        output_0_0_ce0 => grp_i_convolution5_fu_282_output_0_0_ce0,
        output_0_0_we0 => grp_i_convolution5_fu_282_output_0_0_we0,
        output_0_0_d0 => grp_i_convolution5_fu_282_output_0_0_d0);

    grp_i_fc6_fu_290 : component i_fc6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_i_fc6_fu_290_ap_start,
        ap_done => grp_i_fc6_fu_290_ap_done,
        ap_idle => grp_i_fc6_fu_290_ap_idle,
        ap_ready => grp_i_fc6_fu_290_ap_ready,
        input_0_0_address0 => grp_i_fc6_fu_290_input_0_0_address0,
        input_0_0_ce0 => grp_i_fc6_fu_290_input_0_0_ce0,
        input_0_0_q0 => input6_inter_0_0_q0,
        m_axi_weights_AWVALID => grp_i_fc6_fu_290_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => grp_i_fc6_fu_290_m_axi_weights_AWADDR,
        m_axi_weights_AWID => grp_i_fc6_fu_290_m_axi_weights_AWID,
        m_axi_weights_AWLEN => grp_i_fc6_fu_290_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => grp_i_fc6_fu_290_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => grp_i_fc6_fu_290_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => grp_i_fc6_fu_290_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => grp_i_fc6_fu_290_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => grp_i_fc6_fu_290_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => grp_i_fc6_fu_290_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => grp_i_fc6_fu_290_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => grp_i_fc6_fu_290_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => grp_i_fc6_fu_290_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => grp_i_fc6_fu_290_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => grp_i_fc6_fu_290_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => grp_i_fc6_fu_290_m_axi_weights_WLAST,
        m_axi_weights_WID => grp_i_fc6_fu_290_m_axi_weights_WID,
        m_axi_weights_WUSER => grp_i_fc6_fu_290_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => grp_i_fc6_fu_290_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => DATA_WEIGHT_ARREADY,
        m_axi_weights_ARADDR => grp_i_fc6_fu_290_m_axi_weights_ARADDR,
        m_axi_weights_ARID => grp_i_fc6_fu_290_m_axi_weights_ARID,
        m_axi_weights_ARLEN => grp_i_fc6_fu_290_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => grp_i_fc6_fu_290_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => grp_i_fc6_fu_290_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => grp_i_fc6_fu_290_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => grp_i_fc6_fu_290_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => grp_i_fc6_fu_290_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => grp_i_fc6_fu_290_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => grp_i_fc6_fu_290_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => grp_i_fc6_fu_290_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => DATA_WEIGHT_RVALID,
        m_axi_weights_RREADY => grp_i_fc6_fu_290_m_axi_weights_RREADY,
        m_axi_weights_RDATA => DATA_WEIGHT_RDATA,
        m_axi_weights_RLAST => DATA_WEIGHT_RLAST,
        m_axi_weights_RID => DATA_WEIGHT_RID,
        m_axi_weights_RUSER => DATA_WEIGHT_RUSER,
        m_axi_weights_RRESP => DATA_WEIGHT_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => grp_i_fc6_fu_290_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset => weights_reg_488,
        m_axi_bias_AWVALID => grp_i_fc6_fu_290_m_axi_bias_AWVALID,
        m_axi_bias_AWREADY => ap_const_logic_0,
        m_axi_bias_AWADDR => grp_i_fc6_fu_290_m_axi_bias_AWADDR,
        m_axi_bias_AWID => grp_i_fc6_fu_290_m_axi_bias_AWID,
        m_axi_bias_AWLEN => grp_i_fc6_fu_290_m_axi_bias_AWLEN,
        m_axi_bias_AWSIZE => grp_i_fc6_fu_290_m_axi_bias_AWSIZE,
        m_axi_bias_AWBURST => grp_i_fc6_fu_290_m_axi_bias_AWBURST,
        m_axi_bias_AWLOCK => grp_i_fc6_fu_290_m_axi_bias_AWLOCK,
        m_axi_bias_AWCACHE => grp_i_fc6_fu_290_m_axi_bias_AWCACHE,
        m_axi_bias_AWPROT => grp_i_fc6_fu_290_m_axi_bias_AWPROT,
        m_axi_bias_AWQOS => grp_i_fc6_fu_290_m_axi_bias_AWQOS,
        m_axi_bias_AWREGION => grp_i_fc6_fu_290_m_axi_bias_AWREGION,
        m_axi_bias_AWUSER => grp_i_fc6_fu_290_m_axi_bias_AWUSER,
        m_axi_bias_WVALID => grp_i_fc6_fu_290_m_axi_bias_WVALID,
        m_axi_bias_WREADY => ap_const_logic_0,
        m_axi_bias_WDATA => grp_i_fc6_fu_290_m_axi_bias_WDATA,
        m_axi_bias_WSTRB => grp_i_fc6_fu_290_m_axi_bias_WSTRB,
        m_axi_bias_WLAST => grp_i_fc6_fu_290_m_axi_bias_WLAST,
        m_axi_bias_WID => grp_i_fc6_fu_290_m_axi_bias_WID,
        m_axi_bias_WUSER => grp_i_fc6_fu_290_m_axi_bias_WUSER,
        m_axi_bias_ARVALID => grp_i_fc6_fu_290_m_axi_bias_ARVALID,
        m_axi_bias_ARREADY => DATA_BIAS_ARREADY,
        m_axi_bias_ARADDR => grp_i_fc6_fu_290_m_axi_bias_ARADDR,
        m_axi_bias_ARID => grp_i_fc6_fu_290_m_axi_bias_ARID,
        m_axi_bias_ARLEN => grp_i_fc6_fu_290_m_axi_bias_ARLEN,
        m_axi_bias_ARSIZE => grp_i_fc6_fu_290_m_axi_bias_ARSIZE,
        m_axi_bias_ARBURST => grp_i_fc6_fu_290_m_axi_bias_ARBURST,
        m_axi_bias_ARLOCK => grp_i_fc6_fu_290_m_axi_bias_ARLOCK,
        m_axi_bias_ARCACHE => grp_i_fc6_fu_290_m_axi_bias_ARCACHE,
        m_axi_bias_ARPROT => grp_i_fc6_fu_290_m_axi_bias_ARPROT,
        m_axi_bias_ARQOS => grp_i_fc6_fu_290_m_axi_bias_ARQOS,
        m_axi_bias_ARREGION => grp_i_fc6_fu_290_m_axi_bias_ARREGION,
        m_axi_bias_ARUSER => grp_i_fc6_fu_290_m_axi_bias_ARUSER,
        m_axi_bias_RVALID => DATA_BIAS_RVALID,
        m_axi_bias_RREADY => grp_i_fc6_fu_290_m_axi_bias_RREADY,
        m_axi_bias_RDATA => DATA_BIAS_RDATA,
        m_axi_bias_RLAST => DATA_BIAS_RLAST,
        m_axi_bias_RID => DATA_BIAS_RID,
        m_axi_bias_RUSER => DATA_BIAS_RUSER,
        m_axi_bias_RRESP => DATA_BIAS_RRESP,
        m_axi_bias_BVALID => ap_const_logic_0,
        m_axi_bias_BREADY => grp_i_fc6_fu_290_m_axi_bias_BREADY,
        m_axi_bias_BRESP => ap_const_lv2_0,
        m_axi_bias_BID => ap_const_lv1_0,
        m_axi_bias_BUSER => ap_const_lv1_0,
        bias_offset => bias_reg_483,
        output_r_address0 => grp_i_fc6_fu_290_output_r_address0,
        output_r_ce0 => grp_i_fc6_fu_290_output_r_ce0,
        output_r_we0 => grp_i_fc6_fu_290_output_r_we0,
        output_r_d0 => grp_i_fc6_fu_290_output_r_d0);

    grp_i_max_pooling2_fu_302 : component i_max_pooling2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_i_max_pooling2_fu_302_ap_start,
        ap_done => grp_i_max_pooling2_fu_302_ap_done,
        ap_idle => grp_i_max_pooling2_fu_302_ap_idle,
        ap_ready => grp_i_max_pooling2_fu_302_ap_ready,
        input_r_address0 => grp_i_max_pooling2_fu_302_input_r_address0,
        input_r_ce0 => grp_i_max_pooling2_fu_302_input_r_ce0,
        input_r_q0 => input2_inter_q0,
        output_r_address0 => grp_i_max_pooling2_fu_302_output_r_address0,
        output_r_ce0 => grp_i_max_pooling2_fu_302_output_r_ce0,
        output_r_we0 => grp_i_max_pooling2_fu_302_output_r_we0,
        output_r_d0 => grp_i_max_pooling2_fu_302_output_r_d0);

    grp_i_max_pooling4_fu_308 : component i_max_pooling4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_i_max_pooling4_fu_308_ap_start,
        ap_done => grp_i_max_pooling4_fu_308_ap_done,
        ap_idle => grp_i_max_pooling4_fu_308_ap_idle,
        ap_ready => grp_i_max_pooling4_fu_308_ap_ready,
        input_r_address0 => grp_i_max_pooling4_fu_308_input_r_address0,
        input_r_ce0 => grp_i_max_pooling4_fu_308_input_r_ce0,
        input_r_q0 => input4_inter_q0,
        output_r_address0 => grp_i_max_pooling4_fu_308_output_r_address0,
        output_r_ce0 => grp_i_max_pooling4_fu_308_output_r_ce0,
        output_r_we0 => grp_i_max_pooling4_fu_308_output_r_we0,
        output_r_d0 => grp_i_max_pooling4_fu_308_output_r_d0);

    grp_ld_weights5_fu_314 : component ld_weights5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ld_weights5_fu_314_ap_start,
        ap_done => grp_ld_weights5_fu_314_ap_done,
        ap_idle => grp_ld_weights5_fu_314_ap_idle,
        ap_ready => grp_ld_weights5_fu_314_ap_ready,
        m_axi_weights5_AWVALID => grp_ld_weights5_fu_314_m_axi_weights5_AWVALID,
        m_axi_weights5_AWREADY => ap_const_logic_0,
        m_axi_weights5_AWADDR => grp_ld_weights5_fu_314_m_axi_weights5_AWADDR,
        m_axi_weights5_AWID => grp_ld_weights5_fu_314_m_axi_weights5_AWID,
        m_axi_weights5_AWLEN => grp_ld_weights5_fu_314_m_axi_weights5_AWLEN,
        m_axi_weights5_AWSIZE => grp_ld_weights5_fu_314_m_axi_weights5_AWSIZE,
        m_axi_weights5_AWBURST => grp_ld_weights5_fu_314_m_axi_weights5_AWBURST,
        m_axi_weights5_AWLOCK => grp_ld_weights5_fu_314_m_axi_weights5_AWLOCK,
        m_axi_weights5_AWCACHE => grp_ld_weights5_fu_314_m_axi_weights5_AWCACHE,
        m_axi_weights5_AWPROT => grp_ld_weights5_fu_314_m_axi_weights5_AWPROT,
        m_axi_weights5_AWQOS => grp_ld_weights5_fu_314_m_axi_weights5_AWQOS,
        m_axi_weights5_AWREGION => grp_ld_weights5_fu_314_m_axi_weights5_AWREGION,
        m_axi_weights5_AWUSER => grp_ld_weights5_fu_314_m_axi_weights5_AWUSER,
        m_axi_weights5_WVALID => grp_ld_weights5_fu_314_m_axi_weights5_WVALID,
        m_axi_weights5_WREADY => ap_const_logic_0,
        m_axi_weights5_WDATA => grp_ld_weights5_fu_314_m_axi_weights5_WDATA,
        m_axi_weights5_WSTRB => grp_ld_weights5_fu_314_m_axi_weights5_WSTRB,
        m_axi_weights5_WLAST => grp_ld_weights5_fu_314_m_axi_weights5_WLAST,
        m_axi_weights5_WID => grp_ld_weights5_fu_314_m_axi_weights5_WID,
        m_axi_weights5_WUSER => grp_ld_weights5_fu_314_m_axi_weights5_WUSER,
        m_axi_weights5_ARVALID => grp_ld_weights5_fu_314_m_axi_weights5_ARVALID,
        m_axi_weights5_ARREADY => DATA_WEIGHT_ARREADY,
        m_axi_weights5_ARADDR => grp_ld_weights5_fu_314_m_axi_weights5_ARADDR,
        m_axi_weights5_ARID => grp_ld_weights5_fu_314_m_axi_weights5_ARID,
        m_axi_weights5_ARLEN => grp_ld_weights5_fu_314_m_axi_weights5_ARLEN,
        m_axi_weights5_ARSIZE => grp_ld_weights5_fu_314_m_axi_weights5_ARSIZE,
        m_axi_weights5_ARBURST => grp_ld_weights5_fu_314_m_axi_weights5_ARBURST,
        m_axi_weights5_ARLOCK => grp_ld_weights5_fu_314_m_axi_weights5_ARLOCK,
        m_axi_weights5_ARCACHE => grp_ld_weights5_fu_314_m_axi_weights5_ARCACHE,
        m_axi_weights5_ARPROT => grp_ld_weights5_fu_314_m_axi_weights5_ARPROT,
        m_axi_weights5_ARQOS => grp_ld_weights5_fu_314_m_axi_weights5_ARQOS,
        m_axi_weights5_ARREGION => grp_ld_weights5_fu_314_m_axi_weights5_ARREGION,
        m_axi_weights5_ARUSER => grp_ld_weights5_fu_314_m_axi_weights5_ARUSER,
        m_axi_weights5_RVALID => DATA_WEIGHT_RVALID,
        m_axi_weights5_RREADY => grp_ld_weights5_fu_314_m_axi_weights5_RREADY,
        m_axi_weights5_RDATA => DATA_WEIGHT_RDATA,
        m_axi_weights5_RLAST => DATA_WEIGHT_RLAST,
        m_axi_weights5_RID => DATA_WEIGHT_RID,
        m_axi_weights5_RUSER => DATA_WEIGHT_RUSER,
        m_axi_weights5_RRESP => DATA_WEIGHT_RRESP,
        m_axi_weights5_BVALID => ap_const_logic_0,
        m_axi_weights5_BREADY => grp_ld_weights5_fu_314_m_axi_weights5_BREADY,
        m_axi_weights5_BRESP => ap_const_lv2_0,
        m_axi_weights5_BID => ap_const_lv1_0,
        m_axi_weights5_BUSER => ap_const_lv1_0,
        weights5_offset => weights2_reg_498,
        weights5_buf_address0 => grp_ld_weights5_fu_314_weights5_buf_address0,
        weights5_buf_ce0 => grp_ld_weights5_fu_314_weights5_buf_ce0,
        weights5_buf_we0 => grp_ld_weights5_fu_314_weights5_buf_we0,
        weights5_buf_d0 => grp_ld_weights5_fu_314_weights5_buf_d0);

    grp_ld_weights3_fu_322 : component ld_weights3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ld_weights3_fu_322_ap_start,
        ap_done => grp_ld_weights3_fu_322_ap_done,
        ap_idle => grp_ld_weights3_fu_322_ap_idle,
        ap_ready => grp_ld_weights3_fu_322_ap_ready,
        m_axi_weights3_AWVALID => grp_ld_weights3_fu_322_m_axi_weights3_AWVALID,
        m_axi_weights3_AWREADY => ap_const_logic_0,
        m_axi_weights3_AWADDR => grp_ld_weights3_fu_322_m_axi_weights3_AWADDR,
        m_axi_weights3_AWID => grp_ld_weights3_fu_322_m_axi_weights3_AWID,
        m_axi_weights3_AWLEN => grp_ld_weights3_fu_322_m_axi_weights3_AWLEN,
        m_axi_weights3_AWSIZE => grp_ld_weights3_fu_322_m_axi_weights3_AWSIZE,
        m_axi_weights3_AWBURST => grp_ld_weights3_fu_322_m_axi_weights3_AWBURST,
        m_axi_weights3_AWLOCK => grp_ld_weights3_fu_322_m_axi_weights3_AWLOCK,
        m_axi_weights3_AWCACHE => grp_ld_weights3_fu_322_m_axi_weights3_AWCACHE,
        m_axi_weights3_AWPROT => grp_ld_weights3_fu_322_m_axi_weights3_AWPROT,
        m_axi_weights3_AWQOS => grp_ld_weights3_fu_322_m_axi_weights3_AWQOS,
        m_axi_weights3_AWREGION => grp_ld_weights3_fu_322_m_axi_weights3_AWREGION,
        m_axi_weights3_AWUSER => grp_ld_weights3_fu_322_m_axi_weights3_AWUSER,
        m_axi_weights3_WVALID => grp_ld_weights3_fu_322_m_axi_weights3_WVALID,
        m_axi_weights3_WREADY => ap_const_logic_0,
        m_axi_weights3_WDATA => grp_ld_weights3_fu_322_m_axi_weights3_WDATA,
        m_axi_weights3_WSTRB => grp_ld_weights3_fu_322_m_axi_weights3_WSTRB,
        m_axi_weights3_WLAST => grp_ld_weights3_fu_322_m_axi_weights3_WLAST,
        m_axi_weights3_WID => grp_ld_weights3_fu_322_m_axi_weights3_WID,
        m_axi_weights3_WUSER => grp_ld_weights3_fu_322_m_axi_weights3_WUSER,
        m_axi_weights3_ARVALID => grp_ld_weights3_fu_322_m_axi_weights3_ARVALID,
        m_axi_weights3_ARREADY => DATA_WEIGHT_ARREADY,
        m_axi_weights3_ARADDR => grp_ld_weights3_fu_322_m_axi_weights3_ARADDR,
        m_axi_weights3_ARID => grp_ld_weights3_fu_322_m_axi_weights3_ARID,
        m_axi_weights3_ARLEN => grp_ld_weights3_fu_322_m_axi_weights3_ARLEN,
        m_axi_weights3_ARSIZE => grp_ld_weights3_fu_322_m_axi_weights3_ARSIZE,
        m_axi_weights3_ARBURST => grp_ld_weights3_fu_322_m_axi_weights3_ARBURST,
        m_axi_weights3_ARLOCK => grp_ld_weights3_fu_322_m_axi_weights3_ARLOCK,
        m_axi_weights3_ARCACHE => grp_ld_weights3_fu_322_m_axi_weights3_ARCACHE,
        m_axi_weights3_ARPROT => grp_ld_weights3_fu_322_m_axi_weights3_ARPROT,
        m_axi_weights3_ARQOS => grp_ld_weights3_fu_322_m_axi_weights3_ARQOS,
        m_axi_weights3_ARREGION => grp_ld_weights3_fu_322_m_axi_weights3_ARREGION,
        m_axi_weights3_ARUSER => grp_ld_weights3_fu_322_m_axi_weights3_ARUSER,
        m_axi_weights3_RVALID => DATA_WEIGHT_RVALID,
        m_axi_weights3_RREADY => grp_ld_weights3_fu_322_m_axi_weights3_RREADY,
        m_axi_weights3_RDATA => DATA_WEIGHT_RDATA,
        m_axi_weights3_RLAST => DATA_WEIGHT_RLAST,
        m_axi_weights3_RID => DATA_WEIGHT_RID,
        m_axi_weights3_RUSER => DATA_WEIGHT_RUSER,
        m_axi_weights3_RRESP => DATA_WEIGHT_RRESP,
        m_axi_weights3_BVALID => ap_const_logic_0,
        m_axi_weights3_BREADY => grp_ld_weights3_fu_322_m_axi_weights3_BREADY,
        m_axi_weights3_BRESP => ap_const_lv2_0,
        m_axi_weights3_BID => ap_const_lv1_0,
        m_axi_weights3_BUSER => ap_const_lv1_0,
        weights3_offset => weights4_reg_508,
        weights3_buf_address0 => grp_ld_weights3_fu_322_weights3_buf_address0,
        weights3_buf_ce0 => grp_ld_weights3_fu_322_weights3_buf_ce0,
        weights3_buf_we0 => grp_ld_weights3_fu_322_weights3_buf_we0,
        weights3_buf_d0 => grp_ld_weights3_fu_322_weights3_buf_d0);

    grp_ld_weights1_fu_330 : component ld_weights1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ld_weights1_fu_330_ap_start,
        ap_done => grp_ld_weights1_fu_330_ap_done,
        ap_idle => grp_ld_weights1_fu_330_ap_idle,
        ap_ready => grp_ld_weights1_fu_330_ap_ready,
        m_axi_weights1_AWVALID => grp_ld_weights1_fu_330_m_axi_weights1_AWVALID,
        m_axi_weights1_AWREADY => ap_const_logic_0,
        m_axi_weights1_AWADDR => grp_ld_weights1_fu_330_m_axi_weights1_AWADDR,
        m_axi_weights1_AWID => grp_ld_weights1_fu_330_m_axi_weights1_AWID,
        m_axi_weights1_AWLEN => grp_ld_weights1_fu_330_m_axi_weights1_AWLEN,
        m_axi_weights1_AWSIZE => grp_ld_weights1_fu_330_m_axi_weights1_AWSIZE,
        m_axi_weights1_AWBURST => grp_ld_weights1_fu_330_m_axi_weights1_AWBURST,
        m_axi_weights1_AWLOCK => grp_ld_weights1_fu_330_m_axi_weights1_AWLOCK,
        m_axi_weights1_AWCACHE => grp_ld_weights1_fu_330_m_axi_weights1_AWCACHE,
        m_axi_weights1_AWPROT => grp_ld_weights1_fu_330_m_axi_weights1_AWPROT,
        m_axi_weights1_AWQOS => grp_ld_weights1_fu_330_m_axi_weights1_AWQOS,
        m_axi_weights1_AWREGION => grp_ld_weights1_fu_330_m_axi_weights1_AWREGION,
        m_axi_weights1_AWUSER => grp_ld_weights1_fu_330_m_axi_weights1_AWUSER,
        m_axi_weights1_WVALID => grp_ld_weights1_fu_330_m_axi_weights1_WVALID,
        m_axi_weights1_WREADY => ap_const_logic_0,
        m_axi_weights1_WDATA => grp_ld_weights1_fu_330_m_axi_weights1_WDATA,
        m_axi_weights1_WSTRB => grp_ld_weights1_fu_330_m_axi_weights1_WSTRB,
        m_axi_weights1_WLAST => grp_ld_weights1_fu_330_m_axi_weights1_WLAST,
        m_axi_weights1_WID => grp_ld_weights1_fu_330_m_axi_weights1_WID,
        m_axi_weights1_WUSER => grp_ld_weights1_fu_330_m_axi_weights1_WUSER,
        m_axi_weights1_ARVALID => grp_ld_weights1_fu_330_m_axi_weights1_ARVALID,
        m_axi_weights1_ARREADY => DATA_WEIGHT_ARREADY,
        m_axi_weights1_ARADDR => grp_ld_weights1_fu_330_m_axi_weights1_ARADDR,
        m_axi_weights1_ARID => grp_ld_weights1_fu_330_m_axi_weights1_ARID,
        m_axi_weights1_ARLEN => grp_ld_weights1_fu_330_m_axi_weights1_ARLEN,
        m_axi_weights1_ARSIZE => grp_ld_weights1_fu_330_m_axi_weights1_ARSIZE,
        m_axi_weights1_ARBURST => grp_ld_weights1_fu_330_m_axi_weights1_ARBURST,
        m_axi_weights1_ARLOCK => grp_ld_weights1_fu_330_m_axi_weights1_ARLOCK,
        m_axi_weights1_ARCACHE => grp_ld_weights1_fu_330_m_axi_weights1_ARCACHE,
        m_axi_weights1_ARPROT => grp_ld_weights1_fu_330_m_axi_weights1_ARPROT,
        m_axi_weights1_ARQOS => grp_ld_weights1_fu_330_m_axi_weights1_ARQOS,
        m_axi_weights1_ARREGION => grp_ld_weights1_fu_330_m_axi_weights1_ARREGION,
        m_axi_weights1_ARUSER => grp_ld_weights1_fu_330_m_axi_weights1_ARUSER,
        m_axi_weights1_RVALID => DATA_WEIGHT_RVALID,
        m_axi_weights1_RREADY => grp_ld_weights1_fu_330_m_axi_weights1_RREADY,
        m_axi_weights1_RDATA => DATA_WEIGHT_RDATA,
        m_axi_weights1_RLAST => DATA_WEIGHT_RLAST,
        m_axi_weights1_RID => DATA_WEIGHT_RID,
        m_axi_weights1_RUSER => DATA_WEIGHT_RUSER,
        m_axi_weights1_RRESP => DATA_WEIGHT_RRESP,
        m_axi_weights1_BVALID => ap_const_logic_0,
        m_axi_weights1_BREADY => grp_ld_weights1_fu_330_m_axi_weights1_BREADY,
        m_axi_weights1_BRESP => ap_const_lv2_0,
        m_axi_weights1_BID => ap_const_lv1_0,
        m_axi_weights1_BUSER => ap_const_lv1_0,
        weights1_offset => weights7_reg_518,
        weights1_buf_0_address0 => grp_ld_weights1_fu_330_weights1_buf_0_address0,
        weights1_buf_0_ce0 => grp_ld_weights1_fu_330_weights1_buf_0_ce0,
        weights1_buf_0_we0 => grp_ld_weights1_fu_330_weights1_buf_0_we0,
        weights1_buf_0_d0 => grp_ld_weights1_fu_330_weights1_buf_0_d0);

    grp_ld_input_fu_338 : component ld_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ld_input_fu_338_ap_start,
        ap_done => grp_ld_input_fu_338_ap_done,
        ap_idle => grp_ld_input_fu_338_ap_idle,
        ap_ready => grp_ld_input_fu_338_ap_ready,
        m_axi_input_r_AWVALID => grp_ld_input_fu_338_m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY => ap_const_logic_0,
        m_axi_input_r_AWADDR => grp_ld_input_fu_338_m_axi_input_r_AWADDR,
        m_axi_input_r_AWID => grp_ld_input_fu_338_m_axi_input_r_AWID,
        m_axi_input_r_AWLEN => grp_ld_input_fu_338_m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE => grp_ld_input_fu_338_m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST => grp_ld_input_fu_338_m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK => grp_ld_input_fu_338_m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE => grp_ld_input_fu_338_m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT => grp_ld_input_fu_338_m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS => grp_ld_input_fu_338_m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION => grp_ld_input_fu_338_m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER => grp_ld_input_fu_338_m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID => grp_ld_input_fu_338_m_axi_input_r_WVALID,
        m_axi_input_r_WREADY => ap_const_logic_0,
        m_axi_input_r_WDATA => grp_ld_input_fu_338_m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB => grp_ld_input_fu_338_m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST => grp_ld_input_fu_338_m_axi_input_r_WLAST,
        m_axi_input_r_WID => grp_ld_input_fu_338_m_axi_input_r_WID,
        m_axi_input_r_WUSER => grp_ld_input_fu_338_m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID => grp_ld_input_fu_338_m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY => DATA_INPUT_ARREADY,
        m_axi_input_r_ARADDR => grp_ld_input_fu_338_m_axi_input_r_ARADDR,
        m_axi_input_r_ARID => grp_ld_input_fu_338_m_axi_input_r_ARID,
        m_axi_input_r_ARLEN => grp_ld_input_fu_338_m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE => grp_ld_input_fu_338_m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST => grp_ld_input_fu_338_m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK => grp_ld_input_fu_338_m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE => grp_ld_input_fu_338_m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT => grp_ld_input_fu_338_m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS => grp_ld_input_fu_338_m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION => grp_ld_input_fu_338_m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER => grp_ld_input_fu_338_m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID => DATA_INPUT_RVALID,
        m_axi_input_r_RREADY => grp_ld_input_fu_338_m_axi_input_r_RREADY,
        m_axi_input_r_RDATA => DATA_INPUT_RDATA,
        m_axi_input_r_RLAST => DATA_INPUT_RLAST,
        m_axi_input_r_RID => DATA_INPUT_RID,
        m_axi_input_r_RUSER => DATA_INPUT_RUSER,
        m_axi_input_r_RRESP => DATA_INPUT_RRESP,
        m_axi_input_r_BVALID => ap_const_logic_0,
        m_axi_input_r_BREADY => grp_ld_input_fu_338_m_axi_input_r_BREADY,
        m_axi_input_r_BRESP => ap_const_lv2_0,
        m_axi_input_r_BID => ap_const_lv1_0,
        m_axi_input_r_BUSER => ap_const_lv1_0,
        input_offset => input1_reg_523,
        input_buf_0_address0 => grp_ld_input_fu_338_input_buf_0_address0,
        input_buf_0_ce0 => grp_ld_input_fu_338_input_buf_0_ce0,
        input_buf_0_we0 => grp_ld_input_fu_338_input_buf_0_we0,
        input_buf_0_d0 => grp_ld_input_fu_338_input_buf_0_d0);

    grp_ld_bias5_fu_346 : component ld_bias5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ld_bias5_fu_346_ap_start,
        ap_done => grp_ld_bias5_fu_346_ap_done,
        ap_idle => grp_ld_bias5_fu_346_ap_idle,
        ap_ready => grp_ld_bias5_fu_346_ap_ready,
        m_axi_bias5_AWVALID => grp_ld_bias5_fu_346_m_axi_bias5_AWVALID,
        m_axi_bias5_AWREADY => ap_const_logic_0,
        m_axi_bias5_AWADDR => grp_ld_bias5_fu_346_m_axi_bias5_AWADDR,
        m_axi_bias5_AWID => grp_ld_bias5_fu_346_m_axi_bias5_AWID,
        m_axi_bias5_AWLEN => grp_ld_bias5_fu_346_m_axi_bias5_AWLEN,
        m_axi_bias5_AWSIZE => grp_ld_bias5_fu_346_m_axi_bias5_AWSIZE,
        m_axi_bias5_AWBURST => grp_ld_bias5_fu_346_m_axi_bias5_AWBURST,
        m_axi_bias5_AWLOCK => grp_ld_bias5_fu_346_m_axi_bias5_AWLOCK,
        m_axi_bias5_AWCACHE => grp_ld_bias5_fu_346_m_axi_bias5_AWCACHE,
        m_axi_bias5_AWPROT => grp_ld_bias5_fu_346_m_axi_bias5_AWPROT,
        m_axi_bias5_AWQOS => grp_ld_bias5_fu_346_m_axi_bias5_AWQOS,
        m_axi_bias5_AWREGION => grp_ld_bias5_fu_346_m_axi_bias5_AWREGION,
        m_axi_bias5_AWUSER => grp_ld_bias5_fu_346_m_axi_bias5_AWUSER,
        m_axi_bias5_WVALID => grp_ld_bias5_fu_346_m_axi_bias5_WVALID,
        m_axi_bias5_WREADY => ap_const_logic_0,
        m_axi_bias5_WDATA => grp_ld_bias5_fu_346_m_axi_bias5_WDATA,
        m_axi_bias5_WSTRB => grp_ld_bias5_fu_346_m_axi_bias5_WSTRB,
        m_axi_bias5_WLAST => grp_ld_bias5_fu_346_m_axi_bias5_WLAST,
        m_axi_bias5_WID => grp_ld_bias5_fu_346_m_axi_bias5_WID,
        m_axi_bias5_WUSER => grp_ld_bias5_fu_346_m_axi_bias5_WUSER,
        m_axi_bias5_ARVALID => grp_ld_bias5_fu_346_m_axi_bias5_ARVALID,
        m_axi_bias5_ARREADY => DATA_BIAS_ARREADY,
        m_axi_bias5_ARADDR => grp_ld_bias5_fu_346_m_axi_bias5_ARADDR,
        m_axi_bias5_ARID => grp_ld_bias5_fu_346_m_axi_bias5_ARID,
        m_axi_bias5_ARLEN => grp_ld_bias5_fu_346_m_axi_bias5_ARLEN,
        m_axi_bias5_ARSIZE => grp_ld_bias5_fu_346_m_axi_bias5_ARSIZE,
        m_axi_bias5_ARBURST => grp_ld_bias5_fu_346_m_axi_bias5_ARBURST,
        m_axi_bias5_ARLOCK => grp_ld_bias5_fu_346_m_axi_bias5_ARLOCK,
        m_axi_bias5_ARCACHE => grp_ld_bias5_fu_346_m_axi_bias5_ARCACHE,
        m_axi_bias5_ARPROT => grp_ld_bias5_fu_346_m_axi_bias5_ARPROT,
        m_axi_bias5_ARQOS => grp_ld_bias5_fu_346_m_axi_bias5_ARQOS,
        m_axi_bias5_ARREGION => grp_ld_bias5_fu_346_m_axi_bias5_ARREGION,
        m_axi_bias5_ARUSER => grp_ld_bias5_fu_346_m_axi_bias5_ARUSER,
        m_axi_bias5_RVALID => DATA_BIAS_RVALID,
        m_axi_bias5_RREADY => grp_ld_bias5_fu_346_m_axi_bias5_RREADY,
        m_axi_bias5_RDATA => DATA_BIAS_RDATA,
        m_axi_bias5_RLAST => DATA_BIAS_RLAST,
        m_axi_bias5_RID => DATA_BIAS_RID,
        m_axi_bias5_RUSER => DATA_BIAS_RUSER,
        m_axi_bias5_RRESP => DATA_BIAS_RRESP,
        m_axi_bias5_BVALID => ap_const_logic_0,
        m_axi_bias5_BREADY => grp_ld_bias5_fu_346_m_axi_bias5_BREADY,
        m_axi_bias5_BRESP => ap_const_lv2_0,
        m_axi_bias5_BID => ap_const_lv1_0,
        m_axi_bias5_BUSER => ap_const_lv1_0,
        bias5_offset => bias2_reg_493,
        bias5_buf_address0 => grp_ld_bias5_fu_346_bias5_buf_address0,
        bias5_buf_ce0 => grp_ld_bias5_fu_346_bias5_buf_ce0,
        bias5_buf_we0 => grp_ld_bias5_fu_346_bias5_buf_we0,
        bias5_buf_d0 => grp_ld_bias5_fu_346_bias5_buf_d0);

    grp_ld_bias3_fu_354 : component ld_bias3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ld_bias3_fu_354_ap_start,
        ap_done => grp_ld_bias3_fu_354_ap_done,
        ap_idle => grp_ld_bias3_fu_354_ap_idle,
        ap_ready => grp_ld_bias3_fu_354_ap_ready,
        m_axi_bias3_AWVALID => grp_ld_bias3_fu_354_m_axi_bias3_AWVALID,
        m_axi_bias3_AWREADY => ap_const_logic_0,
        m_axi_bias3_AWADDR => grp_ld_bias3_fu_354_m_axi_bias3_AWADDR,
        m_axi_bias3_AWID => grp_ld_bias3_fu_354_m_axi_bias3_AWID,
        m_axi_bias3_AWLEN => grp_ld_bias3_fu_354_m_axi_bias3_AWLEN,
        m_axi_bias3_AWSIZE => grp_ld_bias3_fu_354_m_axi_bias3_AWSIZE,
        m_axi_bias3_AWBURST => grp_ld_bias3_fu_354_m_axi_bias3_AWBURST,
        m_axi_bias3_AWLOCK => grp_ld_bias3_fu_354_m_axi_bias3_AWLOCK,
        m_axi_bias3_AWCACHE => grp_ld_bias3_fu_354_m_axi_bias3_AWCACHE,
        m_axi_bias3_AWPROT => grp_ld_bias3_fu_354_m_axi_bias3_AWPROT,
        m_axi_bias3_AWQOS => grp_ld_bias3_fu_354_m_axi_bias3_AWQOS,
        m_axi_bias3_AWREGION => grp_ld_bias3_fu_354_m_axi_bias3_AWREGION,
        m_axi_bias3_AWUSER => grp_ld_bias3_fu_354_m_axi_bias3_AWUSER,
        m_axi_bias3_WVALID => grp_ld_bias3_fu_354_m_axi_bias3_WVALID,
        m_axi_bias3_WREADY => ap_const_logic_0,
        m_axi_bias3_WDATA => grp_ld_bias3_fu_354_m_axi_bias3_WDATA,
        m_axi_bias3_WSTRB => grp_ld_bias3_fu_354_m_axi_bias3_WSTRB,
        m_axi_bias3_WLAST => grp_ld_bias3_fu_354_m_axi_bias3_WLAST,
        m_axi_bias3_WID => grp_ld_bias3_fu_354_m_axi_bias3_WID,
        m_axi_bias3_WUSER => grp_ld_bias3_fu_354_m_axi_bias3_WUSER,
        m_axi_bias3_ARVALID => grp_ld_bias3_fu_354_m_axi_bias3_ARVALID,
        m_axi_bias3_ARREADY => DATA_BIAS_ARREADY,
        m_axi_bias3_ARADDR => grp_ld_bias3_fu_354_m_axi_bias3_ARADDR,
        m_axi_bias3_ARID => grp_ld_bias3_fu_354_m_axi_bias3_ARID,
        m_axi_bias3_ARLEN => grp_ld_bias3_fu_354_m_axi_bias3_ARLEN,
        m_axi_bias3_ARSIZE => grp_ld_bias3_fu_354_m_axi_bias3_ARSIZE,
        m_axi_bias3_ARBURST => grp_ld_bias3_fu_354_m_axi_bias3_ARBURST,
        m_axi_bias3_ARLOCK => grp_ld_bias3_fu_354_m_axi_bias3_ARLOCK,
        m_axi_bias3_ARCACHE => grp_ld_bias3_fu_354_m_axi_bias3_ARCACHE,
        m_axi_bias3_ARPROT => grp_ld_bias3_fu_354_m_axi_bias3_ARPROT,
        m_axi_bias3_ARQOS => grp_ld_bias3_fu_354_m_axi_bias3_ARQOS,
        m_axi_bias3_ARREGION => grp_ld_bias3_fu_354_m_axi_bias3_ARREGION,
        m_axi_bias3_ARUSER => grp_ld_bias3_fu_354_m_axi_bias3_ARUSER,
        m_axi_bias3_RVALID => DATA_BIAS_RVALID,
        m_axi_bias3_RREADY => grp_ld_bias3_fu_354_m_axi_bias3_RREADY,
        m_axi_bias3_RDATA => DATA_BIAS_RDATA,
        m_axi_bias3_RLAST => DATA_BIAS_RLAST,
        m_axi_bias3_RID => DATA_BIAS_RID,
        m_axi_bias3_RUSER => DATA_BIAS_RUSER,
        m_axi_bias3_RRESP => DATA_BIAS_RRESP,
        m_axi_bias3_BVALID => ap_const_logic_0,
        m_axi_bias3_BREADY => grp_ld_bias3_fu_354_m_axi_bias3_BREADY,
        m_axi_bias3_BRESP => ap_const_lv2_0,
        m_axi_bias3_BID => ap_const_lv1_0,
        m_axi_bias3_BUSER => ap_const_lv1_0,
        bias3_offset => bias4_reg_503,
        bias3_buf_address0 => grp_ld_bias3_fu_354_bias3_buf_address0,
        bias3_buf_ce0 => grp_ld_bias3_fu_354_bias3_buf_ce0,
        bias3_buf_we0 => grp_ld_bias3_fu_354_bias3_buf_we0,
        bias3_buf_d0 => grp_ld_bias3_fu_354_bias3_buf_d0);

    grp_st_output_fu_362 : component st_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_st_output_fu_362_ap_start,
        ap_done => grp_st_output_fu_362_ap_done,
        ap_idle => grp_st_output_fu_362_ap_idle,
        ap_ready => grp_st_output_fu_362_ap_ready,
        m_axi_output_r_AWVALID => grp_st_output_fu_362_m_axi_output_r_AWVALID,
        m_axi_output_r_AWREADY => DATA_OUTPUT_AWREADY,
        m_axi_output_r_AWADDR => grp_st_output_fu_362_m_axi_output_r_AWADDR,
        m_axi_output_r_AWID => grp_st_output_fu_362_m_axi_output_r_AWID,
        m_axi_output_r_AWLEN => grp_st_output_fu_362_m_axi_output_r_AWLEN,
        m_axi_output_r_AWSIZE => grp_st_output_fu_362_m_axi_output_r_AWSIZE,
        m_axi_output_r_AWBURST => grp_st_output_fu_362_m_axi_output_r_AWBURST,
        m_axi_output_r_AWLOCK => grp_st_output_fu_362_m_axi_output_r_AWLOCK,
        m_axi_output_r_AWCACHE => grp_st_output_fu_362_m_axi_output_r_AWCACHE,
        m_axi_output_r_AWPROT => grp_st_output_fu_362_m_axi_output_r_AWPROT,
        m_axi_output_r_AWQOS => grp_st_output_fu_362_m_axi_output_r_AWQOS,
        m_axi_output_r_AWREGION => grp_st_output_fu_362_m_axi_output_r_AWREGION,
        m_axi_output_r_AWUSER => grp_st_output_fu_362_m_axi_output_r_AWUSER,
        m_axi_output_r_WVALID => grp_st_output_fu_362_m_axi_output_r_WVALID,
        m_axi_output_r_WREADY => DATA_OUTPUT_WREADY,
        m_axi_output_r_WDATA => grp_st_output_fu_362_m_axi_output_r_WDATA,
        m_axi_output_r_WSTRB => grp_st_output_fu_362_m_axi_output_r_WSTRB,
        m_axi_output_r_WLAST => grp_st_output_fu_362_m_axi_output_r_WLAST,
        m_axi_output_r_WID => grp_st_output_fu_362_m_axi_output_r_WID,
        m_axi_output_r_WUSER => grp_st_output_fu_362_m_axi_output_r_WUSER,
        m_axi_output_r_ARVALID => grp_st_output_fu_362_m_axi_output_r_ARVALID,
        m_axi_output_r_ARREADY => ap_const_logic_0,
        m_axi_output_r_ARADDR => grp_st_output_fu_362_m_axi_output_r_ARADDR,
        m_axi_output_r_ARID => grp_st_output_fu_362_m_axi_output_r_ARID,
        m_axi_output_r_ARLEN => grp_st_output_fu_362_m_axi_output_r_ARLEN,
        m_axi_output_r_ARSIZE => grp_st_output_fu_362_m_axi_output_r_ARSIZE,
        m_axi_output_r_ARBURST => grp_st_output_fu_362_m_axi_output_r_ARBURST,
        m_axi_output_r_ARLOCK => grp_st_output_fu_362_m_axi_output_r_ARLOCK,
        m_axi_output_r_ARCACHE => grp_st_output_fu_362_m_axi_output_r_ARCACHE,
        m_axi_output_r_ARPROT => grp_st_output_fu_362_m_axi_output_r_ARPROT,
        m_axi_output_r_ARQOS => grp_st_output_fu_362_m_axi_output_r_ARQOS,
        m_axi_output_r_ARREGION => grp_st_output_fu_362_m_axi_output_r_ARREGION,
        m_axi_output_r_ARUSER => grp_st_output_fu_362_m_axi_output_r_ARUSER,
        m_axi_output_r_RVALID => ap_const_logic_0,
        m_axi_output_r_RREADY => grp_st_output_fu_362_m_axi_output_r_RREADY,
        m_axi_output_r_RDATA => ap_const_lv32_0,
        m_axi_output_r_RLAST => ap_const_logic_0,
        m_axi_output_r_RID => ap_const_lv1_0,
        m_axi_output_r_RUSER => ap_const_lv1_0,
        m_axi_output_r_RRESP => ap_const_lv2_0,
        m_axi_output_r_BVALID => DATA_OUTPUT_BVALID,
        m_axi_output_r_BREADY => grp_st_output_fu_362_m_axi_output_r_BREADY,
        m_axi_output_r_BRESP => DATA_OUTPUT_BRESP,
        m_axi_output_r_BID => DATA_OUTPUT_BID,
        m_axi_output_r_BUSER => DATA_OUTPUT_BUSER,
        output_offset => output1_reg_478,
        output_buf_address0 => grp_st_output_fu_362_output_buf_address0,
        output_buf_ce0 => grp_st_output_fu_362_output_buf_ce0,
        output_buf_q0 => output_buf_q0);

    grp_ld_bias1_fu_370 : component ld_bias1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ld_bias1_fu_370_ap_start,
        ap_done => grp_ld_bias1_fu_370_ap_done,
        ap_idle => grp_ld_bias1_fu_370_ap_idle,
        ap_ready => grp_ld_bias1_fu_370_ap_ready,
        m_axi_bias1_AWVALID => grp_ld_bias1_fu_370_m_axi_bias1_AWVALID,
        m_axi_bias1_AWREADY => ap_const_logic_0,
        m_axi_bias1_AWADDR => grp_ld_bias1_fu_370_m_axi_bias1_AWADDR,
        m_axi_bias1_AWID => grp_ld_bias1_fu_370_m_axi_bias1_AWID,
        m_axi_bias1_AWLEN => grp_ld_bias1_fu_370_m_axi_bias1_AWLEN,
        m_axi_bias1_AWSIZE => grp_ld_bias1_fu_370_m_axi_bias1_AWSIZE,
        m_axi_bias1_AWBURST => grp_ld_bias1_fu_370_m_axi_bias1_AWBURST,
        m_axi_bias1_AWLOCK => grp_ld_bias1_fu_370_m_axi_bias1_AWLOCK,
        m_axi_bias1_AWCACHE => grp_ld_bias1_fu_370_m_axi_bias1_AWCACHE,
        m_axi_bias1_AWPROT => grp_ld_bias1_fu_370_m_axi_bias1_AWPROT,
        m_axi_bias1_AWQOS => grp_ld_bias1_fu_370_m_axi_bias1_AWQOS,
        m_axi_bias1_AWREGION => grp_ld_bias1_fu_370_m_axi_bias1_AWREGION,
        m_axi_bias1_AWUSER => grp_ld_bias1_fu_370_m_axi_bias1_AWUSER,
        m_axi_bias1_WVALID => grp_ld_bias1_fu_370_m_axi_bias1_WVALID,
        m_axi_bias1_WREADY => ap_const_logic_0,
        m_axi_bias1_WDATA => grp_ld_bias1_fu_370_m_axi_bias1_WDATA,
        m_axi_bias1_WSTRB => grp_ld_bias1_fu_370_m_axi_bias1_WSTRB,
        m_axi_bias1_WLAST => grp_ld_bias1_fu_370_m_axi_bias1_WLAST,
        m_axi_bias1_WID => grp_ld_bias1_fu_370_m_axi_bias1_WID,
        m_axi_bias1_WUSER => grp_ld_bias1_fu_370_m_axi_bias1_WUSER,
        m_axi_bias1_ARVALID => grp_ld_bias1_fu_370_m_axi_bias1_ARVALID,
        m_axi_bias1_ARREADY => DATA_BIAS_ARREADY,
        m_axi_bias1_ARADDR => grp_ld_bias1_fu_370_m_axi_bias1_ARADDR,
        m_axi_bias1_ARID => grp_ld_bias1_fu_370_m_axi_bias1_ARID,
        m_axi_bias1_ARLEN => grp_ld_bias1_fu_370_m_axi_bias1_ARLEN,
        m_axi_bias1_ARSIZE => grp_ld_bias1_fu_370_m_axi_bias1_ARSIZE,
        m_axi_bias1_ARBURST => grp_ld_bias1_fu_370_m_axi_bias1_ARBURST,
        m_axi_bias1_ARLOCK => grp_ld_bias1_fu_370_m_axi_bias1_ARLOCK,
        m_axi_bias1_ARCACHE => grp_ld_bias1_fu_370_m_axi_bias1_ARCACHE,
        m_axi_bias1_ARPROT => grp_ld_bias1_fu_370_m_axi_bias1_ARPROT,
        m_axi_bias1_ARQOS => grp_ld_bias1_fu_370_m_axi_bias1_ARQOS,
        m_axi_bias1_ARREGION => grp_ld_bias1_fu_370_m_axi_bias1_ARREGION,
        m_axi_bias1_ARUSER => grp_ld_bias1_fu_370_m_axi_bias1_ARUSER,
        m_axi_bias1_RVALID => DATA_BIAS_RVALID,
        m_axi_bias1_RREADY => grp_ld_bias1_fu_370_m_axi_bias1_RREADY,
        m_axi_bias1_RDATA => DATA_BIAS_RDATA,
        m_axi_bias1_RLAST => DATA_BIAS_RLAST,
        m_axi_bias1_RID => DATA_BIAS_RID,
        m_axi_bias1_RUSER => DATA_BIAS_RUSER,
        m_axi_bias1_RRESP => DATA_BIAS_RRESP,
        m_axi_bias1_BVALID => ap_const_logic_0,
        m_axi_bias1_BREADY => grp_ld_bias1_fu_370_m_axi_bias1_BREADY,
        m_axi_bias1_BRESP => ap_const_lv2_0,
        m_axi_bias1_BID => ap_const_lv1_0,
        m_axi_bias1_BUSER => ap_const_lv1_0,
        bias1_offset => bias7_reg_513,
        bias1_buf_address0 => grp_ld_bias1_fu_370_bias1_buf_address0,
        bias1_buf_ce0 => grp_ld_bias1_fu_370_bias1_buf_ce0,
        bias1_buf_we0 => grp_ld_bias1_fu_370_bias1_buf_we0,
        bias1_buf_d0 => grp_ld_bias1_fu_370_bias1_buf_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_i_convolution1_fu_274_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_i_convolution1_fu_274_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_i_convolution1_fu_274_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_convolution1_fu_274_ap_ready = ap_const_logic_1)) then 
                    grp_i_convolution1_fu_274_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_i_convolution3_fu_266_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_i_convolution3_fu_266_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_i_convolution3_fu_266_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_convolution3_fu_266_ap_ready = ap_const_logic_1)) then 
                    grp_i_convolution3_fu_266_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_i_convolution5_fu_282_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_i_convolution5_fu_282_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_i_convolution5_fu_282_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_convolution5_fu_282_ap_ready = ap_const_logic_1)) then 
                    grp_i_convolution5_fu_282_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_i_fc6_fu_290_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_i_fc6_fu_290_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_i_fc6_fu_290_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_fc6_fu_290_ap_ready = ap_const_logic_1)) then 
                    grp_i_fc6_fu_290_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_i_max_pooling2_fu_302_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_i_max_pooling2_fu_302_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_i_max_pooling2_fu_302_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_max_pooling2_fu_302_ap_ready = ap_const_logic_1)) then 
                    grp_i_max_pooling2_fu_302_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_i_max_pooling4_fu_308_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_i_max_pooling4_fu_308_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_i_max_pooling4_fu_308_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_i_max_pooling4_fu_308_ap_ready = ap_const_logic_1)) then 
                    grp_i_max_pooling4_fu_308_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ld_bias1_fu_370_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ld_bias1_fu_370_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_ld_bias1_fu_370_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ld_bias1_fu_370_ap_ready = ap_const_logic_1)) then 
                    grp_ld_bias1_fu_370_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ld_bias3_fu_354_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ld_bias3_fu_354_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_ld_bias3_fu_354_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ld_bias3_fu_354_ap_ready = ap_const_logic_1)) then 
                    grp_ld_bias3_fu_354_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ld_bias5_fu_346_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ld_bias5_fu_346_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_ld_bias5_fu_346_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ld_bias5_fu_346_ap_ready = ap_const_logic_1)) then 
                    grp_ld_bias5_fu_346_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ld_input_fu_338_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ld_input_fu_338_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_ld_input_fu_338_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ld_input_fu_338_ap_ready = ap_const_logic_1)) then 
                    grp_ld_input_fu_338_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ld_weights1_fu_330_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ld_weights1_fu_330_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_ld_weights1_fu_330_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ld_weights1_fu_330_ap_ready = ap_const_logic_1)) then 
                    grp_ld_weights1_fu_330_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ld_weights3_fu_322_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ld_weights3_fu_322_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_ld_weights3_fu_322_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ld_weights3_fu_322_ap_ready = ap_const_logic_1)) then 
                    grp_ld_weights3_fu_322_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ld_weights5_fu_314_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ld_weights5_fu_314_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_ld_weights5_fu_314_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ld_weights5_fu_314_ap_ready = ap_const_logic_1)) then 
                    grp_ld_weights5_fu_314_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_st_output_fu_362_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_st_output_fu_362_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_st_output_fu_362_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_st_output_fu_362_ap_ready = ap_const_logic_1)) then 
                    grp_st_output_fu_362_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bias2_reg_493 <= bias5(31 downto 2);
                bias4_reg_503 <= bias3(31 downto 2);
                bias7_reg_513 <= bias1(31 downto 2);
                bias_reg_483 <= bias6(31 downto 2);
                input1_reg_523 <= input_r(31 downto 2);
                output1_reg_478 <= output_r(31 downto 2);
                weights2_reg_498 <= weights5(31 downto 2);
                weights4_reg_508 <= weights3(31 downto 2);
                weights7_reg_518 <= weights1(31 downto 2);
                weights_reg_488 <= weights6(31 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_i_convolution3_fu_266_ap_done, grp_i_convolution5_fu_282_ap_done, grp_i_fc6_fu_290_ap_done, grp_i_max_pooling4_fu_308_ap_done, grp_st_output_fu_362_ap_done, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state17, ap_block_state3_on_subcall_done, ap_block_state5_on_subcall_done, ap_block_state7_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_i_convolution3_fu_266_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_i_max_pooling4_fu_308_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_i_convolution5_fu_282_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_i_fc6_fu_290_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_st_output_fu_362_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    DATA_BIAS_ARADDR_assign_proc : process(grp_i_fc6_fu_290_m_axi_bias_ARADDR, grp_ld_bias5_fu_346_m_axi_bias5_ARADDR, grp_ld_bias3_fu_354_m_axi_bias3_ARADDR, grp_ld_bias1_fu_370_m_axi_bias1_ARADDR, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARADDR <= grp_ld_bias1_fu_370_m_axi_bias1_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_BIAS_ARADDR <= grp_ld_bias3_fu_354_m_axi_bias3_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_BIAS_ARADDR <= grp_ld_bias5_fu_346_m_axi_bias5_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_BIAS_ARADDR <= grp_i_fc6_fu_290_m_axi_bias_ARADDR;
        else 
            DATA_BIAS_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    DATA_BIAS_ARBURST_assign_proc : process(grp_i_fc6_fu_290_m_axi_bias_ARBURST, grp_ld_bias5_fu_346_m_axi_bias5_ARBURST, grp_ld_bias3_fu_354_m_axi_bias3_ARBURST, grp_ld_bias1_fu_370_m_axi_bias1_ARBURST, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARBURST <= grp_ld_bias1_fu_370_m_axi_bias1_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_BIAS_ARBURST <= grp_ld_bias3_fu_354_m_axi_bias3_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_BIAS_ARBURST <= grp_ld_bias5_fu_346_m_axi_bias5_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_BIAS_ARBURST <= grp_i_fc6_fu_290_m_axi_bias_ARBURST;
        else 
            DATA_BIAS_ARBURST <= "XX";
        end if; 
    end process;


    DATA_BIAS_ARCACHE_assign_proc : process(grp_i_fc6_fu_290_m_axi_bias_ARCACHE, grp_ld_bias5_fu_346_m_axi_bias5_ARCACHE, grp_ld_bias3_fu_354_m_axi_bias3_ARCACHE, grp_ld_bias1_fu_370_m_axi_bias1_ARCACHE, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARCACHE <= grp_ld_bias1_fu_370_m_axi_bias1_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_BIAS_ARCACHE <= grp_ld_bias3_fu_354_m_axi_bias3_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_BIAS_ARCACHE <= grp_ld_bias5_fu_346_m_axi_bias5_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_BIAS_ARCACHE <= grp_i_fc6_fu_290_m_axi_bias_ARCACHE;
        else 
            DATA_BIAS_ARCACHE <= "XXXX";
        end if; 
    end process;


    DATA_BIAS_ARID_assign_proc : process(grp_i_fc6_fu_290_m_axi_bias_ARID, grp_ld_bias5_fu_346_m_axi_bias5_ARID, grp_ld_bias3_fu_354_m_axi_bias3_ARID, grp_ld_bias1_fu_370_m_axi_bias1_ARID, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARID <= grp_ld_bias1_fu_370_m_axi_bias1_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_BIAS_ARID <= grp_ld_bias3_fu_354_m_axi_bias3_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_BIAS_ARID <= grp_ld_bias5_fu_346_m_axi_bias5_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_BIAS_ARID <= grp_i_fc6_fu_290_m_axi_bias_ARID;
        else 
            DATA_BIAS_ARID <= "X";
        end if; 
    end process;


    DATA_BIAS_ARLEN_assign_proc : process(grp_i_fc6_fu_290_m_axi_bias_ARLEN, grp_ld_bias5_fu_346_m_axi_bias5_ARLEN, grp_ld_bias3_fu_354_m_axi_bias3_ARLEN, grp_ld_bias1_fu_370_m_axi_bias1_ARLEN, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARLEN <= grp_ld_bias1_fu_370_m_axi_bias1_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_BIAS_ARLEN <= grp_ld_bias3_fu_354_m_axi_bias3_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_BIAS_ARLEN <= grp_ld_bias5_fu_346_m_axi_bias5_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_BIAS_ARLEN <= grp_i_fc6_fu_290_m_axi_bias_ARLEN;
        else 
            DATA_BIAS_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    DATA_BIAS_ARLOCK_assign_proc : process(grp_i_fc6_fu_290_m_axi_bias_ARLOCK, grp_ld_bias5_fu_346_m_axi_bias5_ARLOCK, grp_ld_bias3_fu_354_m_axi_bias3_ARLOCK, grp_ld_bias1_fu_370_m_axi_bias1_ARLOCK, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARLOCK <= grp_ld_bias1_fu_370_m_axi_bias1_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_BIAS_ARLOCK <= grp_ld_bias3_fu_354_m_axi_bias3_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_BIAS_ARLOCK <= grp_ld_bias5_fu_346_m_axi_bias5_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_BIAS_ARLOCK <= grp_i_fc6_fu_290_m_axi_bias_ARLOCK;
        else 
            DATA_BIAS_ARLOCK <= "XX";
        end if; 
    end process;


    DATA_BIAS_ARPROT_assign_proc : process(grp_i_fc6_fu_290_m_axi_bias_ARPROT, grp_ld_bias5_fu_346_m_axi_bias5_ARPROT, grp_ld_bias3_fu_354_m_axi_bias3_ARPROT, grp_ld_bias1_fu_370_m_axi_bias1_ARPROT, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARPROT <= grp_ld_bias1_fu_370_m_axi_bias1_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_BIAS_ARPROT <= grp_ld_bias3_fu_354_m_axi_bias3_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_BIAS_ARPROT <= grp_ld_bias5_fu_346_m_axi_bias5_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_BIAS_ARPROT <= grp_i_fc6_fu_290_m_axi_bias_ARPROT;
        else 
            DATA_BIAS_ARPROT <= "XXX";
        end if; 
    end process;


    DATA_BIAS_ARQOS_assign_proc : process(grp_i_fc6_fu_290_m_axi_bias_ARQOS, grp_ld_bias5_fu_346_m_axi_bias5_ARQOS, grp_ld_bias3_fu_354_m_axi_bias3_ARQOS, grp_ld_bias1_fu_370_m_axi_bias1_ARQOS, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARQOS <= grp_ld_bias1_fu_370_m_axi_bias1_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_BIAS_ARQOS <= grp_ld_bias3_fu_354_m_axi_bias3_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_BIAS_ARQOS <= grp_ld_bias5_fu_346_m_axi_bias5_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_BIAS_ARQOS <= grp_i_fc6_fu_290_m_axi_bias_ARQOS;
        else 
            DATA_BIAS_ARQOS <= "XXXX";
        end if; 
    end process;


    DATA_BIAS_ARREGION_assign_proc : process(grp_i_fc6_fu_290_m_axi_bias_ARREGION, grp_ld_bias5_fu_346_m_axi_bias5_ARREGION, grp_ld_bias3_fu_354_m_axi_bias3_ARREGION, grp_ld_bias1_fu_370_m_axi_bias1_ARREGION, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARREGION <= grp_ld_bias1_fu_370_m_axi_bias1_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_BIAS_ARREGION <= grp_ld_bias3_fu_354_m_axi_bias3_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_BIAS_ARREGION <= grp_ld_bias5_fu_346_m_axi_bias5_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_BIAS_ARREGION <= grp_i_fc6_fu_290_m_axi_bias_ARREGION;
        else 
            DATA_BIAS_ARREGION <= "XXXX";
        end if; 
    end process;


    DATA_BIAS_ARSIZE_assign_proc : process(grp_i_fc6_fu_290_m_axi_bias_ARSIZE, grp_ld_bias5_fu_346_m_axi_bias5_ARSIZE, grp_ld_bias3_fu_354_m_axi_bias3_ARSIZE, grp_ld_bias1_fu_370_m_axi_bias1_ARSIZE, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARSIZE <= grp_ld_bias1_fu_370_m_axi_bias1_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_BIAS_ARSIZE <= grp_ld_bias3_fu_354_m_axi_bias3_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_BIAS_ARSIZE <= grp_ld_bias5_fu_346_m_axi_bias5_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_BIAS_ARSIZE <= grp_i_fc6_fu_290_m_axi_bias_ARSIZE;
        else 
            DATA_BIAS_ARSIZE <= "XXX";
        end if; 
    end process;


    DATA_BIAS_ARUSER_assign_proc : process(grp_i_fc6_fu_290_m_axi_bias_ARUSER, grp_ld_bias5_fu_346_m_axi_bias5_ARUSER, grp_ld_bias3_fu_354_m_axi_bias3_ARUSER, grp_ld_bias1_fu_370_m_axi_bias1_ARUSER, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARUSER <= grp_ld_bias1_fu_370_m_axi_bias1_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_BIAS_ARUSER <= grp_ld_bias3_fu_354_m_axi_bias3_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_BIAS_ARUSER <= grp_ld_bias5_fu_346_m_axi_bias5_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_BIAS_ARUSER <= grp_i_fc6_fu_290_m_axi_bias_ARUSER;
        else 
            DATA_BIAS_ARUSER <= "X";
        end if; 
    end process;


    DATA_BIAS_ARVALID_assign_proc : process(grp_i_fc6_fu_290_m_axi_bias_ARVALID, grp_ld_bias5_fu_346_m_axi_bias5_ARVALID, grp_ld_bias3_fu_354_m_axi_bias3_ARVALID, grp_ld_bias1_fu_370_m_axi_bias1_ARVALID, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARVALID <= grp_ld_bias1_fu_370_m_axi_bias1_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_BIAS_ARVALID <= grp_ld_bias3_fu_354_m_axi_bias3_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_BIAS_ARVALID <= grp_ld_bias5_fu_346_m_axi_bias5_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_BIAS_ARVALID <= grp_i_fc6_fu_290_m_axi_bias_ARVALID;
        else 
            DATA_BIAS_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_BIAS_RREADY_assign_proc : process(grp_i_fc6_fu_290_m_axi_bias_RREADY, grp_ld_bias5_fu_346_m_axi_bias5_RREADY, grp_ld_bias3_fu_354_m_axi_bias3_RREADY, grp_ld_bias1_fu_370_m_axi_bias1_RREADY, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_RREADY <= grp_ld_bias1_fu_370_m_axi_bias1_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_BIAS_RREADY <= grp_ld_bias3_fu_354_m_axi_bias3_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_BIAS_RREADY <= grp_ld_bias5_fu_346_m_axi_bias5_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_BIAS_RREADY <= grp_i_fc6_fu_290_m_axi_bias_RREADY;
        else 
            DATA_BIAS_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_INPUT_ARVALID_assign_proc : process(grp_ld_input_fu_338_m_axi_input_r_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_INPUT_ARVALID <= grp_ld_input_fu_338_m_axi_input_r_ARVALID;
        else 
            DATA_INPUT_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_INPUT_RREADY_assign_proc : process(grp_ld_input_fu_338_m_axi_input_r_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_INPUT_RREADY <= grp_ld_input_fu_338_m_axi_input_r_RREADY;
        else 
            DATA_INPUT_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_OUTPUT_AWVALID_assign_proc : process(grp_st_output_fu_362_m_axi_output_r_AWVALID, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            DATA_OUTPUT_AWVALID <= grp_st_output_fu_362_m_axi_output_r_AWVALID;
        else 
            DATA_OUTPUT_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_OUTPUT_BREADY_assign_proc : process(grp_st_output_fu_362_m_axi_output_r_BREADY, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            DATA_OUTPUT_BREADY <= grp_st_output_fu_362_m_axi_output_r_BREADY;
        else 
            DATA_OUTPUT_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_OUTPUT_WVALID_assign_proc : process(grp_st_output_fu_362_m_axi_output_r_WVALID, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            DATA_OUTPUT_WVALID <= grp_st_output_fu_362_m_axi_output_r_WVALID;
        else 
            DATA_OUTPUT_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_WEIGHT_ARADDR_assign_proc : process(grp_i_fc6_fu_290_m_axi_weights_ARADDR, grp_ld_weights5_fu_314_m_axi_weights5_ARADDR, grp_ld_weights3_fu_322_m_axi_weights3_ARADDR, grp_ld_weights1_fu_330_m_axi_weights1_ARADDR, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARADDR <= grp_ld_weights1_fu_330_m_axi_weights1_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_WEIGHT_ARADDR <= grp_ld_weights3_fu_322_m_axi_weights3_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_WEIGHT_ARADDR <= grp_ld_weights5_fu_314_m_axi_weights5_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_WEIGHT_ARADDR <= grp_i_fc6_fu_290_m_axi_weights_ARADDR;
        else 
            DATA_WEIGHT_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    DATA_WEIGHT_ARBURST_assign_proc : process(grp_i_fc6_fu_290_m_axi_weights_ARBURST, grp_ld_weights5_fu_314_m_axi_weights5_ARBURST, grp_ld_weights3_fu_322_m_axi_weights3_ARBURST, grp_ld_weights1_fu_330_m_axi_weights1_ARBURST, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARBURST <= grp_ld_weights1_fu_330_m_axi_weights1_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_WEIGHT_ARBURST <= grp_ld_weights3_fu_322_m_axi_weights3_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_WEIGHT_ARBURST <= grp_ld_weights5_fu_314_m_axi_weights5_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_WEIGHT_ARBURST <= grp_i_fc6_fu_290_m_axi_weights_ARBURST;
        else 
            DATA_WEIGHT_ARBURST <= "XX";
        end if; 
    end process;


    DATA_WEIGHT_ARCACHE_assign_proc : process(grp_i_fc6_fu_290_m_axi_weights_ARCACHE, grp_ld_weights5_fu_314_m_axi_weights5_ARCACHE, grp_ld_weights3_fu_322_m_axi_weights3_ARCACHE, grp_ld_weights1_fu_330_m_axi_weights1_ARCACHE, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARCACHE <= grp_ld_weights1_fu_330_m_axi_weights1_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_WEIGHT_ARCACHE <= grp_ld_weights3_fu_322_m_axi_weights3_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_WEIGHT_ARCACHE <= grp_ld_weights5_fu_314_m_axi_weights5_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_WEIGHT_ARCACHE <= grp_i_fc6_fu_290_m_axi_weights_ARCACHE;
        else 
            DATA_WEIGHT_ARCACHE <= "XXXX";
        end if; 
    end process;


    DATA_WEIGHT_ARID_assign_proc : process(grp_i_fc6_fu_290_m_axi_weights_ARID, grp_ld_weights5_fu_314_m_axi_weights5_ARID, grp_ld_weights3_fu_322_m_axi_weights3_ARID, grp_ld_weights1_fu_330_m_axi_weights1_ARID, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARID <= grp_ld_weights1_fu_330_m_axi_weights1_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_WEIGHT_ARID <= grp_ld_weights3_fu_322_m_axi_weights3_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_WEIGHT_ARID <= grp_ld_weights5_fu_314_m_axi_weights5_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_WEIGHT_ARID <= grp_i_fc6_fu_290_m_axi_weights_ARID;
        else 
            DATA_WEIGHT_ARID <= "X";
        end if; 
    end process;


    DATA_WEIGHT_ARLEN_assign_proc : process(grp_i_fc6_fu_290_m_axi_weights_ARLEN, grp_ld_weights5_fu_314_m_axi_weights5_ARLEN, grp_ld_weights3_fu_322_m_axi_weights3_ARLEN, grp_ld_weights1_fu_330_m_axi_weights1_ARLEN, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARLEN <= grp_ld_weights1_fu_330_m_axi_weights1_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_WEIGHT_ARLEN <= grp_ld_weights3_fu_322_m_axi_weights3_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_WEIGHT_ARLEN <= grp_ld_weights5_fu_314_m_axi_weights5_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_WEIGHT_ARLEN <= grp_i_fc6_fu_290_m_axi_weights_ARLEN;
        else 
            DATA_WEIGHT_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    DATA_WEIGHT_ARLOCK_assign_proc : process(grp_i_fc6_fu_290_m_axi_weights_ARLOCK, grp_ld_weights5_fu_314_m_axi_weights5_ARLOCK, grp_ld_weights3_fu_322_m_axi_weights3_ARLOCK, grp_ld_weights1_fu_330_m_axi_weights1_ARLOCK, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARLOCK <= grp_ld_weights1_fu_330_m_axi_weights1_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_WEIGHT_ARLOCK <= grp_ld_weights3_fu_322_m_axi_weights3_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_WEIGHT_ARLOCK <= grp_ld_weights5_fu_314_m_axi_weights5_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_WEIGHT_ARLOCK <= grp_i_fc6_fu_290_m_axi_weights_ARLOCK;
        else 
            DATA_WEIGHT_ARLOCK <= "XX";
        end if; 
    end process;


    DATA_WEIGHT_ARPROT_assign_proc : process(grp_i_fc6_fu_290_m_axi_weights_ARPROT, grp_ld_weights5_fu_314_m_axi_weights5_ARPROT, grp_ld_weights3_fu_322_m_axi_weights3_ARPROT, grp_ld_weights1_fu_330_m_axi_weights1_ARPROT, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARPROT <= grp_ld_weights1_fu_330_m_axi_weights1_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_WEIGHT_ARPROT <= grp_ld_weights3_fu_322_m_axi_weights3_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_WEIGHT_ARPROT <= grp_ld_weights5_fu_314_m_axi_weights5_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_WEIGHT_ARPROT <= grp_i_fc6_fu_290_m_axi_weights_ARPROT;
        else 
            DATA_WEIGHT_ARPROT <= "XXX";
        end if; 
    end process;


    DATA_WEIGHT_ARQOS_assign_proc : process(grp_i_fc6_fu_290_m_axi_weights_ARQOS, grp_ld_weights5_fu_314_m_axi_weights5_ARQOS, grp_ld_weights3_fu_322_m_axi_weights3_ARQOS, grp_ld_weights1_fu_330_m_axi_weights1_ARQOS, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARQOS <= grp_ld_weights1_fu_330_m_axi_weights1_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_WEIGHT_ARQOS <= grp_ld_weights3_fu_322_m_axi_weights3_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_WEIGHT_ARQOS <= grp_ld_weights5_fu_314_m_axi_weights5_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_WEIGHT_ARQOS <= grp_i_fc6_fu_290_m_axi_weights_ARQOS;
        else 
            DATA_WEIGHT_ARQOS <= "XXXX";
        end if; 
    end process;


    DATA_WEIGHT_ARREGION_assign_proc : process(grp_i_fc6_fu_290_m_axi_weights_ARREGION, grp_ld_weights5_fu_314_m_axi_weights5_ARREGION, grp_ld_weights3_fu_322_m_axi_weights3_ARREGION, grp_ld_weights1_fu_330_m_axi_weights1_ARREGION, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARREGION <= grp_ld_weights1_fu_330_m_axi_weights1_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_WEIGHT_ARREGION <= grp_ld_weights3_fu_322_m_axi_weights3_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_WEIGHT_ARREGION <= grp_ld_weights5_fu_314_m_axi_weights5_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_WEIGHT_ARREGION <= grp_i_fc6_fu_290_m_axi_weights_ARREGION;
        else 
            DATA_WEIGHT_ARREGION <= "XXXX";
        end if; 
    end process;


    DATA_WEIGHT_ARSIZE_assign_proc : process(grp_i_fc6_fu_290_m_axi_weights_ARSIZE, grp_ld_weights5_fu_314_m_axi_weights5_ARSIZE, grp_ld_weights3_fu_322_m_axi_weights3_ARSIZE, grp_ld_weights1_fu_330_m_axi_weights1_ARSIZE, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARSIZE <= grp_ld_weights1_fu_330_m_axi_weights1_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_WEIGHT_ARSIZE <= grp_ld_weights3_fu_322_m_axi_weights3_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_WEIGHT_ARSIZE <= grp_ld_weights5_fu_314_m_axi_weights5_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_WEIGHT_ARSIZE <= grp_i_fc6_fu_290_m_axi_weights_ARSIZE;
        else 
            DATA_WEIGHT_ARSIZE <= "XXX";
        end if; 
    end process;


    DATA_WEIGHT_ARUSER_assign_proc : process(grp_i_fc6_fu_290_m_axi_weights_ARUSER, grp_ld_weights5_fu_314_m_axi_weights5_ARUSER, grp_ld_weights3_fu_322_m_axi_weights3_ARUSER, grp_ld_weights1_fu_330_m_axi_weights1_ARUSER, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARUSER <= grp_ld_weights1_fu_330_m_axi_weights1_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_WEIGHT_ARUSER <= grp_ld_weights3_fu_322_m_axi_weights3_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_WEIGHT_ARUSER <= grp_ld_weights5_fu_314_m_axi_weights5_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_WEIGHT_ARUSER <= grp_i_fc6_fu_290_m_axi_weights_ARUSER;
        else 
            DATA_WEIGHT_ARUSER <= "X";
        end if; 
    end process;


    DATA_WEIGHT_ARVALID_assign_proc : process(grp_i_fc6_fu_290_m_axi_weights_ARVALID, grp_ld_weights5_fu_314_m_axi_weights5_ARVALID, grp_ld_weights3_fu_322_m_axi_weights3_ARVALID, grp_ld_weights1_fu_330_m_axi_weights1_ARVALID, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARVALID <= grp_ld_weights1_fu_330_m_axi_weights1_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_WEIGHT_ARVALID <= grp_ld_weights3_fu_322_m_axi_weights3_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_WEIGHT_ARVALID <= grp_ld_weights5_fu_314_m_axi_weights5_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_WEIGHT_ARVALID <= grp_i_fc6_fu_290_m_axi_weights_ARVALID;
        else 
            DATA_WEIGHT_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_WEIGHT_RREADY_assign_proc : process(grp_i_fc6_fu_290_m_axi_weights_RREADY, grp_ld_weights5_fu_314_m_axi_weights5_RREADY, grp_ld_weights3_fu_322_m_axi_weights3_RREADY, grp_ld_weights1_fu_330_m_axi_weights1_RREADY, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_RREADY <= grp_ld_weights1_fu_330_m_axi_weights1_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DATA_WEIGHT_RREADY <= grp_ld_weights3_fu_322_m_axi_weights3_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            DATA_WEIGHT_RREADY <= grp_ld_weights5_fu_314_m_axi_weights5_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_WEIGHT_RREADY <= grp_i_fc6_fu_290_m_axi_weights_RREADY;
        else 
            DATA_WEIGHT_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state3_on_subcall_done_assign_proc : process(grp_ld_weights1_fu_330_ap_done, grp_ld_input_fu_338_ap_done, grp_ld_bias1_fu_370_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((grp_ld_bias1_fu_370_ap_done = ap_const_logic_0) or (grp_ld_input_fu_338_ap_done = ap_const_logic_0) or (grp_ld_weights1_fu_330_ap_done = ap_const_logic_0));
    end process;


    ap_block_state5_on_subcall_done_assign_proc : process(grp_i_convolution1_fu_274_ap_done, grp_ld_weights3_fu_322_ap_done, grp_ld_bias3_fu_354_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((grp_ld_weights3_fu_322_ap_done = ap_const_logic_0) or (grp_i_convolution1_fu_274_ap_done = ap_const_logic_0) or (grp_ld_bias3_fu_354_ap_done = ap_const_logic_0));
    end process;


    ap_block_state7_on_subcall_done_assign_proc : process(grp_i_max_pooling2_fu_302_ap_done, grp_ld_weights5_fu_314_ap_done, grp_ld_bias5_fu_346_ap_done)
    begin
                ap_block_state7_on_subcall_done <= ((grp_ld_weights5_fu_314_ap_done = ap_const_logic_0) or (grp_i_max_pooling2_fu_302_ap_done = ap_const_logic_0) or (grp_ld_bias5_fu_346_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(grp_st_output_fu_362_ap_done, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_st_output_fu_362_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_st_output_fu_362_ap_done, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_st_output_fu_362_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    bias1_buf_address0_assign_proc : process(grp_i_convolution1_fu_274_bias_address0, grp_ld_bias1_fu_370_bias1_buf_address0, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias1_buf_address0 <= grp_ld_bias1_fu_370_bias1_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias1_buf_address0 <= grp_i_convolution1_fu_274_bias_address0;
        else 
            bias1_buf_address0 <= "XXX";
        end if; 
    end process;


    bias1_buf_ce0_assign_proc : process(grp_i_convolution1_fu_274_bias_ce0, grp_ld_bias1_fu_370_bias1_buf_ce0, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias1_buf_ce0 <= grp_ld_bias1_fu_370_bias1_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias1_buf_ce0 <= grp_i_convolution1_fu_274_bias_ce0;
        else 
            bias1_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias1_buf_we0_assign_proc : process(grp_ld_bias1_fu_370_bias1_buf_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias1_buf_we0 <= grp_ld_bias1_fu_370_bias1_buf_we0;
        else 
            bias1_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias3_buf_address0_assign_proc : process(grp_i_convolution3_fu_266_bias_address0, grp_ld_bias3_fu_354_bias3_buf_address0, ap_CS_fsm_state9, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias3_buf_address0 <= grp_ld_bias3_fu_354_bias3_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bias3_buf_address0 <= grp_i_convolution3_fu_266_bias_address0;
        else 
            bias3_buf_address0 <= "XXXX";
        end if; 
    end process;


    bias3_buf_ce0_assign_proc : process(grp_i_convolution3_fu_266_bias_ce0, grp_ld_bias3_fu_354_bias3_buf_ce0, ap_CS_fsm_state9, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias3_buf_ce0 <= grp_ld_bias3_fu_354_bias3_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bias3_buf_ce0 <= grp_i_convolution3_fu_266_bias_ce0;
        else 
            bias3_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias3_buf_we0_assign_proc : process(grp_ld_bias3_fu_354_bias3_buf_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias3_buf_we0 <= grp_ld_bias3_fu_354_bias3_buf_we0;
        else 
            bias3_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias5_buf_address0_assign_proc : process(grp_i_convolution5_fu_282_bias_address0, grp_ld_bias5_fu_346_bias5_buf_address0, ap_CS_fsm_state13, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            bias5_buf_address0 <= grp_ld_bias5_fu_346_bias5_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            bias5_buf_address0 <= grp_i_convolution5_fu_282_bias_address0;
        else 
            bias5_buf_address0 <= "XXXXXXX";
        end if; 
    end process;


    bias5_buf_ce0_assign_proc : process(grp_i_convolution5_fu_282_bias_ce0, grp_ld_bias5_fu_346_bias5_buf_ce0, ap_CS_fsm_state13, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            bias5_buf_ce0 <= grp_ld_bias5_fu_346_bias5_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            bias5_buf_ce0 <= grp_i_convolution5_fu_282_bias_ce0;
        else 
            bias5_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias5_buf_we0_assign_proc : process(grp_ld_bias5_fu_346_bias5_buf_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            bias5_buf_we0 <= grp_ld_bias5_fu_346_bias5_buf_we0;
        else 
            bias5_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_i_convolution1_fu_274_ap_start <= grp_i_convolution1_fu_274_ap_start_reg;
    grp_i_convolution3_fu_266_ap_start <= grp_i_convolution3_fu_266_ap_start_reg;
    grp_i_convolution5_fu_282_ap_start <= grp_i_convolution5_fu_282_ap_start_reg;
    grp_i_fc6_fu_290_ap_start <= grp_i_fc6_fu_290_ap_start_reg;
    grp_i_max_pooling2_fu_302_ap_start <= grp_i_max_pooling2_fu_302_ap_start_reg;
    grp_i_max_pooling4_fu_308_ap_start <= grp_i_max_pooling4_fu_308_ap_start_reg;
    grp_ld_bias1_fu_370_ap_start <= grp_ld_bias1_fu_370_ap_start_reg;
    grp_ld_bias3_fu_354_ap_start <= grp_ld_bias3_fu_354_ap_start_reg;
    grp_ld_bias5_fu_346_ap_start <= grp_ld_bias5_fu_346_ap_start_reg;
    grp_ld_input_fu_338_ap_start <= grp_ld_input_fu_338_ap_start_reg;
    grp_ld_weights1_fu_330_ap_start <= grp_ld_weights1_fu_330_ap_start_reg;
    grp_ld_weights3_fu_322_ap_start <= grp_ld_weights3_fu_322_ap_start_reg;
    grp_ld_weights5_fu_314_ap_start <= grp_ld_weights5_fu_314_ap_start_reg;
    grp_st_output_fu_362_ap_start <= grp_st_output_fu_362_ap_start_reg;

    input2_inter_address0_assign_proc : process(grp_i_convolution1_fu_274_output_r_address0, grp_i_max_pooling2_fu_302_input_r_address0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input2_inter_address0 <= grp_i_max_pooling2_fu_302_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input2_inter_address0 <= grp_i_convolution1_fu_274_output_r_address0;
        else 
            input2_inter_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    input2_inter_ce0_assign_proc : process(grp_i_convolution1_fu_274_output_r_ce0, grp_i_max_pooling2_fu_302_input_r_ce0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input2_inter_ce0 <= grp_i_max_pooling2_fu_302_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input2_inter_ce0 <= grp_i_convolution1_fu_274_output_r_ce0;
        else 
            input2_inter_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input2_inter_we0_assign_proc : process(grp_i_convolution1_fu_274_output_r_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input2_inter_we0 <= grp_i_convolution1_fu_274_output_r_we0;
        else 
            input2_inter_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input3_inter_address0_assign_proc : process(grp_i_convolution3_fu_266_input_r_address0, grp_i_max_pooling2_fu_302_output_r_address0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input3_inter_address0 <= grp_i_max_pooling2_fu_302_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input3_inter_address0 <= grp_i_convolution3_fu_266_input_r_address0;
        else 
            input3_inter_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    input3_inter_ce0_assign_proc : process(grp_i_convolution3_fu_266_input_r_ce0, grp_i_max_pooling2_fu_302_output_r_ce0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input3_inter_ce0 <= grp_i_max_pooling2_fu_302_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input3_inter_ce0 <= grp_i_convolution3_fu_266_input_r_ce0;
        else 
            input3_inter_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input3_inter_ce1_assign_proc : process(grp_i_convolution3_fu_266_input_r_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input3_inter_ce1 <= grp_i_convolution3_fu_266_input_r_ce1;
        else 
            input3_inter_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input3_inter_we0_assign_proc : process(grp_i_max_pooling2_fu_302_output_r_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input3_inter_we0 <= grp_i_max_pooling2_fu_302_output_r_we0;
        else 
            input3_inter_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input4_inter_address0_assign_proc : process(grp_i_convolution3_fu_266_output_r_address0, grp_i_max_pooling4_fu_308_input_r_address0, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input4_inter_address0 <= grp_i_max_pooling4_fu_308_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input4_inter_address0 <= grp_i_convolution3_fu_266_output_r_address0;
        else 
            input4_inter_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    input4_inter_ce0_assign_proc : process(grp_i_convolution3_fu_266_output_r_ce0, grp_i_max_pooling4_fu_308_input_r_ce0, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input4_inter_ce0 <= grp_i_max_pooling4_fu_308_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input4_inter_ce0 <= grp_i_convolution3_fu_266_output_r_ce0;
        else 
            input4_inter_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input4_inter_we0_assign_proc : process(grp_i_convolution3_fu_266_output_r_we0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input4_inter_we0 <= grp_i_convolution3_fu_266_output_r_we0;
        else 
            input4_inter_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input5_inter_address0_assign_proc : process(grp_i_convolution5_fu_282_input_r_address0, grp_i_max_pooling4_fu_308_output_r_address0, ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input5_inter_address0 <= grp_i_max_pooling4_fu_308_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input5_inter_address0 <= grp_i_convolution5_fu_282_input_r_address0;
        else 
            input5_inter_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    input5_inter_ce0_assign_proc : process(grp_i_convolution5_fu_282_input_r_ce0, grp_i_max_pooling4_fu_308_output_r_ce0, ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input5_inter_ce0 <= grp_i_max_pooling4_fu_308_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input5_inter_ce0 <= grp_i_convolution5_fu_282_input_r_ce0;
        else 
            input5_inter_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input5_inter_we0_assign_proc : process(grp_i_max_pooling4_fu_308_output_r_we0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input5_inter_we0 <= grp_i_max_pooling4_fu_308_output_r_we0;
        else 
            input5_inter_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input6_inter_0_0_address0_assign_proc : process(grp_i_convolution5_fu_282_output_0_0_address0, grp_i_fc6_fu_290_input_0_0_address0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input6_inter_0_0_address0 <= grp_i_fc6_fu_290_input_0_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input6_inter_0_0_address0 <= grp_i_convolution5_fu_282_output_0_0_address0;
        else 
            input6_inter_0_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    input6_inter_0_0_ce0_assign_proc : process(grp_i_convolution5_fu_282_output_0_0_ce0, grp_i_fc6_fu_290_input_0_0_ce0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input6_inter_0_0_ce0 <= grp_i_fc6_fu_290_input_0_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input6_inter_0_0_ce0 <= grp_i_convolution5_fu_282_output_0_0_ce0;
        else 
            input6_inter_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input6_inter_0_0_we0_assign_proc : process(grp_i_convolution5_fu_282_output_0_0_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input6_inter_0_0_we0 <= grp_i_convolution5_fu_282_output_0_0_we0;
        else 
            input6_inter_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_buf_0_address0_assign_proc : process(grp_i_convolution1_fu_274_input_0_address0, grp_ld_input_fu_338_input_buf_0_address0, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_buf_0_address0 <= grp_ld_input_fu_338_input_buf_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_buf_0_address0 <= grp_i_convolution1_fu_274_input_0_address0;
        else 
            input_buf_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_buf_0_ce0_assign_proc : process(grp_i_convolution1_fu_274_input_0_ce0, grp_ld_input_fu_338_input_buf_0_ce0, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_buf_0_ce0 <= grp_ld_input_fu_338_input_buf_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_buf_0_ce0 <= grp_i_convolution1_fu_274_input_0_ce0;
        else 
            input_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_buf_0_ce1_assign_proc : process(grp_i_convolution1_fu_274_input_0_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_buf_0_ce1 <= grp_i_convolution1_fu_274_input_0_ce1;
        else 
            input_buf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_buf_0_we0_assign_proc : process(grp_ld_input_fu_338_input_buf_0_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_buf_0_we0 <= grp_ld_input_fu_338_input_buf_0_we0;
        else 
            input_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_buf_address0_assign_proc : process(grp_i_fc6_fu_290_output_r_address0, grp_st_output_fu_362_output_buf_address0, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_buf_address0 <= grp_st_output_fu_362_output_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_buf_address0 <= grp_i_fc6_fu_290_output_r_address0;
        else 
            output_buf_address0 <= "XXXX";
        end if; 
    end process;


    output_buf_ce0_assign_proc : process(grp_i_fc6_fu_290_output_r_ce0, grp_st_output_fu_362_output_buf_ce0, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_buf_ce0 <= grp_st_output_fu_362_output_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_buf_ce0 <= grp_i_fc6_fu_290_output_r_ce0;
        else 
            output_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_buf_we0_assign_proc : process(grp_i_fc6_fu_290_output_r_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_buf_we0 <= grp_i_fc6_fu_290_output_r_we0;
        else 
            output_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights1_buf_0_address0_assign_proc : process(grp_i_convolution1_fu_274_weights_0_address0, grp_ld_weights1_fu_330_weights1_buf_0_address0, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights1_buf_0_address0 <= grp_ld_weights1_fu_330_weights1_buf_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights1_buf_0_address0 <= grp_i_convolution1_fu_274_weights_0_address0;
        else 
            weights1_buf_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    weights1_buf_0_ce0_assign_proc : process(grp_i_convolution1_fu_274_weights_0_ce0, grp_ld_weights1_fu_330_weights1_buf_0_ce0, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights1_buf_0_ce0 <= grp_ld_weights1_fu_330_weights1_buf_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights1_buf_0_ce0 <= grp_i_convolution1_fu_274_weights_0_ce0;
        else 
            weights1_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights1_buf_0_ce1_assign_proc : process(grp_i_convolution1_fu_274_weights_0_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights1_buf_0_ce1 <= grp_i_convolution1_fu_274_weights_0_ce1;
        else 
            weights1_buf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    weights1_buf_0_we0_assign_proc : process(grp_ld_weights1_fu_330_weights1_buf_0_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights1_buf_0_we0 <= grp_ld_weights1_fu_330_weights1_buf_0_we0;
        else 
            weights1_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights3_buf_address0_assign_proc : process(grp_i_convolution3_fu_266_weights_address0, grp_ld_weights3_fu_322_weights3_buf_address0, ap_CS_fsm_state9, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights3_buf_address0 <= grp_ld_weights3_fu_322_weights3_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            weights3_buf_address0 <= grp_i_convolution3_fu_266_weights_address0;
        else 
            weights3_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights3_buf_ce0_assign_proc : process(grp_i_convolution3_fu_266_weights_ce0, grp_ld_weights3_fu_322_weights3_buf_ce0, ap_CS_fsm_state9, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights3_buf_ce0 <= grp_ld_weights3_fu_322_weights3_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            weights3_buf_ce0 <= grp_i_convolution3_fu_266_weights_ce0;
        else 
            weights3_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights3_buf_ce1_assign_proc : process(grp_i_convolution3_fu_266_weights_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            weights3_buf_ce1 <= grp_i_convolution3_fu_266_weights_ce1;
        else 
            weights3_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    weights3_buf_we0_assign_proc : process(grp_ld_weights3_fu_322_weights3_buf_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights3_buf_we0 <= grp_ld_weights3_fu_322_weights3_buf_we0;
        else 
            weights3_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights5_buf_address0_assign_proc : process(grp_i_convolution5_fu_282_weights_address0, grp_ld_weights5_fu_314_weights5_buf_address0, ap_CS_fsm_state13, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weights5_buf_address0 <= grp_ld_weights5_fu_314_weights5_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weights5_buf_address0 <= grp_i_convolution5_fu_282_weights_address0;
        else 
            weights5_buf_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    weights5_buf_ce0_assign_proc : process(grp_i_convolution5_fu_282_weights_ce0, grp_ld_weights5_fu_314_weights5_buf_ce0, ap_CS_fsm_state13, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weights5_buf_ce0 <= grp_ld_weights5_fu_314_weights5_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weights5_buf_ce0 <= grp_i_convolution5_fu_282_weights_ce0;
        else 
            weights5_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights5_buf_we0_assign_proc : process(grp_ld_weights5_fu_314_weights5_buf_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weights5_buf_we0 <= grp_ld_weights5_fu_314_weights5_buf_we0;
        else 
            weights5_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
