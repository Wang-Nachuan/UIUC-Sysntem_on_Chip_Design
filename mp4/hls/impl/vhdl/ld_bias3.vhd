-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ld_bias3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_bias3_AWVALID : OUT STD_LOGIC;
    m_axi_bias3_AWREADY : IN STD_LOGIC;
    m_axi_bias3_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bias3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bias3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias3_WVALID : OUT STD_LOGIC;
    m_axi_bias3_WREADY : IN STD_LOGIC;
    m_axi_bias3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias3_WLAST : OUT STD_LOGIC;
    m_axi_bias3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias3_ARVALID : OUT STD_LOGIC;
    m_axi_bias3_ARREADY : IN STD_LOGIC;
    m_axi_bias3_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bias3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bias3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias3_RVALID : IN STD_LOGIC;
    m_axi_bias3_RREADY : OUT STD_LOGIC;
    m_axi_bias3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias3_RLAST : IN STD_LOGIC;
    m_axi_bias3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias3_BVALID : IN STD_LOGIC;
    m_axi_bias3_BREADY : OUT STD_LOGIC;
    m_axi_bias3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    bias3_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    bias3_buf_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias3_buf_ce0 : OUT STD_LOGIC;
    bias3_buf_we0 : OUT STD_LOGIC;
    bias3_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ld_bias3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bias3_blk_n_AR : STD_LOGIC;
    signal bias3_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln181_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_98_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_118 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal bias3_addr_read_reg_123 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_69 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln182_fu_104_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln182_1_fu_81_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_69 <= i_reg_118;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_69 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln181_fu_92_p2 = ap_const_lv1_0) and (m_axi_bias3_RVALID = ap_const_logic_0))) and (icmp_ln181_fu_92_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                bias3_addr_read_reg_123 <= m_axi_bias3_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln181_fu_92_p2 = ap_const_lv1_0) and (m_axi_bias3_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                i_reg_118 <= i_fu_98_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_bias3_ARREADY, m_axi_bias3_RVALID, ap_CS_fsm_state8, icmp_ln181_fu_92_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_bias3_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not(((icmp_ln181_fu_92_p2 = ap_const_lv1_0) and (m_axi_bias3_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln181_fu_92_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln181_fu_92_p2 = ap_const_lv1_0) and (m_axi_bias3_RVALID = ap_const_logic_0))) and (icmp_ln181_fu_92_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state8_assign_proc : process(m_axi_bias3_RVALID, icmp_ln181_fu_92_p2)
    begin
                ap_block_state8 <= ((icmp_ln181_fu_92_p2 = ap_const_lv1_0) and (m_axi_bias3_RVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_bias3_RVALID, ap_CS_fsm_state8, icmp_ln181_fu_92_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((icmp_ln181_fu_92_p2 = ap_const_lv1_0) and (m_axi_bias3_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln181_fu_92_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_bias3_RVALID, ap_CS_fsm_state8, icmp_ln181_fu_92_p2)
    begin
        if ((not(((icmp_ln181_fu_92_p2 = ap_const_lv1_0) and (m_axi_bias3_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln181_fu_92_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bias3_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_bias3_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            bias3_blk_n_AR <= m_axi_bias3_ARREADY;
        else 
            bias3_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    bias3_blk_n_R_assign_proc : process(m_axi_bias3_RVALID, ap_CS_fsm_state8, icmp_ln181_fu_92_p2)
    begin
        if (((icmp_ln181_fu_92_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            bias3_blk_n_R <= m_axi_bias3_RVALID;
        else 
            bias3_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    bias3_buf_address0 <= zext_ln182_fu_104_p1(4 - 1 downto 0);

    bias3_buf_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bias3_buf_ce0 <= ap_const_logic_1;
        else 
            bias3_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias3_buf_d0 <= bias3_addr_read_reg_123;

    bias3_buf_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bias3_buf_we0 <= ap_const_logic_1;
        else 
            bias3_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_98_p2 <= std_logic_vector(unsigned(i_0_reg_69) + unsigned(ap_const_lv5_1));
    icmp_ln181_fu_92_p2 <= "1" when (i_0_reg_69 = ap_const_lv5_10) else "0";
    m_axi_bias3_ARADDR <= zext_ln182_1_fu_81_p1(32 - 1 downto 0);
    m_axi_bias3_ARBURST <= ap_const_lv2_0;
    m_axi_bias3_ARCACHE <= ap_const_lv4_0;
    m_axi_bias3_ARID <= ap_const_lv1_0;
    m_axi_bias3_ARLEN <= ap_const_lv32_10;
    m_axi_bias3_ARLOCK <= ap_const_lv2_0;
    m_axi_bias3_ARPROT <= ap_const_lv3_0;
    m_axi_bias3_ARQOS <= ap_const_lv4_0;
    m_axi_bias3_ARREGION <= ap_const_lv4_0;
    m_axi_bias3_ARSIZE <= ap_const_lv3_0;
    m_axi_bias3_ARUSER <= ap_const_lv1_0;

    m_axi_bias3_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_bias3_ARREADY)
    begin
        if ((not(((m_axi_bias3_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_bias3_ARVALID <= ap_const_logic_1;
        else 
            m_axi_bias3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bias3_AWADDR <= ap_const_lv32_0;
    m_axi_bias3_AWBURST <= ap_const_lv2_0;
    m_axi_bias3_AWCACHE <= ap_const_lv4_0;
    m_axi_bias3_AWID <= ap_const_lv1_0;
    m_axi_bias3_AWLEN <= ap_const_lv32_0;
    m_axi_bias3_AWLOCK <= ap_const_lv2_0;
    m_axi_bias3_AWPROT <= ap_const_lv3_0;
    m_axi_bias3_AWQOS <= ap_const_lv4_0;
    m_axi_bias3_AWREGION <= ap_const_lv4_0;
    m_axi_bias3_AWSIZE <= ap_const_lv3_0;
    m_axi_bias3_AWUSER <= ap_const_lv1_0;
    m_axi_bias3_AWVALID <= ap_const_logic_0;
    m_axi_bias3_BREADY <= ap_const_logic_0;

    m_axi_bias3_RREADY_assign_proc : process(m_axi_bias3_RVALID, ap_CS_fsm_state8, icmp_ln181_fu_92_p2)
    begin
        if ((not(((icmp_ln181_fu_92_p2 = ap_const_lv1_0) and (m_axi_bias3_RVALID = ap_const_logic_0))) and (icmp_ln181_fu_92_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_bias3_RREADY <= ap_const_logic_1;
        else 
            m_axi_bias3_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bias3_WDATA <= ap_const_lv32_0;
    m_axi_bias3_WID <= ap_const_lv1_0;
    m_axi_bias3_WLAST <= ap_const_logic_0;
    m_axi_bias3_WSTRB <= ap_const_lv4_0;
    m_axi_bias3_WUSER <= ap_const_lv1_0;
    m_axi_bias3_WVALID <= ap_const_logic_0;
    zext_ln182_1_fu_81_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bias3_offset),64));
    zext_ln182_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_69),64));
end behav;
