-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity i_max_pooling2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of i_max_pooling2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D368D4A5 : STD_LOGIC_VECTOR (31 downto 0) := "11010011011010001101010010100101";
    constant ap_const_lv11_498 : STD_LOGIC_VECTOR (10 downto 0) := "10010011000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_181 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_reg_192 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_value_1_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_215 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln33_fu_239_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln33_reg_747 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln34_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_752 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_1_fu_264_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln42_1_reg_762 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln42_fu_301_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln42_reg_767 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln34_fu_382_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln34_reg_772 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln34_1_fu_398_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln34_1_reg_778 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln34_2_fu_406_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln34_2_reg_783 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln45_1_fu_448_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln45_1_reg_788 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln42_1_fu_454_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln42_1_reg_793 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln39_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_reg_798 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln39_reg_798_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln39_1_fu_468_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln39_1_reg_802 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln39_fu_486_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln39_reg_807 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln39_1_fu_494_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln39_1_reg_812 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln42_fu_515_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln42_reg_817 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln42_fu_520_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln42_reg_822 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln42_1_fu_528_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln42_1_reg_827 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal j_fu_571_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_837 : STD_LOGIC_VECTOR (1 downto 0);
    signal input_load_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln42_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_849 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_1_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_1_reg_854 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_value_fu_657_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal add_ln45_1_fu_667_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln45_1_reg_864 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal w_fu_672_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_869 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln34_3_fu_683_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_3_reg_874 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_879 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten24_reg_122 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal c_0_reg_133 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten6_reg_145 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_0_reg_157 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_0_reg_169 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_185_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_0_phi_fu_196_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_max_value_1_phi_fu_207_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_j_0_phi_fu_219_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln42_4_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln45_3_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_226_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_251_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_271_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_283_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln42_fu_279_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln42_1_fu_291_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln42_fu_295_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_305_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_317_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln45_fu_313_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_1_fu_325_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln45_fu_329_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_339_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln35_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln42_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_fu_257_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln42_2_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_fu_371_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln42_mid1_fu_390_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln42_2_fu_347_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln45_fu_335_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln34_fu_414_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln45_fu_418_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln45_fu_424_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_436_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_428_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln45_1_fu_444_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln40_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_474_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln39_fu_502_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_fu_506_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln42_2_fu_511_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln40_fu_524_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_540_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_533_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln42_1_fu_547_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln42_1_fu_551_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln42_3_fu_557_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln42_2_fu_560_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln42_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_580_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln42_1_fu_590_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln42_1_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_609_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln42_2_fu_619_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln42_3_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_2_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_1_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_1_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln45_2_fu_664_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln34_1_fu_677_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln44_fu_690_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_694_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln44_fu_704_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln44_1_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component lenet_top_fcmp_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    lenet_top_fcmp_32dEe_U38 : component lenet_top_fcmp_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_226_p0,
        din1 => grp_fu_226_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_226_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                c_0_reg_133 <= select_ln42_1_reg_762;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_133 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    h_0_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                h_0_reg_157 <= select_ln34_2_reg_783;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_0_reg_157 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln39_reg_798 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_192 <= select_ln39_1_reg_812;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_192 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten24_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_flatten24_reg_122 <= add_ln33_reg_747;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten24_reg_122 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_flatten6_reg_145 <= select_ln34_3_reg_874;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten6_reg_145 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln39_reg_798 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_181 <= add_ln39_1_reg_802;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_181 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln39_reg_798 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_0_reg_215 <= j_reg_837;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_reg_215 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    max_value_1_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_reg_798_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                max_value_1_reg_203 <= max_value_fu_657_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                max_value_1_reg_203 <= ap_const_lv32_D368D4A5;
            end if; 
        end if;
    end process;

    w_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                w_0_reg_169 <= w_reg_869;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_0_reg_169 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln33_reg_747 <= add_ln33_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln39_1_reg_802 <= add_ln39_1_fu_468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln39_fu_462_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln42_1_reg_827 <= add_ln42_1_fu_528_p2;
                add_ln42_reg_817 <= add_ln42_fu_515_p2;
                select_ln39_reg_807 <= select_ln39_fu_486_p3;
                trunc_ln42_reg_822 <= trunc_ln42_fu_520_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln45_1_reg_864 <= add_ln45_1_fu_667_p2;
                select_ln34_3_reg_874 <= select_ln34_3_fu_683_p3;
                w_reg_869 <= w_fu_672_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln34_reg_752 <= icmp_ln34_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln39_reg_798 <= icmp_ln39_fu_462_p2;
                icmp_ln39_reg_798_pp0_iter1_reg <= icmp_ln39_reg_798;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln39_reg_798 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln42_1_reg_854 <= icmp_ln42_1_fu_600_p2;
                icmp_ln42_reg_849 <= icmp_ln42_fu_594_p2;
                input_load_reg_842 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_reg_798 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                j_reg_837 <= j_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    select_ln34_1_reg_778(4 downto 1) <= select_ln34_1_fu_398_p3(4 downto 1);
                select_ln34_2_reg_783 <= select_ln34_2_fu_406_p3;
                select_ln34_reg_772 <= select_ln34_fu_382_p3;
                select_ln42_1_reg_762 <= select_ln42_1_fu_264_p3;
                    sext_ln42_reg_767(9 downto 2) <= sext_ln42_fu_301_p1(9 downto 2);
                    shl_ln42_1_reg_793(4 downto 1) <= shl_ln42_1_fu_454_p3(4 downto 1);
                    sub_ln45_1_reg_788(11 downto 1) <= sub_ln45_1_fu_448_p2(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln39_fu_462_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln39_1_reg_812 <= select_ln39_1_fu_494_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_6_reg_879 <= grp_fu_226_p2;
            end if;
        end if;
    end process;
    sext_ln42_reg_767(1 downto 0) <= "00";
    select_ln34_1_reg_778(0) <= '0';
    sub_ln45_1_reg_788(0) <= '0';
    shl_ln42_1_reg_793(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln33_fu_233_p2, icmp_ln39_fu_462_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln33_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln39_fu_462_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln39_fu_462_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln33_fu_239_p2 <= std_logic_vector(unsigned(indvar_flatten24_reg_122) + unsigned(ap_const_lv11_1));
    add_ln34_1_fu_677_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(indvar_flatten6_reg_145));
    add_ln39_1_fu_468_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_185_p4) + unsigned(ap_const_lv3_1));
    add_ln39_fu_506_p2 <= std_logic_vector(unsigned(zext_ln39_fu_502_p1) + unsigned(select_ln34_1_reg_778));
    add_ln42_1_fu_528_p2 <= std_logic_vector(unsigned(zext_ln40_fu_524_p1) + unsigned(shl_ln42_1_reg_793));
    add_ln42_2_fu_560_p2 <= std_logic_vector(unsigned(sub_ln42_1_fu_551_p2) + unsigned(zext_ln42_3_fu_557_p1));
    add_ln42_fu_515_p2 <= std_logic_vector(signed(sext_ln42_reg_767) + signed(zext_ln42_2_fu_511_p1));
    add_ln45_1_fu_667_p2 <= std_logic_vector(unsigned(sub_ln45_1_reg_788) + unsigned(zext_ln45_2_fu_664_p1));
    add_ln45_fu_418_p2 <= std_logic_vector(signed(sext_ln45_fu_335_p1) + signed(zext_ln34_fu_414_p1));
    and_ln42_1_fu_651_p2 <= (grp_fu_226_p2 and and_ln42_fu_645_p2);
    and_ln42_2_fu_365_p2 <= (xor_ln42_fu_354_p2 and icmp_ln35_fu_359_p2);
    and_ln42_fu_645_p2 <= (or_ln42_fu_623_p2 and or_ln42_1_fu_639_p2);
    and_ln44_fu_726_p2 <= (tmp_6_reg_879 and or_ln44_fu_720_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln39_fu_462_p2)
    begin
        if ((icmp_ln39_fu_462_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln33_fu_233_p2)
    begin
        if ((((icmp_ln33_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_196_p4_assign_proc : process(i_0_reg_192, icmp_ln39_reg_798, ap_CS_fsm_pp0_stage0, select_ln39_1_reg_812, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln39_reg_798 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_phi_fu_196_p4 <= select_ln39_1_reg_812;
        else 
            ap_phi_mux_i_0_phi_fu_196_p4 <= i_0_reg_192;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_185_p4_assign_proc : process(indvar_flatten_reg_181, icmp_ln39_reg_798, ap_CS_fsm_pp0_stage0, add_ln39_1_reg_802, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln39_reg_798 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_185_p4 <= add_ln39_1_reg_802;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_185_p4 <= indvar_flatten_reg_181;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_219_p4_assign_proc : process(j_0_reg_215, icmp_ln39_reg_798, ap_CS_fsm_pp0_stage0, j_reg_837, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln39_reg_798 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_0_phi_fu_219_p4 <= j_reg_837;
        else 
            ap_phi_mux_j_0_phi_fu_219_p4 <= j_0_reg_215;
        end if; 
    end process;

    ap_phi_mux_max_value_1_phi_fu_207_p4 <= max_value_1_reg_203;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln33_fu_233_p2)
    begin
        if (((icmp_ln33_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln42_1_fu_606_p1 <= input_load_reg_842;
    bitcast_ln42_fu_576_p1 <= max_value_1_reg_203;
    bitcast_ln44_fu_690_p1 <= max_value_1_reg_203;
    c_fu_251_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(c_0_reg_133));

    grp_fu_226_p0_assign_proc : process(max_value_1_reg_203, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, ap_block_pp0_stage0, ap_phi_mux_max_value_1_phi_fu_207_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_226_p0 <= max_value_1_reg_203;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_226_p0 <= ap_phi_mux_max_value_1_phi_fu_207_p4;
        else 
            grp_fu_226_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_226_p1_assign_proc : process(input_r_q0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_226_p1 <= ap_const_lv32_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_226_p1 <= input_r_q0;
        else 
            grp_fu_226_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_fu_371_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln42_fu_257_p3));
    i_fu_474_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_i_0_phi_fu_196_p4));
    icmp_ln33_fu_233_p2 <= "1" when (indvar_flatten24_reg_122 = ap_const_lv11_498) else "0";
    icmp_ln34_fu_245_p2 <= "1" when (indvar_flatten6_reg_145 = ap_const_lv8_C4) else "0";
    icmp_ln35_fu_359_p2 <= "1" when (w_0_reg_169 = ap_const_lv4_E) else "0";
    icmp_ln39_fu_462_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_185_p4 = ap_const_lv3_4) else "0";
    icmp_ln40_fu_480_p2 <= "1" when (ap_phi_mux_j_0_phi_fu_219_p4 = ap_const_lv2_2) else "0";
    icmp_ln42_1_fu_600_p2 <= "1" when (trunc_ln42_1_fu_590_p1 = ap_const_lv23_0) else "0";
    icmp_ln42_2_fu_627_p2 <= "0" when (tmp_8_fu_609_p4 = ap_const_lv8_FF) else "1";
    icmp_ln42_3_fu_633_p2 <= "1" when (trunc_ln42_2_fu_619_p1 = ap_const_lv23_0) else "0";
    icmp_ln42_fu_594_p2 <= "0" when (tmp_7_fu_580_p4 = ap_const_lv8_FF) else "1";
    icmp_ln44_1_fu_714_p2 <= "1" when (trunc_ln44_fu_704_p1 = ap_const_lv23_0) else "0";
    icmp_ln44_fu_708_p2 <= "0" when (tmp_fu_694_p4 = ap_const_lv8_FF) else "1";
    input_r_address0 <= zext_ln42_4_fu_566_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_571_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln39_reg_807));
    max_value_fu_657_p3 <= 
        max_value_1_reg_203 when (and_ln42_1_fu_651_p2(0) = '1') else 
        input_load_reg_842;
    or_ln34_fu_377_p2 <= (icmp_ln34_reg_752 or and_ln42_2_fu_365_p2);
    or_ln42_1_fu_639_p2 <= (icmp_ln42_3_fu_633_p2 or icmp_ln42_2_fu_627_p2);
    or_ln42_fu_623_p2 <= (icmp_ln42_reg_849 or icmp_ln42_1_reg_854);
    or_ln44_fu_720_p2 <= (icmp_ln44_fu_708_p2 or icmp_ln44_1_fu_714_p2);
    output_r_address0 <= zext_ln45_3_fu_731_p1(11 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        max_value_1_reg_203 when (and_ln44_fu_726_p2(0) = '1') else 
        ap_const_lv32_0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl3_cast_fu_533_p3 <= (trunc_ln42_reg_822 & ap_const_lv5_0);
    p_shl_cast_fu_428_p3 <= (trunc_ln45_fu_424_p1 & ap_const_lv4_0);
    select_ln34_1_fu_398_p3 <= 
        shl_ln42_mid1_fu_390_p3 when (and_ln42_2_fu_365_p2(0) = '1') else 
        select_ln42_2_fu_347_p3;
    select_ln34_2_fu_406_p3 <= 
        h_fu_371_p2 when (and_ln42_2_fu_365_p2(0) = '1') else 
        select_ln42_fu_257_p3;
    select_ln34_3_fu_683_p3 <= 
        ap_const_lv8_1 when (icmp_ln34_reg_752(0) = '1') else 
        add_ln34_1_fu_677_p2;
    select_ln34_fu_382_p3 <= 
        ap_const_lv4_0 when (or_ln34_fu_377_p2(0) = '1') else 
        w_0_reg_169;
    select_ln39_1_fu_494_p3 <= 
        i_fu_474_p2 when (icmp_ln40_fu_480_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_196_p4;
    select_ln39_fu_486_p3 <= 
        ap_const_lv2_0 when (icmp_ln40_fu_480_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_219_p4;
    select_ln42_1_fu_264_p3 <= 
        c_fu_251_p2 when (icmp_ln34_reg_752(0) = '1') else 
        c_0_reg_133;
    select_ln42_2_fu_347_p3 <= 
        ap_const_lv5_0 when (icmp_ln34_reg_752(0) = '1') else 
        shl_ln_fu_339_p3;
    select_ln42_fu_257_p3 <= 
        ap_const_lv4_0 when (icmp_ln34_reg_752(0) = '1') else 
        h_0_reg_157;
        sext_ln42_1_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_540_p3),14));

        sext_ln42_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln42_fu_295_p2),10));

        sext_ln45_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_436_p3),12));

        sext_ln45_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln45_fu_329_p2),9));

    shl_ln42_1_fu_454_p3 <= (select_ln34_fu_382_p3 & ap_const_lv1_0);
    shl_ln42_mid1_fu_390_p3 <= (h_fu_371_p2 & ap_const_lv1_0);
    shl_ln_fu_339_p3 <= (h_0_reg_157 & ap_const_lv1_0);
    sub_ln42_1_fu_551_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_533_p3) - unsigned(sext_ln42_1_fu_547_p1));
    sub_ln42_fu_295_p2 <= std_logic_vector(unsigned(zext_ln42_fu_279_p1) - unsigned(zext_ln42_1_fu_291_p1));
    sub_ln45_1_fu_448_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_428_p3) - unsigned(sext_ln45_1_fu_444_p1));
    sub_ln45_fu_329_p2 <= std_logic_vector(unsigned(zext_ln45_fu_313_p1) - unsigned(zext_ln45_1_fu_325_p1));
    tmp_10_fu_436_p3 <= (add_ln45_fu_418_p2 & ap_const_lv1_0);
    tmp_11_fu_540_p3 <= (add_ln42_reg_817 & ap_const_lv2_0);
    tmp_1_fu_283_p3 <= (select_ln42_1_fu_264_p3 & ap_const_lv2_0);
    tmp_2_fu_305_p3 <= (select_ln42_1_fu_264_p3 & ap_const_lv4_0);
    tmp_4_fu_317_p3 <= (select_ln42_1_fu_264_p3 & ap_const_lv1_0);
    tmp_7_fu_580_p4 <= bitcast_ln42_fu_576_p1(30 downto 23);
    tmp_8_fu_609_p4 <= bitcast_ln42_1_fu_606_p1(30 downto 23);
    tmp_fu_694_p4 <= bitcast_ln44_fu_690_p1(30 downto 23);
    tmp_s_fu_271_p3 <= (select_ln42_1_fu_264_p3 & ap_const_lv5_0);
    trunc_ln42_1_fu_590_p1 <= bitcast_ln42_fu_576_p1(23 - 1 downto 0);
    trunc_ln42_2_fu_619_p1 <= bitcast_ln42_1_fu_606_p1(23 - 1 downto 0);
    trunc_ln42_fu_520_p1 <= add_ln42_fu_515_p2(9 - 1 downto 0);
    trunc_ln44_fu_704_p1 <= bitcast_ln44_fu_690_p1(23 - 1 downto 0);
    trunc_ln45_fu_424_p1 <= add_ln45_fu_418_p2(8 - 1 downto 0);
    w_fu_672_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln34_reg_772));
    xor_ln42_fu_354_p2 <= (icmp_ln34_reg_752 xor ap_const_lv1_1);
    zext_ln34_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_2_fu_406_p3),9));
    zext_ln39_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_1_fu_494_p3),5));
    zext_ln40_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_fu_486_p3),5));
    zext_ln42_1_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_283_p3),9));
    zext_ln42_2_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_fu_506_p2),10));
    zext_ln42_3_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_1_reg_827),14));
    zext_ln42_4_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_2_fu_560_p2),64));
    zext_ln42_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_271_p3),9));
    zext_ln45_1_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_317_p3),8));
    zext_ln45_2_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_reg_772),12));
    zext_ln45_3_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_1_reg_864),64));
    zext_ln45_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_305_p3),8));
end behav;
