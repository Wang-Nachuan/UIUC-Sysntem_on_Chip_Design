// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module i_max_pooling2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_pp0_stage0 = 8'd8;
parameter    ap_ST_fsm_pp0_stage1 = 8'd16;
parameter    ap_ST_fsm_state8 = 8'd32;
parameter    ap_ST_fsm_state9 = 8'd64;
parameter    ap_ST_fsm_state10 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] indvar_flatten_reg_181;
reg   [1:0] i_0_reg_192;
reg   [31:0] max_value_1_reg_203;
reg   [1:0] j_0_reg_215;
wire   [10:0] add_ln33_fu_239_p2;
reg   [10:0] add_ln33_reg_747;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln34_fu_245_p2;
reg   [0:0] icmp_ln34_reg_752;
wire   [0:0] icmp_ln33_fu_233_p2;
wire   [2:0] select_ln42_1_fu_264_p3;
reg   [2:0] select_ln42_1_reg_762;
wire    ap_CS_fsm_state3;
wire  signed [9:0] sext_ln42_fu_301_p1;
reg  signed [9:0] sext_ln42_reg_767;
wire   [3:0] select_ln34_fu_382_p3;
reg   [3:0] select_ln34_reg_772;
wire   [4:0] select_ln34_1_fu_398_p3;
reg   [4:0] select_ln34_1_reg_778;
wire   [3:0] select_ln34_2_fu_406_p3;
reg   [3:0] select_ln34_2_reg_783;
wire   [11:0] sub_ln45_1_fu_448_p2;
reg   [11:0] sub_ln45_1_reg_788;
wire   [4:0] shl_ln42_1_fu_454_p3;
reg   [4:0] shl_ln42_1_reg_793;
wire   [0:0] icmp_ln39_fu_462_p2;
reg   [0:0] icmp_ln39_reg_798;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln39_reg_798_pp0_iter1_reg;
wire   [2:0] add_ln39_1_fu_468_p2;
reg   [2:0] add_ln39_1_reg_802;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln39_fu_486_p3;
reg   [1:0] select_ln39_reg_807;
wire   [1:0] select_ln39_1_fu_494_p3;
reg   [1:0] select_ln39_1_reg_812;
wire   [9:0] add_ln42_fu_515_p2;
reg   [9:0] add_ln42_reg_817;
wire   [8:0] trunc_ln42_fu_520_p1;
reg   [8:0] trunc_ln42_reg_822;
wire   [4:0] add_ln42_1_fu_528_p2;
reg   [4:0] add_ln42_1_reg_827;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [1:0] j_fu_571_p2;
reg   [1:0] j_reg_837;
reg   [31:0] input_load_reg_842;
wire   [0:0] icmp_ln42_fu_594_p2;
reg   [0:0] icmp_ln42_reg_849;
wire   [0:0] icmp_ln42_1_fu_600_p2;
reg   [0:0] icmp_ln42_1_reg_854;
wire   [31:0] max_value_fu_657_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [11:0] add_ln45_1_fu_667_p2;
reg   [11:0] add_ln45_1_reg_864;
wire    ap_CS_fsm_state8;
wire   [3:0] w_fu_672_p2;
reg   [3:0] w_reg_869;
wire   [7:0] select_ln34_3_fu_683_p3;
reg   [7:0] select_ln34_3_reg_874;
wire   [0:0] grp_fu_226_p2;
reg   [0:0] tmp_6_reg_879;
wire    ap_CS_fsm_state9;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire    ap_block_pp0_stage1_subdone;
reg   [10:0] indvar_flatten24_reg_122;
wire    ap_CS_fsm_state10;
reg   [2:0] c_0_reg_133;
reg   [7:0] indvar_flatten6_reg_145;
reg   [3:0] h_0_reg_157;
reg   [3:0] w_0_reg_169;
reg   [2:0] ap_phi_mux_indvar_flatten_phi_fu_185_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_i_0_phi_fu_196_p4;
wire   [31:0] ap_phi_mux_max_value_1_phi_fu_207_p4;
reg   [1:0] ap_phi_mux_j_0_phi_fu_219_p4;
wire   [63:0] zext_ln42_4_fu_566_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln45_3_fu_731_p1;
reg   [31:0] grp_fu_226_p0;
reg   [31:0] grp_fu_226_p1;
wire   [2:0] c_fu_251_p2;
wire   [7:0] tmp_s_fu_271_p3;
wire   [4:0] tmp_1_fu_283_p3;
wire   [8:0] zext_ln42_fu_279_p1;
wire   [8:0] zext_ln42_1_fu_291_p1;
wire   [8:0] sub_ln42_fu_295_p2;
wire   [6:0] tmp_2_fu_305_p3;
wire   [3:0] tmp_4_fu_317_p3;
wire   [7:0] zext_ln45_fu_313_p1;
wire   [7:0] zext_ln45_1_fu_325_p1;
wire   [7:0] sub_ln45_fu_329_p2;
wire   [4:0] shl_ln_fu_339_p3;
wire   [0:0] icmp_ln35_fu_359_p2;
wire   [0:0] xor_ln42_fu_354_p2;
wire   [3:0] select_ln42_fu_257_p3;
wire   [0:0] and_ln42_2_fu_365_p2;
wire   [0:0] or_ln34_fu_377_p2;
wire   [3:0] h_fu_371_p2;
wire   [4:0] shl_ln42_mid1_fu_390_p3;
wire   [4:0] select_ln42_2_fu_347_p3;
wire  signed [8:0] sext_ln45_fu_335_p1;
wire   [8:0] zext_ln34_fu_414_p1;
wire   [8:0] add_ln45_fu_418_p2;
wire   [7:0] trunc_ln45_fu_424_p1;
wire   [9:0] tmp_10_fu_436_p3;
wire   [11:0] p_shl_cast_fu_428_p3;
wire  signed [11:0] sext_ln45_1_fu_444_p1;
wire   [0:0] icmp_ln40_fu_480_p2;
wire   [1:0] i_fu_474_p2;
wire   [4:0] zext_ln39_fu_502_p1;
wire   [4:0] add_ln39_fu_506_p2;
wire   [9:0] zext_ln42_2_fu_511_p1;
wire   [4:0] zext_ln40_fu_524_p1;
wire   [11:0] tmp_11_fu_540_p3;
wire   [13:0] p_shl3_cast_fu_533_p3;
wire  signed [13:0] sext_ln42_1_fu_547_p1;
wire   [13:0] sub_ln42_1_fu_551_p2;
wire   [13:0] zext_ln42_3_fu_557_p1;
wire   [13:0] add_ln42_2_fu_560_p2;
wire   [31:0] bitcast_ln42_fu_576_p1;
wire   [7:0] tmp_7_fu_580_p4;
wire   [22:0] trunc_ln42_1_fu_590_p1;
wire   [31:0] bitcast_ln42_1_fu_606_p1;
wire   [7:0] tmp_8_fu_609_p4;
wire   [22:0] trunc_ln42_2_fu_619_p1;
wire   [0:0] icmp_ln42_3_fu_633_p2;
wire   [0:0] icmp_ln42_2_fu_627_p2;
wire   [0:0] or_ln42_fu_623_p2;
wire   [0:0] or_ln42_1_fu_639_p2;
wire   [0:0] and_ln42_fu_645_p2;
wire   [0:0] and_ln42_1_fu_651_p2;
wire   [11:0] zext_ln45_2_fu_664_p1;
wire   [7:0] add_ln34_1_fu_677_p2;
wire   [31:0] bitcast_ln44_fu_690_p1;
wire   [7:0] tmp_fu_694_p4;
wire   [22:0] trunc_ln44_fu_704_p1;
wire   [0:0] icmp_ln44_1_fu_714_p2;
wire   [0:0] icmp_ln44_fu_708_p2;
wire   [0:0] or_ln44_fu_720_p2;
wire   [0:0] and_ln44_fu_726_p2;
wire    ap_block_pp0_stage0_00001;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

lenet_top_fcmp_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
lenet_top_fcmp_32dEe_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_226_p0),
    .din1(grp_fu_226_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_226_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c_0_reg_133 <= select_ln42_1_reg_762;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_133 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        h_0_reg_157 <= select_ln34_2_reg_783;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h_0_reg_157 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln39_reg_798 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_192 <= select_ln39_1_reg_812;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_192 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        indvar_flatten24_reg_122 <= add_ln33_reg_747;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten24_reg_122 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        indvar_flatten6_reg_145 <= select_ln34_3_reg_874;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten6_reg_145 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln39_reg_798 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_181 <= add_ln39_1_reg_802;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_181 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln39_reg_798 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_0_reg_215 <= j_reg_837;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_reg_215 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_reg_798_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_value_1_reg_203 <= max_value_fu_657_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        max_value_1_reg_203 <= 32'd3546862757;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        w_0_reg_169 <= w_reg_869;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_0_reg_169 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln33_reg_747 <= add_ln33_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln39_1_reg_802 <= add_ln39_1_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln39_fu_462_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln42_1_reg_827 <= add_ln42_1_fu_528_p2;
        add_ln42_reg_817 <= add_ln42_fu_515_p2;
        select_ln39_reg_807 <= select_ln39_fu_486_p3;
        trunc_ln42_reg_822 <= trunc_ln42_fu_520_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln45_1_reg_864 <= add_ln45_1_fu_667_p2;
        select_ln34_3_reg_874 <= select_ln34_3_fu_683_p3;
        w_reg_869 <= w_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln34_reg_752 <= icmp_ln34_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln39_reg_798 <= icmp_ln39_fu_462_p2;
        icmp_ln39_reg_798_pp0_iter1_reg <= icmp_ln39_reg_798;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln39_reg_798 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln42_1_reg_854 <= icmp_ln42_1_fu_600_p2;
        icmp_ln42_reg_849 <= icmp_ln42_fu_594_p2;
        input_load_reg_842 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_reg_798 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        j_reg_837 <= j_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        select_ln34_1_reg_778[4 : 1] <= select_ln34_1_fu_398_p3[4 : 1];
        select_ln34_2_reg_783 <= select_ln34_2_fu_406_p3;
        select_ln34_reg_772 <= select_ln34_fu_382_p3;
        select_ln42_1_reg_762 <= select_ln42_1_fu_264_p3;
        sext_ln42_reg_767[9 : 2] <= sext_ln42_fu_301_p1[9 : 2];
        shl_ln42_1_reg_793[4 : 1] <= shl_ln42_1_fu_454_p3[4 : 1];
        sub_ln45_1_reg_788[11 : 1] <= sub_ln45_1_fu_448_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln39_fu_462_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln39_1_reg_812 <= select_ln39_1_fu_494_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_6_reg_879 <= grp_fu_226_p2;
    end
end

always @ (*) begin
    if ((icmp_ln39_fu_462_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln33_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_798 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_196_p4 = select_ln39_1_reg_812;
    end else begin
        ap_phi_mux_i_0_phi_fu_196_p4 = i_0_reg_192;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_798 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_185_p4 = add_ln39_1_reg_802;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_185_p4 = indvar_flatten_reg_181;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_798 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_0_phi_fu_219_p4 = j_reg_837;
    end else begin
        ap_phi_mux_j_0_phi_fu_219_p4 = j_0_reg_215;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_226_p0 = max_value_1_reg_203;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_226_p0 = ap_phi_mux_max_value_1_phi_fu_207_p4;
    end else begin
        grp_fu_226_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_226_p1 = 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_226_p1 = input_r_q0;
    end else begin
        grp_fu_226_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln33_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln39_fu_462_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln39_fu_462_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln33_fu_239_p2 = (indvar_flatten24_reg_122 + 11'd1);

assign add_ln34_1_fu_677_p2 = (8'd1 + indvar_flatten6_reg_145);

assign add_ln39_1_fu_468_p2 = (ap_phi_mux_indvar_flatten_phi_fu_185_p4 + 3'd1);

assign add_ln39_fu_506_p2 = (zext_ln39_fu_502_p1 + select_ln34_1_reg_778);

assign add_ln42_1_fu_528_p2 = (zext_ln40_fu_524_p1 + shl_ln42_1_reg_793);

assign add_ln42_2_fu_560_p2 = (sub_ln42_1_fu_551_p2 + zext_ln42_3_fu_557_p1);

assign add_ln42_fu_515_p2 = ($signed(sext_ln42_reg_767) + $signed(zext_ln42_2_fu_511_p1));

assign add_ln45_1_fu_667_p2 = (sub_ln45_1_reg_788 + zext_ln45_2_fu_664_p1);

assign add_ln45_fu_418_p2 = ($signed(sext_ln45_fu_335_p1) + $signed(zext_ln34_fu_414_p1));

assign and_ln42_1_fu_651_p2 = (grp_fu_226_p2 & and_ln42_fu_645_p2);

assign and_ln42_2_fu_365_p2 = (xor_ln42_fu_354_p2 & icmp_ln35_fu_359_p2);

assign and_ln42_fu_645_p2 = (or_ln42_fu_623_p2 & or_ln42_1_fu_639_p2);

assign and_ln44_fu_726_p2 = (tmp_6_reg_879 & or_ln44_fu_720_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_max_value_1_phi_fu_207_p4 = max_value_1_reg_203;

assign bitcast_ln42_1_fu_606_p1 = input_load_reg_842;

assign bitcast_ln42_fu_576_p1 = max_value_1_reg_203;

assign bitcast_ln44_fu_690_p1 = max_value_1_reg_203;

assign c_fu_251_p2 = (3'd1 + c_0_reg_133);

assign h_fu_371_p2 = (4'd1 + select_ln42_fu_257_p3);

assign i_fu_474_p2 = (2'd1 + ap_phi_mux_i_0_phi_fu_196_p4);

assign icmp_ln33_fu_233_p2 = ((indvar_flatten24_reg_122 == 11'd1176) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_245_p2 = ((indvar_flatten6_reg_145 == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_359_p2 = ((w_0_reg_169 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_462_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_185_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_480_p2 = ((ap_phi_mux_j_0_phi_fu_219_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln42_1_fu_600_p2 = ((trunc_ln42_1_fu_590_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_2_fu_627_p2 = ((tmp_8_fu_609_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln42_3_fu_633_p2 = ((trunc_ln42_2_fu_619_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_594_p2 = ((tmp_7_fu_580_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_714_p2 = ((trunc_ln44_fu_704_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_708_p2 = ((tmp_fu_694_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln42_4_fu_566_p1;

assign j_fu_571_p2 = (2'd1 + select_ln39_reg_807);

assign max_value_fu_657_p3 = ((and_ln42_1_fu_651_p2[0:0] === 1'b1) ? max_value_1_reg_203 : input_load_reg_842);

assign or_ln34_fu_377_p2 = (icmp_ln34_reg_752 | and_ln42_2_fu_365_p2);

assign or_ln42_1_fu_639_p2 = (icmp_ln42_3_fu_633_p2 | icmp_ln42_2_fu_627_p2);

assign or_ln42_fu_623_p2 = (icmp_ln42_reg_849 | icmp_ln42_1_reg_854);

assign or_ln44_fu_720_p2 = (icmp_ln44_fu_708_p2 | icmp_ln44_1_fu_714_p2);

assign output_r_address0 = zext_ln45_3_fu_731_p1;

assign output_r_d0 = ((and_ln44_fu_726_p2[0:0] === 1'b1) ? max_value_1_reg_203 : 32'd0);

assign p_shl3_cast_fu_533_p3 = {{trunc_ln42_reg_822}, {5'd0}};

assign p_shl_cast_fu_428_p3 = {{trunc_ln45_fu_424_p1}, {4'd0}};

assign select_ln34_1_fu_398_p3 = ((and_ln42_2_fu_365_p2[0:0] === 1'b1) ? shl_ln42_mid1_fu_390_p3 : select_ln42_2_fu_347_p3);

assign select_ln34_2_fu_406_p3 = ((and_ln42_2_fu_365_p2[0:0] === 1'b1) ? h_fu_371_p2 : select_ln42_fu_257_p3);

assign select_ln34_3_fu_683_p3 = ((icmp_ln34_reg_752[0:0] === 1'b1) ? 8'd1 : add_ln34_1_fu_677_p2);

assign select_ln34_fu_382_p3 = ((or_ln34_fu_377_p2[0:0] === 1'b1) ? 4'd0 : w_0_reg_169);

assign select_ln39_1_fu_494_p3 = ((icmp_ln40_fu_480_p2[0:0] === 1'b1) ? i_fu_474_p2 : ap_phi_mux_i_0_phi_fu_196_p4);

assign select_ln39_fu_486_p3 = ((icmp_ln40_fu_480_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_j_0_phi_fu_219_p4);

assign select_ln42_1_fu_264_p3 = ((icmp_ln34_reg_752[0:0] === 1'b1) ? c_fu_251_p2 : c_0_reg_133);

assign select_ln42_2_fu_347_p3 = ((icmp_ln34_reg_752[0:0] === 1'b1) ? 5'd0 : shl_ln_fu_339_p3);

assign select_ln42_fu_257_p3 = ((icmp_ln34_reg_752[0:0] === 1'b1) ? 4'd0 : h_0_reg_157);

assign sext_ln42_1_fu_547_p1 = $signed(tmp_11_fu_540_p3);

assign sext_ln42_fu_301_p1 = $signed(sub_ln42_fu_295_p2);

assign sext_ln45_1_fu_444_p1 = $signed(tmp_10_fu_436_p3);

assign sext_ln45_fu_335_p1 = $signed(sub_ln45_fu_329_p2);

assign shl_ln42_1_fu_454_p3 = {{select_ln34_fu_382_p3}, {1'd0}};

assign shl_ln42_mid1_fu_390_p3 = {{h_fu_371_p2}, {1'd0}};

assign shl_ln_fu_339_p3 = {{h_0_reg_157}, {1'd0}};

assign sub_ln42_1_fu_551_p2 = ($signed(p_shl3_cast_fu_533_p3) - $signed(sext_ln42_1_fu_547_p1));

assign sub_ln42_fu_295_p2 = (zext_ln42_fu_279_p1 - zext_ln42_1_fu_291_p1);

assign sub_ln45_1_fu_448_p2 = ($signed(p_shl_cast_fu_428_p3) - $signed(sext_ln45_1_fu_444_p1));

assign sub_ln45_fu_329_p2 = (zext_ln45_fu_313_p1 - zext_ln45_1_fu_325_p1);

assign tmp_10_fu_436_p3 = {{add_ln45_fu_418_p2}, {1'd0}};

assign tmp_11_fu_540_p3 = {{add_ln42_reg_817}, {2'd0}};

assign tmp_1_fu_283_p3 = {{select_ln42_1_fu_264_p3}, {2'd0}};

assign tmp_2_fu_305_p3 = {{select_ln42_1_fu_264_p3}, {4'd0}};

assign tmp_4_fu_317_p3 = {{select_ln42_1_fu_264_p3}, {1'd0}};

assign tmp_7_fu_580_p4 = {{bitcast_ln42_fu_576_p1[30:23]}};

assign tmp_8_fu_609_p4 = {{bitcast_ln42_1_fu_606_p1[30:23]}};

assign tmp_fu_694_p4 = {{bitcast_ln44_fu_690_p1[30:23]}};

assign tmp_s_fu_271_p3 = {{select_ln42_1_fu_264_p3}, {5'd0}};

assign trunc_ln42_1_fu_590_p1 = bitcast_ln42_fu_576_p1[22:0];

assign trunc_ln42_2_fu_619_p1 = bitcast_ln42_1_fu_606_p1[22:0];

assign trunc_ln42_fu_520_p1 = add_ln42_fu_515_p2[8:0];

assign trunc_ln44_fu_704_p1 = bitcast_ln44_fu_690_p1[22:0];

assign trunc_ln45_fu_424_p1 = add_ln45_fu_418_p2[7:0];

assign w_fu_672_p2 = (4'd1 + select_ln34_reg_772);

assign xor_ln42_fu_354_p2 = (icmp_ln34_reg_752 ^ 1'd1);

assign zext_ln34_fu_414_p1 = select_ln34_2_fu_406_p3;

assign zext_ln39_fu_502_p1 = select_ln39_1_fu_494_p3;

assign zext_ln40_fu_524_p1 = select_ln39_fu_486_p3;

assign zext_ln42_1_fu_291_p1 = tmp_1_fu_283_p3;

assign zext_ln42_2_fu_511_p1 = add_ln39_fu_506_p2;

assign zext_ln42_3_fu_557_p1 = add_ln42_1_reg_827;

assign zext_ln42_4_fu_566_p1 = add_ln42_2_fu_560_p2;

assign zext_ln42_fu_279_p1 = tmp_s_fu_271_p3;

assign zext_ln45_1_fu_325_p1 = tmp_4_fu_317_p3;

assign zext_ln45_2_fu_664_p1 = select_ln34_reg_772;

assign zext_ln45_3_fu_731_p1 = add_ln45_1_reg_864;

assign zext_ln45_fu_313_p1 = tmp_2_fu_305_p3;

always @ (posedge ap_clk) begin
    sext_ln42_reg_767[1:0] <= 2'b00;
    select_ln34_1_reg_778[0] <= 1'b0;
    sub_ln45_1_reg_788[0] <= 1'b0;
    shl_ln42_1_reg_793[0] <= 1'b0;
end

endmodule //i_max_pooling2
