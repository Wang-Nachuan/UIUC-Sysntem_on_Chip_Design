// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module i_fc6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_0_address0,
        input_0_0_ce0,
        input_0_0_q0,
        m_axi_weights_AWVALID,
        m_axi_weights_AWREADY,
        m_axi_weights_AWADDR,
        m_axi_weights_AWID,
        m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT,
        m_axi_weights_AWQOS,
        m_axi_weights_AWREGION,
        m_axi_weights_AWUSER,
        m_axi_weights_WVALID,
        m_axi_weights_WREADY,
        m_axi_weights_WDATA,
        m_axi_weights_WSTRB,
        m_axi_weights_WLAST,
        m_axi_weights_WID,
        m_axi_weights_WUSER,
        m_axi_weights_ARVALID,
        m_axi_weights_ARREADY,
        m_axi_weights_ARADDR,
        m_axi_weights_ARID,
        m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT,
        m_axi_weights_ARQOS,
        m_axi_weights_ARREGION,
        m_axi_weights_ARUSER,
        m_axi_weights_RVALID,
        m_axi_weights_RREADY,
        m_axi_weights_RDATA,
        m_axi_weights_RLAST,
        m_axi_weights_RID,
        m_axi_weights_RUSER,
        m_axi_weights_RRESP,
        m_axi_weights_BVALID,
        m_axi_weights_BREADY,
        m_axi_weights_BRESP,
        m_axi_weights_BID,
        m_axi_weights_BUSER,
        weights_offset,
        m_axi_bias_AWVALID,
        m_axi_bias_AWREADY,
        m_axi_bias_AWADDR,
        m_axi_bias_AWID,
        m_axi_bias_AWLEN,
        m_axi_bias_AWSIZE,
        m_axi_bias_AWBURST,
        m_axi_bias_AWLOCK,
        m_axi_bias_AWCACHE,
        m_axi_bias_AWPROT,
        m_axi_bias_AWQOS,
        m_axi_bias_AWREGION,
        m_axi_bias_AWUSER,
        m_axi_bias_WVALID,
        m_axi_bias_WREADY,
        m_axi_bias_WDATA,
        m_axi_bias_WSTRB,
        m_axi_bias_WLAST,
        m_axi_bias_WID,
        m_axi_bias_WUSER,
        m_axi_bias_ARVALID,
        m_axi_bias_ARREADY,
        m_axi_bias_ARADDR,
        m_axi_bias_ARID,
        m_axi_bias_ARLEN,
        m_axi_bias_ARSIZE,
        m_axi_bias_ARBURST,
        m_axi_bias_ARLOCK,
        m_axi_bias_ARCACHE,
        m_axi_bias_ARPROT,
        m_axi_bias_ARQOS,
        m_axi_bias_ARREGION,
        m_axi_bias_ARUSER,
        m_axi_bias_RVALID,
        m_axi_bias_RREADY,
        m_axi_bias_RDATA,
        m_axi_bias_RLAST,
        m_axi_bias_RID,
        m_axi_bias_RUSER,
        m_axi_bias_RRESP,
        m_axi_bias_BVALID,
        m_axi_bias_BREADY,
        m_axi_bias_BRESP,
        m_axi_bias_BID,
        m_axi_bias_BUSER,
        bias_offset,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_pp0_stage0 = 13'd128;
parameter    ap_ST_fsm_pp0_stage1 = 13'd256;
parameter    ap_ST_fsm_pp0_stage2 = 13'd512;
parameter    ap_ST_fsm_pp0_stage3 = 13'd1024;
parameter    ap_ST_fsm_pp0_stage4 = 13'd2048;
parameter    ap_ST_fsm_state34 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_0_0_address0;
output   input_0_0_ce0;
input  [31:0] input_0_0_q0;
output   m_axi_weights_AWVALID;
input   m_axi_weights_AWREADY;
output  [31:0] m_axi_weights_AWADDR;
output  [0:0] m_axi_weights_AWID;
output  [31:0] m_axi_weights_AWLEN;
output  [2:0] m_axi_weights_AWSIZE;
output  [1:0] m_axi_weights_AWBURST;
output  [1:0] m_axi_weights_AWLOCK;
output  [3:0] m_axi_weights_AWCACHE;
output  [2:0] m_axi_weights_AWPROT;
output  [3:0] m_axi_weights_AWQOS;
output  [3:0] m_axi_weights_AWREGION;
output  [0:0] m_axi_weights_AWUSER;
output   m_axi_weights_WVALID;
input   m_axi_weights_WREADY;
output  [31:0] m_axi_weights_WDATA;
output  [3:0] m_axi_weights_WSTRB;
output   m_axi_weights_WLAST;
output  [0:0] m_axi_weights_WID;
output  [0:0] m_axi_weights_WUSER;
output   m_axi_weights_ARVALID;
input   m_axi_weights_ARREADY;
output  [31:0] m_axi_weights_ARADDR;
output  [0:0] m_axi_weights_ARID;
output  [31:0] m_axi_weights_ARLEN;
output  [2:0] m_axi_weights_ARSIZE;
output  [1:0] m_axi_weights_ARBURST;
output  [1:0] m_axi_weights_ARLOCK;
output  [3:0] m_axi_weights_ARCACHE;
output  [2:0] m_axi_weights_ARPROT;
output  [3:0] m_axi_weights_ARQOS;
output  [3:0] m_axi_weights_ARREGION;
output  [0:0] m_axi_weights_ARUSER;
input   m_axi_weights_RVALID;
output   m_axi_weights_RREADY;
input  [31:0] m_axi_weights_RDATA;
input   m_axi_weights_RLAST;
input  [0:0] m_axi_weights_RID;
input  [0:0] m_axi_weights_RUSER;
input  [1:0] m_axi_weights_RRESP;
input   m_axi_weights_BVALID;
output   m_axi_weights_BREADY;
input  [1:0] m_axi_weights_BRESP;
input  [0:0] m_axi_weights_BID;
input  [0:0] m_axi_weights_BUSER;
input  [29:0] weights_offset;
output   m_axi_bias_AWVALID;
input   m_axi_bias_AWREADY;
output  [31:0] m_axi_bias_AWADDR;
output  [0:0] m_axi_bias_AWID;
output  [31:0] m_axi_bias_AWLEN;
output  [2:0] m_axi_bias_AWSIZE;
output  [1:0] m_axi_bias_AWBURST;
output  [1:0] m_axi_bias_AWLOCK;
output  [3:0] m_axi_bias_AWCACHE;
output  [2:0] m_axi_bias_AWPROT;
output  [3:0] m_axi_bias_AWQOS;
output  [3:0] m_axi_bias_AWREGION;
output  [0:0] m_axi_bias_AWUSER;
output   m_axi_bias_WVALID;
input   m_axi_bias_WREADY;
output  [31:0] m_axi_bias_WDATA;
output  [3:0] m_axi_bias_WSTRB;
output   m_axi_bias_WLAST;
output  [0:0] m_axi_bias_WID;
output  [0:0] m_axi_bias_WUSER;
output   m_axi_bias_ARVALID;
input   m_axi_bias_ARREADY;
output  [31:0] m_axi_bias_ARADDR;
output  [0:0] m_axi_bias_ARID;
output  [31:0] m_axi_bias_ARLEN;
output  [2:0] m_axi_bias_ARSIZE;
output  [1:0] m_axi_bias_ARBURST;
output  [1:0] m_axi_bias_ARLOCK;
output  [3:0] m_axi_bias_ARCACHE;
output  [2:0] m_axi_bias_ARPROT;
output  [3:0] m_axi_bias_ARQOS;
output  [3:0] m_axi_bias_ARREGION;
output  [0:0] m_axi_bias_ARUSER;
input   m_axi_bias_RVALID;
output   m_axi_bias_RREADY;
input  [31:0] m_axi_bias_RDATA;
input   m_axi_bias_RLAST;
input  [0:0] m_axi_bias_RID;
input  [0:0] m_axi_bias_RUSER;
input  [1:0] m_axi_bias_RRESP;
input   m_axi_bias_BVALID;
output   m_axi_bias_BREADY;
input  [1:0] m_axi_bias_BRESP;
input  [0:0] m_axi_bias_BID;
input  [0:0] m_axi_bias_BUSER;
input  [29:0] bias_offset;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_0_ce0;
reg m_axi_weights_ARVALID;
reg m_axi_weights_RREADY;
reg m_axi_bias_ARVALID;
reg m_axi_bias_RREADY;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weights_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln118_reg_414;
reg    weights_blk_n_R;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3;
reg   [0:0] icmp_ln118_reg_414_pp0_iter1_reg;
reg    bias_blk_n_AR;
reg    bias_blk_n_R;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln120_1_reg_482;
reg   [10:0] indvar_flatten_reg_152;
reg   [3:0] n_0_reg_163;
reg   [31:0] empty_reg_174;
reg   [6:0] c_0_reg_186;
wire   [31:0] weights_offset_cast_fu_221_p1;
reg   [31:0] weights_offset_cast_reg_409;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln118_fu_225_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state18_pp0_stage0_iter2;
wire    ap_block_state23_pp0_stage0_iter3;
wire    ap_block_state28_pp0_stage0_iter4;
wire    ap_block_state33_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln118_reg_414_pp0_iter2_reg;
reg   [0:0] icmp_ln118_reg_414_pp0_iter3_reg;
wire   [10:0] add_ln118_fu_231_p2;
reg   [10:0] add_ln118_reg_418;
wire   [0:0] icmp_ln120_fu_243_p2;
reg   [0:0] icmp_ln120_reg_423;
reg   [0:0] icmp_ln120_reg_423_pp0_iter1_reg;
reg   [0:0] icmp_ln120_reg_423_pp0_iter2_reg;
wire   [6:0] select_ln119_1_fu_249_p3;
reg   [6:0] select_ln119_1_reg_428;
wire   [3:0] select_ln119_2_fu_257_p3;
reg   [3:0] select_ln119_2_reg_434;
reg   [3:0] select_ln119_2_reg_434_pp0_iter1_reg;
reg   [3:0] select_ln119_2_reg_434_pp0_iter2_reg;
reg   [3:0] select_ln119_2_reg_434_pp0_iter3_reg;
reg   [3:0] select_ln119_2_reg_434_pp0_iter4_reg;
wire   [31:0] add_ln122_1_fu_313_p2;
reg   [31:0] add_ln122_1_reg_440;
wire    ap_block_state9_pp0_stage1_iter0;
reg    ap_block_state9_io;
wire    ap_block_state14_pp0_stage1_iter1;
wire    ap_block_state19_pp0_stage1_iter2;
reg    ap_block_state24_pp0_stage1_iter3;
wire    ap_block_state29_pp0_stage1_iter4;
reg    ap_block_pp0_stage1_11001;
wire   [6:0] c_fu_328_p2;
reg   [6:0] c_reg_451;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state12_pp0_stage4_iter0;
wire    ap_block_state17_pp0_stage4_iter1;
wire    ap_block_state22_pp0_stage4_iter2;
wire    ap_block_state27_pp0_stage4_iter3;
wire    ap_block_state32_pp0_stage4_iter4;
wire    ap_block_pp0_stage4_11001;
reg   [6:0] c_reg_451_pp0_iter1_reg;
reg   [31:0] input_0_0_load_reg_462;
reg   [31:0] weights_addr_read_reg_467;
wire    ap_block_state11_pp0_stage3_iter0;
reg    ap_block_state16_pp0_stage3_iter1;
wire    ap_block_state21_pp0_stage3_iter2;
wire    ap_block_state26_pp0_stage3_iter3;
wire    ap_block_state31_pp0_stage3_iter4;
reg    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_201_p2;
reg   [31:0] tmp_4_reg_472;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state10_pp0_stage2_iter0;
wire    ap_block_state15_pp0_stage2_iter1;
wire    ap_block_state20_pp0_stage2_iter2;
wire    ap_block_state25_pp0_stage2_iter3;
wire    ap_block_state30_pp0_stage2_iter4;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] select_ln119_fu_337_p3;
wire   [0:0] icmp_ln120_1_fu_345_p2;
reg   [0:0] icmp_ln120_1_reg_482_pp0_iter3_reg;
reg   [0:0] icmp_ln120_1_reg_482_pp0_iter4_reg;
reg   [31:0] bias_addr_read_reg_486;
wire   [31:0] grp_fu_197_p2;
reg   [31:0] tmp_5_reg_491;
reg   [31:0] tmp_reg_497;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
wire    ap_block_pp0_stage4_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter5;
reg   [10:0] ap_phi_mux_indvar_flatten_phi_fu_156_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_n_0_phi_fu_167_p4;
reg   [31:0] ap_phi_mux_empty_phi_fu_178_p4;
reg   [6:0] ap_phi_mux_c_0_phi_fu_190_p4;
wire   [63:0] zext_ln122_fu_333_p1;
wire   [63:0] zext_ln119_fu_350_p1;
wire   [63:0] zext_ln124_fu_210_p1;
wire  signed [63:0] sext_ln122_2_fu_318_p1;
reg   [31:0] grp_fu_197_p0;
reg   [31:0] grp_fu_197_p1;
wire    ap_block_pp0_stage4;
wire   [3:0] n_fu_237_p2;
wire   [10:0] tmp_7_fu_265_p3;
wire   [6:0] tmp_8_fu_277_p3;
wire   [11:0] zext_ln122_1_fu_273_p1;
wire   [11:0] zext_ln122_2_fu_285_p1;
wire   [11:0] sub_ln122_fu_289_p2;
wire  signed [12:0] sext_ln122_fu_295_p1;
wire   [12:0] zext_ln122_3_fu_299_p1;
wire   [12:0] add_ln122_fu_303_p2;
wire  signed [31:0] sext_ln122_1_fu_309_p1;
wire   [31:0] bitcast_ln125_fu_354_p1;
wire   [7:0] tmp_s_fu_357_p4;
wire   [22:0] trunc_ln125_fu_367_p1;
wire   [0:0] icmp_ln125_1_fu_377_p2;
wire   [0:0] icmp_ln125_fu_371_p2;
wire   [0:0] or_ln125_fu_383_p2;
wire   [0:0] grp_fu_205_p2;
wire   [0:0] and_ln125_fu_389_p2;
reg    grp_fu_197_ce;
reg    grp_fu_201_ce;
reg    grp_fu_205_ce;
wire    ap_block_pp0_stage4_00001;
wire    ap_CS_fsm_state34;
reg   [12:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

lenet_top_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_top_fadd_32bkb_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_197_p0),
    .din1(grp_fu_197_p1),
    .ce(grp_fu_197_ce),
    .dout(grp_fu_197_p2)
);

lenet_top_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_top_fmul_32cud_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_addr_read_reg_467),
    .din1(input_0_0_load_reg_462),
    .ce(grp_fu_201_ce),
    .dout(grp_fu_201_p2)
);

lenet_top_fcmp_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
lenet_top_fcmp_32dEe_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_497),
    .din1(32'd0),
    .ce(grp_fu_205_ce),
    .opcode(5'd4),
    .dout(grp_fu_205_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_414 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_186 <= c_reg_451;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        c_0_reg_186 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_414_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        empty_reg_174 <= tmp_5_reg_491;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        empty_reg_174 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_414 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_152 <= add_ln118_reg_418;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten_reg_152 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_414 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        n_0_reg_163 <= select_ln119_2_reg_434;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        n_0_reg_163 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln118_reg_418 <= add_ln118_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_fu_225_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln122_1_reg_440 <= add_ln122_1_fu_313_p2;
        icmp_ln120_reg_423 <= icmp_ln120_fu_243_p2;
        select_ln119_1_reg_428 <= select_ln119_1_fu_249_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln120_1_reg_482 == 1'd1))) begin
        bias_addr_read_reg_486 <= m_axi_bias_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_414 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_reg_451 <= c_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        c_reg_451_pp0_iter1_reg <= c_reg_451;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln118_reg_414 <= icmp_ln118_fu_225_p2;
        icmp_ln118_reg_414_pp0_iter1_reg <= icmp_ln118_reg_414;
        icmp_ln118_reg_414_pp0_iter2_reg <= icmp_ln118_reg_414_pp0_iter1_reg;
        icmp_ln118_reg_414_pp0_iter3_reg <= icmp_ln118_reg_414_pp0_iter2_reg;
        icmp_ln120_reg_423_pp0_iter1_reg <= icmp_ln120_reg_423;
        icmp_ln120_reg_423_pp0_iter2_reg <= icmp_ln120_reg_423_pp0_iter1_reg;
        select_ln119_2_reg_434_pp0_iter1_reg <= select_ln119_2_reg_434;
        select_ln119_2_reg_434_pp0_iter2_reg <= select_ln119_2_reg_434_pp0_iter1_reg;
        select_ln119_2_reg_434_pp0_iter3_reg <= select_ln119_2_reg_434_pp0_iter2_reg;
        select_ln119_2_reg_434_pp0_iter4_reg <= select_ln119_2_reg_434_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_414_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        icmp_ln120_1_reg_482 <= icmp_ln120_1_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        icmp_ln120_1_reg_482_pp0_iter3_reg <= icmp_ln120_1_reg_482;
        icmp_ln120_1_reg_482_pp0_iter4_reg <= icmp_ln120_1_reg_482_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_414_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_0_0_load_reg_462 <= input_0_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_fu_225_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln119_2_reg_434 <= select_ln119_2_fu_257_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_414_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_4_reg_472 <= grp_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_414_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        tmp_5_reg_491 <= grp_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln120_1_reg_482_pp0_iter3_reg == 1'd1))) begin
        tmp_reg_497 <= grp_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_reg_414_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        weights_addr_read_reg_467 <= m_axi_weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_offset_cast_reg_409[29 : 0] <= weights_offset_cast_fu_221_p1[29 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln118_fu_225_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_414 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_c_0_phi_fu_190_p4 = c_reg_451;
    end else begin
        ap_phi_mux_c_0_phi_fu_190_p4 = c_0_reg_186;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_414_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        ap_phi_mux_empty_phi_fu_178_p4 = tmp_5_reg_491;
    end else begin
        ap_phi_mux_empty_phi_fu_178_p4 = empty_reg_174;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_414 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_156_p4 = add_ln118_reg_418;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_156_p4 = indvar_flatten_reg_152;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_414 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_n_0_phi_fu_167_p4 = select_ln119_2_reg_434;
    end else begin
        ap_phi_mux_n_0_phi_fu_167_p4 = n_0_reg_163;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bias_blk_n_AR = m_axi_bias_ARREADY;
    end else begin
        bias_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln120_1_reg_482 == 1'd1) & (1'b0 == ap_block_pp0_stage1))) begin
        bias_blk_n_R = m_axi_bias_RVALID;
    end else begin
        bias_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_197_ce = 1'b1;
    end else begin
        grp_fu_197_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_197_p0 = tmp_5_reg_491;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_197_p0 = select_ln119_fu_337_p3;
    end else begin
        grp_fu_197_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_197_p1 = bias_addr_read_reg_486;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_197_p1 = tmp_4_reg_472;
    end else begin
        grp_fu_197_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_201_ce = 1'b1;
    end else begin
        grp_fu_201_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_205_ce = 1'b1;
    end else begin
        grp_fu_205_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_0_0_ce0 = 1'b1;
    end else begin
        input_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (m_axi_bias_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_bias_ARVALID = 1'b1;
    end else begin
        m_axi_bias_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln120_1_reg_482 == 1'd1))) begin
        m_axi_bias_RREADY = 1'b1;
    end else begin
        m_axi_bias_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_414 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_weights_ARVALID = 1'b1;
    end else begin
        m_axi_weights_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_414_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        m_axi_weights_RREADY = 1'b1;
    end else begin
        m_axi_weights_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_1_reg_482_pp0_iter4_reg == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_414 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        weights_blk_n_AR = m_axi_weights_ARREADY;
    end else begin
        weights_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_414_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        weights_blk_n_R = m_axi_weights_RVALID;
    end else begin
        weights_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (m_axi_bias_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln118_fu_225_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln118_fu_225_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln118_fu_231_p2 = (ap_phi_mux_indvar_flatten_phi_fu_156_p4 + 11'd1);

assign add_ln122_1_fu_313_p2 = ($signed(weights_offset_cast_reg_409) + $signed(sext_ln122_1_fu_309_p1));

assign add_ln122_fu_303_p2 = ($signed(sext_ln122_fu_295_p1) + $signed(zext_ln122_3_fu_299_p1));

assign and_ln125_fu_389_p2 = (or_ln125_fu_383_p2 & grp_fu_205_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_bias_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln120_1_reg_482 == 1'd1)) | ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_bias_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln120_1_reg_482 == 1'd1)) | ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((icmp_ln118_reg_414_pp0_iter1_reg == 1'd0) & (m_axi_weights_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((icmp_ln118_reg_414_pp0_iter1_reg == 1'd0) & (m_axi_weights_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_pp0_stage3_iter1 = ((icmp_ln118_reg_414_pp0_iter1_reg == 1'd0) & (m_axi_weights_RVALID == 1'b0));
end

assign ap_block_state17_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_pp0_stage1_iter3 = ((m_axi_bias_RVALID == 1'b0) & (icmp_ln120_1_reg_482 == 1'd1));
end

assign ap_block_state25_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((icmp_ln118_reg_414 == 1'd0) & (m_axi_weights_ARREADY == 1'b0));
end

assign ap_block_state9_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln125_fu_354_p1 = tmp_reg_497;

assign c_fu_328_p2 = (select_ln119_1_reg_428 + 7'd1);

assign icmp_ln118_fu_225_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_156_p4 == 11'd1200) ? 1'b1 : 1'b0);

assign icmp_ln120_1_fu_345_p2 = ((c_reg_451_pp0_iter1_reg == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln120_fu_243_p2 = ((ap_phi_mux_c_0_phi_fu_190_p4 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln125_1_fu_377_p2 = ((trunc_ln125_fu_367_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_371_p2 = ((tmp_s_fu_357_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_0_0_address0 = zext_ln122_fu_333_p1;

assign m_axi_bias_ARADDR = zext_ln124_fu_210_p1;

assign m_axi_bias_ARBURST = 2'd0;

assign m_axi_bias_ARCACHE = 4'd0;

assign m_axi_bias_ARID = 1'd0;

assign m_axi_bias_ARLEN = 32'd10;

assign m_axi_bias_ARLOCK = 2'd0;

assign m_axi_bias_ARPROT = 3'd0;

assign m_axi_bias_ARQOS = 4'd0;

assign m_axi_bias_ARREGION = 4'd0;

assign m_axi_bias_ARSIZE = 3'd0;

assign m_axi_bias_ARUSER = 1'd0;

assign m_axi_bias_AWADDR = 32'd0;

assign m_axi_bias_AWBURST = 2'd0;

assign m_axi_bias_AWCACHE = 4'd0;

assign m_axi_bias_AWID = 1'd0;

assign m_axi_bias_AWLEN = 32'd0;

assign m_axi_bias_AWLOCK = 2'd0;

assign m_axi_bias_AWPROT = 3'd0;

assign m_axi_bias_AWQOS = 4'd0;

assign m_axi_bias_AWREGION = 4'd0;

assign m_axi_bias_AWSIZE = 3'd0;

assign m_axi_bias_AWUSER = 1'd0;

assign m_axi_bias_AWVALID = 1'b0;

assign m_axi_bias_BREADY = 1'b0;

assign m_axi_bias_WDATA = 32'd0;

assign m_axi_bias_WID = 1'd0;

assign m_axi_bias_WLAST = 1'b0;

assign m_axi_bias_WSTRB = 4'd0;

assign m_axi_bias_WUSER = 1'd0;

assign m_axi_bias_WVALID = 1'b0;

assign m_axi_weights_ARADDR = sext_ln122_2_fu_318_p1;

assign m_axi_weights_ARBURST = 2'd0;

assign m_axi_weights_ARCACHE = 4'd0;

assign m_axi_weights_ARID = 1'd0;

assign m_axi_weights_ARLEN = 32'd1;

assign m_axi_weights_ARLOCK = 2'd0;

assign m_axi_weights_ARPROT = 3'd0;

assign m_axi_weights_ARQOS = 4'd0;

assign m_axi_weights_ARREGION = 4'd0;

assign m_axi_weights_ARSIZE = 3'd0;

assign m_axi_weights_ARUSER = 1'd0;

assign m_axi_weights_AWADDR = 32'd0;

assign m_axi_weights_AWBURST = 2'd0;

assign m_axi_weights_AWCACHE = 4'd0;

assign m_axi_weights_AWID = 1'd0;

assign m_axi_weights_AWLEN = 32'd0;

assign m_axi_weights_AWLOCK = 2'd0;

assign m_axi_weights_AWPROT = 3'd0;

assign m_axi_weights_AWQOS = 4'd0;

assign m_axi_weights_AWREGION = 4'd0;

assign m_axi_weights_AWSIZE = 3'd0;

assign m_axi_weights_AWUSER = 1'd0;

assign m_axi_weights_AWVALID = 1'b0;

assign m_axi_weights_BREADY = 1'b0;

assign m_axi_weights_WDATA = 32'd0;

assign m_axi_weights_WID = 1'd0;

assign m_axi_weights_WLAST = 1'b0;

assign m_axi_weights_WSTRB = 4'd0;

assign m_axi_weights_WUSER = 1'd0;

assign m_axi_weights_WVALID = 1'b0;

assign n_fu_237_p2 = (ap_phi_mux_n_0_phi_fu_167_p4 + 4'd1);

assign or_ln125_fu_383_p2 = (icmp_ln125_fu_371_p2 | icmp_ln125_1_fu_377_p2);

assign output_r_address0 = zext_ln119_fu_350_p1;

assign output_r_d0 = ((and_ln125_fu_389_p2[0:0] === 1'b1) ? 32'd0 : tmp_reg_497);

assign select_ln119_1_fu_249_p3 = ((icmp_ln120_fu_243_p2[0:0] === 1'b1) ? 7'd0 : ap_phi_mux_c_0_phi_fu_190_p4);

assign select_ln119_2_fu_257_p3 = ((icmp_ln120_fu_243_p2[0:0] === 1'b1) ? n_fu_237_p2 : ap_phi_mux_n_0_phi_fu_167_p4);

assign select_ln119_fu_337_p3 = ((icmp_ln120_reg_423_pp0_iter2_reg[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_empty_phi_fu_178_p4);

assign sext_ln122_1_fu_309_p1 = $signed(add_ln122_fu_303_p2);

assign sext_ln122_2_fu_318_p1 = $signed(add_ln122_1_reg_440);

assign sext_ln122_fu_295_p1 = $signed(sub_ln122_fu_289_p2);

assign sub_ln122_fu_289_p2 = (zext_ln122_1_fu_273_p1 - zext_ln122_2_fu_285_p1);

assign tmp_7_fu_265_p3 = {{select_ln119_2_fu_257_p3}, {7'd0}};

assign tmp_8_fu_277_p3 = {{select_ln119_2_fu_257_p3}, {3'd0}};

assign tmp_s_fu_357_p4 = {{bitcast_ln125_fu_354_p1[30:23]}};

assign trunc_ln125_fu_367_p1 = bitcast_ln125_fu_354_p1[22:0];

assign weights_offset_cast_fu_221_p1 = weights_offset;

assign zext_ln119_fu_350_p1 = select_ln119_2_reg_434_pp0_iter4_reg;

assign zext_ln122_1_fu_273_p1 = tmp_7_fu_265_p3;

assign zext_ln122_2_fu_285_p1 = tmp_8_fu_277_p3;

assign zext_ln122_3_fu_299_p1 = select_ln119_1_fu_249_p3;

assign zext_ln122_fu_333_p1 = select_ln119_1_reg_428;

assign zext_ln124_fu_210_p1 = bias_offset;

always @ (posedge ap_clk) begin
    weights_offset_cast_reg_409[31:30] <= 2'b00;
end

endmodule //i_fc6
