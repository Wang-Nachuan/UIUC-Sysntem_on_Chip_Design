// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ld_bias3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_bias3_AWVALID,
        m_axi_bias3_AWREADY,
        m_axi_bias3_AWADDR,
        m_axi_bias3_AWID,
        m_axi_bias3_AWLEN,
        m_axi_bias3_AWSIZE,
        m_axi_bias3_AWBURST,
        m_axi_bias3_AWLOCK,
        m_axi_bias3_AWCACHE,
        m_axi_bias3_AWPROT,
        m_axi_bias3_AWQOS,
        m_axi_bias3_AWREGION,
        m_axi_bias3_AWUSER,
        m_axi_bias3_WVALID,
        m_axi_bias3_WREADY,
        m_axi_bias3_WDATA,
        m_axi_bias3_WSTRB,
        m_axi_bias3_WLAST,
        m_axi_bias3_WID,
        m_axi_bias3_WUSER,
        m_axi_bias3_ARVALID,
        m_axi_bias3_ARREADY,
        m_axi_bias3_ARADDR,
        m_axi_bias3_ARID,
        m_axi_bias3_ARLEN,
        m_axi_bias3_ARSIZE,
        m_axi_bias3_ARBURST,
        m_axi_bias3_ARLOCK,
        m_axi_bias3_ARCACHE,
        m_axi_bias3_ARPROT,
        m_axi_bias3_ARQOS,
        m_axi_bias3_ARREGION,
        m_axi_bias3_ARUSER,
        m_axi_bias3_RVALID,
        m_axi_bias3_RREADY,
        m_axi_bias3_RDATA,
        m_axi_bias3_RLAST,
        m_axi_bias3_RID,
        m_axi_bias3_RUSER,
        m_axi_bias3_RRESP,
        m_axi_bias3_BVALID,
        m_axi_bias3_BREADY,
        m_axi_bias3_BRESP,
        m_axi_bias3_BID,
        m_axi_bias3_BUSER,
        bias3_offset,
        bias3_buf_address0,
        bias3_buf_ce0,
        bias3_buf_we0,
        bias3_buf_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_bias3_AWVALID;
input   m_axi_bias3_AWREADY;
output  [31:0] m_axi_bias3_AWADDR;
output  [0:0] m_axi_bias3_AWID;
output  [31:0] m_axi_bias3_AWLEN;
output  [2:0] m_axi_bias3_AWSIZE;
output  [1:0] m_axi_bias3_AWBURST;
output  [1:0] m_axi_bias3_AWLOCK;
output  [3:0] m_axi_bias3_AWCACHE;
output  [2:0] m_axi_bias3_AWPROT;
output  [3:0] m_axi_bias3_AWQOS;
output  [3:0] m_axi_bias3_AWREGION;
output  [0:0] m_axi_bias3_AWUSER;
output   m_axi_bias3_WVALID;
input   m_axi_bias3_WREADY;
output  [31:0] m_axi_bias3_WDATA;
output  [3:0] m_axi_bias3_WSTRB;
output   m_axi_bias3_WLAST;
output  [0:0] m_axi_bias3_WID;
output  [0:0] m_axi_bias3_WUSER;
output   m_axi_bias3_ARVALID;
input   m_axi_bias3_ARREADY;
output  [31:0] m_axi_bias3_ARADDR;
output  [0:0] m_axi_bias3_ARID;
output  [31:0] m_axi_bias3_ARLEN;
output  [2:0] m_axi_bias3_ARSIZE;
output  [1:0] m_axi_bias3_ARBURST;
output  [1:0] m_axi_bias3_ARLOCK;
output  [3:0] m_axi_bias3_ARCACHE;
output  [2:0] m_axi_bias3_ARPROT;
output  [3:0] m_axi_bias3_ARQOS;
output  [3:0] m_axi_bias3_ARREGION;
output  [0:0] m_axi_bias3_ARUSER;
input   m_axi_bias3_RVALID;
output   m_axi_bias3_RREADY;
input  [31:0] m_axi_bias3_RDATA;
input   m_axi_bias3_RLAST;
input  [0:0] m_axi_bias3_RID;
input  [0:0] m_axi_bias3_RUSER;
input  [1:0] m_axi_bias3_RRESP;
input   m_axi_bias3_BVALID;
output   m_axi_bias3_BREADY;
input  [1:0] m_axi_bias3_BRESP;
input  [0:0] m_axi_bias3_BID;
input  [0:0] m_axi_bias3_BUSER;
input  [29:0] bias3_offset;
output  [3:0] bias3_buf_address0;
output   bias3_buf_ce0;
output   bias3_buf_we0;
output  [31:0] bias3_buf_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_bias3_ARVALID;
reg m_axi_bias3_RREADY;
reg bias3_buf_ce0;
reg bias3_buf_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    bias3_blk_n_AR;
reg    bias3_blk_n_R;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln181_fu_92_p2;
wire   [4:0] i_fu_98_p2;
reg   [4:0] i_reg_118;
reg    ap_block_state8;
reg   [31:0] bias3_addr_read_reg_123;
reg   [4:0] i_0_reg_69;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln182_fu_104_p1;
wire   [63:0] zext_ln182_1_fu_81_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_reg_69 <= i_reg_118;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_69 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln181_fu_92_p2 == 1'd0) & (m_axi_bias3_RVALID == 1'b0)) & (icmp_ln181_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        bias3_addr_read_reg_123 <= m_axi_bias3_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln181_fu_92_p2 == 1'd0) & (m_axi_bias3_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        i_reg_118 <= i_fu_98_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((icmp_ln181_fu_92_p2 == 1'd0) & (m_axi_bias3_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln181_fu_92_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln181_fu_92_p2 == 1'd0) & (m_axi_bias3_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln181_fu_92_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bias3_blk_n_AR = m_axi_bias3_ARREADY;
    end else begin
        bias3_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln181_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        bias3_blk_n_R = m_axi_bias3_RVALID;
    end else begin
        bias3_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bias3_buf_ce0 = 1'b1;
    end else begin
        bias3_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bias3_buf_we0 = 1'b1;
    end else begin
        bias3_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_bias3_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_bias3_ARVALID = 1'b1;
    end else begin
        m_axi_bias3_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln181_fu_92_p2 == 1'd0) & (m_axi_bias3_RVALID == 1'b0)) & (icmp_ln181_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        m_axi_bias3_RREADY = 1'b1;
    end else begin
        m_axi_bias3_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_bias3_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((icmp_ln181_fu_92_p2 == 1'd0) & (m_axi_bias3_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln181_fu_92_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln181_fu_92_p2 == 1'd0) & (m_axi_bias3_RVALID == 1'b0)) & (icmp_ln181_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state8 = ((icmp_ln181_fu_92_p2 == 1'd0) & (m_axi_bias3_RVALID == 1'b0));
end

assign bias3_buf_address0 = zext_ln182_fu_104_p1;

assign bias3_buf_d0 = bias3_addr_read_reg_123;

assign i_fu_98_p2 = (i_0_reg_69 + 5'd1);

assign icmp_ln181_fu_92_p2 = ((i_0_reg_69 == 5'd16) ? 1'b1 : 1'b0);

assign m_axi_bias3_ARADDR = zext_ln182_1_fu_81_p1;

assign m_axi_bias3_ARBURST = 2'd0;

assign m_axi_bias3_ARCACHE = 4'd0;

assign m_axi_bias3_ARID = 1'd0;

assign m_axi_bias3_ARLEN = 32'd16;

assign m_axi_bias3_ARLOCK = 2'd0;

assign m_axi_bias3_ARPROT = 3'd0;

assign m_axi_bias3_ARQOS = 4'd0;

assign m_axi_bias3_ARREGION = 4'd0;

assign m_axi_bias3_ARSIZE = 3'd0;

assign m_axi_bias3_ARUSER = 1'd0;

assign m_axi_bias3_AWADDR = 32'd0;

assign m_axi_bias3_AWBURST = 2'd0;

assign m_axi_bias3_AWCACHE = 4'd0;

assign m_axi_bias3_AWID = 1'd0;

assign m_axi_bias3_AWLEN = 32'd0;

assign m_axi_bias3_AWLOCK = 2'd0;

assign m_axi_bias3_AWPROT = 3'd0;

assign m_axi_bias3_AWQOS = 4'd0;

assign m_axi_bias3_AWREGION = 4'd0;

assign m_axi_bias3_AWSIZE = 3'd0;

assign m_axi_bias3_AWUSER = 1'd0;

assign m_axi_bias3_AWVALID = 1'b0;

assign m_axi_bias3_BREADY = 1'b0;

assign m_axi_bias3_WDATA = 32'd0;

assign m_axi_bias3_WID = 1'd0;

assign m_axi_bias3_WLAST = 1'b0;

assign m_axi_bias3_WSTRB = 4'd0;

assign m_axi_bias3_WUSER = 1'd0;

assign m_axi_bias3_WVALID = 1'b0;

assign zext_ln182_1_fu_81_p1 = bias3_offset;

assign zext_ln182_fu_104_p1 = i_0_reg_69;

endmodule //ld_bias3
