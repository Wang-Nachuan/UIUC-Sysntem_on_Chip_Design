// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module i_convolution5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weights_address0,
        weights_ce0,
        weights_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_0_0_address0,
        output_0_0_ce0,
        output_0_0_we0,
        output_0_0_d0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_pp0_stage0 = 17'd4;
parameter    ap_ST_fsm_pp0_stage1 = 17'd8;
parameter    ap_ST_fsm_pp0_stage2 = 17'd16;
parameter    ap_ST_fsm_pp0_stage3 = 17'd32;
parameter    ap_ST_fsm_pp0_stage4 = 17'd64;
parameter    ap_ST_fsm_state16 = 17'd128;
parameter    ap_ST_fsm_state17 = 17'd256;
parameter    ap_ST_fsm_state18 = 17'd512;
parameter    ap_ST_fsm_state19 = 17'd1024;
parameter    ap_ST_fsm_state20 = 17'd2048;
parameter    ap_ST_fsm_state21 = 17'd4096;
parameter    ap_ST_fsm_state22 = 17'd8192;
parameter    ap_ST_fsm_state23 = 17'd16384;
parameter    ap_ST_fsm_state24 = 17'd32768;
parameter    ap_ST_fsm_state25 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [15:0] weights_address0;
output   weights_ce0;
input  [31:0] weights_q0;
output  [6:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [6:0] output_0_0_address0;
output   output_0_0_ce0;
output   output_0_0_we0;
output  [31:0] output_0_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weights_ce0;
reg bias_ce0;
reg output_0_0_ce0;
reg output_0_0_we0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] indvar_flatten15_reg_151;
reg   [2:0] i_0_reg_162;
reg   [7:0] indvar_flatten_reg_173;
reg   [2:0] j_0_reg_184;
reg   [31:0] sum_2_reg_195;
reg   [4:0] ci_0_reg_207;
wire   [0:0] icmp_ln97_fu_232_p2;
wire    ap_CS_fsm_state2;
wire   [6:0] co_fu_238_p2;
reg   [6:0] co_reg_551;
wire   [63:0] zext_ln104_fu_244_p1;
reg   [63:0] zext_ln104_reg_556;
wire   [11:0] zext_ln100_fu_256_p1;
reg   [11:0] zext_ln100_reg_562;
wire   [0:0] icmp_ln100_fu_260_p2;
reg   [0:0] icmp_ln100_reg_567;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln100_reg_567_pp0_iter1_reg;
reg   [0:0] icmp_ln100_reg_567_pp0_iter2_reg;
wire   [8:0] add_ln100_fu_266_p2;
reg   [8:0] add_ln100_reg_571;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln101_fu_278_p2;
reg   [0:0] icmp_ln101_reg_576;
wire   [2:0] select_ln104_1_fu_292_p3;
reg   [2:0] select_ln104_1_reg_581;
wire   [2:0] select_ln104_3_fu_342_p3;
reg   [2:0] select_ln104_3_reg_587;
wire   [7:0] add_ln104_1_fu_376_p2;
reg   [7:0] add_ln104_1_reg_594;
wire   [11:0] add_ln104_4_fu_382_p2;
reg   [11:0] add_ln104_4_reg_600;
wire   [4:0] ci_fu_387_p2;
reg   [4:0] ci_reg_606;
wire   [7:0] add_ln101_1_fu_393_p2;
reg   [7:0] add_ln101_1_reg_611;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [16:0] add_ln104_8_fu_483_p2;
reg   [16:0] add_ln104_8_reg_621;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] input_load_reg_631;
reg   [31:0] weights_load_reg_636;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [7:0] select_ln101_fu_493_p3;
reg   [7:0] select_ln101_reg_641;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_state12_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] grp_fu_223_p2;
reg   [31:0] tmp_6_reg_646;
wire   [31:0] grp_fu_218_p2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state16;
reg   [31:0] bias_load_reg_661;
wire    ap_CS_fsm_state17;
reg   [31:0] sum_reg_666;
wire    ap_CS_fsm_state22;
wire   [31:0] sum_1_fu_540_p3;
reg   [31:0] sum_1_reg_673;
wire    ap_CS_fsm_state24;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage2_subdone;
reg   [6:0] co_0_reg_140;
wire    ap_CS_fsm_state25;
reg   [8:0] ap_phi_mux_indvar_flatten15_phi_fu_155_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_i_0_phi_fu_166_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_177_p4;
reg   [2:0] ap_phi_mux_j_0_phi_fu_188_p4;
wire   [31:0] ap_phi_mux_sum_2_phi_fu_199_p4;
reg   [4:0] ap_phi_mux_ci_0_phi_fu_211_p4;
wire   [63:0] zext_ln104_9_fu_430_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln104_12_fu_489_p1;
wire    ap_block_pp0_stage2;
reg   [31:0] grp_fu_218_p0;
reg   [31:0] grp_fu_218_p1;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_state18;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_state23;
wire   [10:0] tmp_9_fu_248_p3;
wire   [2:0] i_fu_272_p2;
wire   [0:0] icmp_ln102_fu_310_p2;
wire   [0:0] xor_ln104_fu_304_p2;
wire   [2:0] select_ln104_fu_284_p3;
wire   [0:0] and_ln104_fu_316_p2;
wire   [0:0] or_ln104_fu_328_p2;
wire   [2:0] j_fu_322_p2;
wire   [4:0] select_ln104_2_fu_334_p3;
wire   [6:0] tmp_10_fu_358_p3;
wire   [7:0] zext_ln104_7_fu_366_p1;
wire   [7:0] zext_ln104_6_fu_354_p1;
wire   [7:0] zext_ln104_2_fu_300_p1;
wire   [7:0] add_ln104_fu_370_p2;
wire   [11:0] zext_ln104_5_fu_350_p1;
wire   [9:0] p_shl5_cast_fu_411_p3;
wire   [9:0] zext_ln104_8_fu_408_p1;
wire   [9:0] zext_ln104_4_fu_405_p1;
wire   [9:0] add_ln104_2_fu_418_p2;
wire   [9:0] add_ln104_3_fu_424_p2;
wire   [13:0] tmp_12_fu_438_p3;
wire   [63:0] zext_ln104_11_fu_445_p1;
wire   [63:0] zext_ln104_10_fu_435_p1;
wire   [63:0] zext_ln104_1_fu_399_p1;
wire   [63:0] add_ln104_5_fu_449_p2;
wire   [63:0] add_ln104_6_fu_455_p2;
wire   [14:0] trunc_ln104_1_fu_465_p1;
wire   [16:0] p_shl_cast_fu_469_p3;
wire   [16:0] trunc_ln104_fu_461_p1;
wire   [16:0] zext_ln104_3_fu_402_p1;
wire   [16:0] add_ln104_7_fu_477_p2;
wire   [31:0] bitcast_ln108_fu_499_p1;
wire   [7:0] tmp_fu_502_p4;
wire   [22:0] trunc_ln108_fu_512_p1;
wire   [0:0] icmp_ln108_1_fu_522_p2;
wire   [0:0] icmp_ln108_fu_516_p2;
wire   [0:0] or_ln108_fu_528_p2;
wire   [0:0] grp_fu_227_p2;
wire   [0:0] and_ln108_fu_534_p2;
reg   [16:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

lenet_top_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_top_fadd_32bkb_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_218_p0),
    .din1(grp_fu_218_p1),
    .ce(1'b1),
    .dout(grp_fu_218_p2)
);

lenet_top_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_top_fmul_32cud_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_load_reg_636),
    .din1(input_load_reg_631),
    .ce(1'b1),
    .dout(grp_fu_223_p2)
);

lenet_top_fcmp_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
lenet_top_fcmp_32dEe_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_666),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_227_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln97_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln97_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_reg_567 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ci_0_reg_207 <= ci_reg_606;
    end else if (((icmp_ln97_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ci_0_reg_207 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        co_0_reg_140 <= co_reg_551;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        co_0_reg_140 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_reg_567 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_162 <= select_ln104_1_reg_581;
    end else if (((icmp_ln97_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_162 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_reg_567 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten15_reg_151 <= add_ln100_reg_571;
    end else if (((icmp_ln97_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten15_reg_151 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_reg_567 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_173 <= select_ln101_reg_641;
    end else if (((icmp_ln97_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_173 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_reg_567 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_reg_184 <= select_ln104_3_reg_587;
    end else if (((icmp_ln97_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_184 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_reg_567_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        sum_2_reg_195 <= grp_fu_218_p2;
    end else if (((icmp_ln97_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_2_reg_195 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln100_reg_571 <= add_ln100_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_260_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln101_1_reg_611 <= add_ln101_1_fu_393_p2;
        add_ln104_1_reg_594 <= add_ln104_1_fu_376_p2;
        add_ln104_4_reg_600 <= add_ln104_4_fu_382_p2;
        icmp_ln101_reg_576 <= icmp_ln101_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_reg_567 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln104_8_reg_621 <= add_ln104_8_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        bias_load_reg_661 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_260_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ci_reg_606 <= ci_fu_387_p2;
        select_ln104_1_reg_581 <= select_ln104_1_fu_292_p3;
        select_ln104_3_reg_587 <= select_ln104_3_fu_342_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_reg_551 <= co_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln100_reg_567 <= icmp_ln100_fu_260_p2;
        icmp_ln100_reg_567_pp0_iter1_reg <= icmp_ln100_reg_567;
        icmp_ln100_reg_567_pp0_iter2_reg <= icmp_ln100_reg_567_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_reg_567 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        input_load_reg_631 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_reg_567 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        select_ln101_reg_641 <= select_ln101_fu_493_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        sum_1_reg_673 <= sum_1_fu_540_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        sum_reg_666 <= grp_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_reg_567_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_6_reg_646 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_reg_567 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        weights_load_reg_636 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln100_reg_562[10 : 4] <= zext_ln100_fu_256_p1[10 : 4];
        zext_ln104_reg_556[6 : 0] <= zext_ln104_fu_244_p1[6 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln100_fu_260_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln97_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln100_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_ci_0_phi_fu_211_p4 = ci_reg_606;
    end else begin
        ap_phi_mux_ci_0_phi_fu_211_p4 = ci_0_reg_207;
    end
end

always @ (*) begin
    if (((icmp_ln100_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_166_p4 = select_ln104_1_reg_581;
    end else begin
        ap_phi_mux_i_0_phi_fu_166_p4 = i_0_reg_162;
    end
end

always @ (*) begin
    if (((icmp_ln100_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten15_phi_fu_155_p4 = add_ln100_reg_571;
    end else begin
        ap_phi_mux_indvar_flatten15_phi_fu_155_p4 = indvar_flatten15_reg_151;
    end
end

always @ (*) begin
    if (((icmp_ln100_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_177_p4 = select_ln101_reg_641;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_177_p4 = indvar_flatten_reg_173;
    end
end

always @ (*) begin
    if (((icmp_ln100_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_0_phi_fu_188_p4 = select_ln104_3_reg_587;
    end else begin
        ap_phi_mux_j_0_phi_fu_188_p4 = j_0_reg_184;
    end
end

always @ (*) begin
    if (((icmp_ln97_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_218_p0 = sum_2_reg_195;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_218_p0 = ap_phi_mux_sum_2_phi_fu_199_p4;
    end else begin
        grp_fu_218_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_218_p1 = bias_load_reg_661;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_218_p1 = tmp_6_reg_646;
    end else begin
        grp_fu_218_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        output_0_0_ce0 = 1'b1;
    end else begin
        output_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        output_0_0_we0 = 1'b1;
    end else begin
        output_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln97_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln100_fu_260_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln100_fu_260_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_266_p2 = (ap_phi_mux_indvar_flatten15_phi_fu_155_p4 + 9'd1);

assign add_ln101_1_fu_393_p2 = (8'd1 + ap_phi_mux_indvar_flatten_phi_fu_177_p4);

assign add_ln104_1_fu_376_p2 = (zext_ln104_2_fu_300_p1 + add_ln104_fu_370_p2);

assign add_ln104_2_fu_418_p2 = (p_shl5_cast_fu_411_p3 + zext_ln104_8_fu_408_p1);

assign add_ln104_3_fu_424_p2 = (zext_ln104_4_fu_405_p1 + add_ln104_2_fu_418_p2);

assign add_ln104_4_fu_382_p2 = (zext_ln104_5_fu_350_p1 + zext_ln100_reg_562);

assign add_ln104_5_fu_449_p2 = (zext_ln104_11_fu_445_p1 + zext_ln104_10_fu_435_p1);

assign add_ln104_6_fu_455_p2 = (zext_ln104_1_fu_399_p1 + add_ln104_5_fu_449_p2);

assign add_ln104_7_fu_477_p2 = (p_shl_cast_fu_469_p3 + trunc_ln104_fu_461_p1);

assign add_ln104_8_fu_483_p2 = (zext_ln104_3_fu_402_p1 + add_ln104_7_fu_477_p2);

assign add_ln104_fu_370_p2 = (zext_ln104_7_fu_366_p1 + zext_ln104_6_fu_354_p1);

assign and_ln104_fu_316_p2 = (xor_ln104_fu_304_p2 & icmp_ln102_fu_310_p2);

assign and_ln108_fu_534_p2 = (or_ln108_fu_528_p2 & grp_fu_227_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd16];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_sum_2_phi_fu_199_p4 = sum_2_reg_195;

assign bias_address0 = zext_ln104_reg_556;

assign bitcast_ln108_fu_499_p1 = sum_reg_666;

assign ci_fu_387_p2 = (5'd1 + select_ln104_2_fu_334_p3);

assign co_fu_238_p2 = (co_0_reg_140 + 7'd1);

assign i_fu_272_p2 = (3'd1 + ap_phi_mux_i_0_phi_fu_166_p4);

assign icmp_ln100_fu_260_p2 = ((ap_phi_mux_indvar_flatten15_phi_fu_155_p4 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln101_fu_278_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_177_p4 == 8'd80) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_310_p2 = ((ap_phi_mux_ci_0_phi_fu_211_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln108_1_fu_522_p2 = ((trunc_ln108_fu_512_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_516_p2 = ((tmp_fu_502_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_232_p2 = ((co_0_reg_140 == 7'd120) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln104_9_fu_430_p1;

assign j_fu_322_p2 = (3'd1 + select_ln104_fu_284_p3);

assign or_ln104_fu_328_p2 = (icmp_ln101_fu_278_p2 | and_ln104_fu_316_p2);

assign or_ln108_fu_528_p2 = (icmp_ln108_fu_516_p2 | icmp_ln108_1_fu_522_p2);

assign output_0_0_address0 = zext_ln104_reg_556;

assign output_0_0_d0 = sum_1_reg_673;

assign p_shl5_cast_fu_411_p3 = {{add_ln104_1_reg_594}, {2'd0}};

assign p_shl_cast_fu_469_p3 = {{trunc_ln104_1_fu_465_p1}, {2'd0}};

assign select_ln101_fu_493_p3 = ((icmp_ln101_reg_576[0:0] === 1'b1) ? 8'd1 : add_ln101_1_reg_611);

assign select_ln104_1_fu_292_p3 = ((icmp_ln101_fu_278_p2[0:0] === 1'b1) ? i_fu_272_p2 : ap_phi_mux_i_0_phi_fu_166_p4);

assign select_ln104_2_fu_334_p3 = ((or_ln104_fu_328_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_ci_0_phi_fu_211_p4);

assign select_ln104_3_fu_342_p3 = ((and_ln104_fu_316_p2[0:0] === 1'b1) ? j_fu_322_p2 : select_ln104_fu_284_p3);

assign select_ln104_fu_284_p3 = ((icmp_ln101_fu_278_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_j_0_phi_fu_188_p4);

assign sum_1_fu_540_p3 = ((and_ln108_fu_534_p2[0:0] === 1'b1) ? 32'd0 : sum_reg_666);

assign tmp_10_fu_358_p3 = {{select_ln104_2_fu_334_p3}, {2'd0}};

assign tmp_12_fu_438_p3 = {{add_ln104_4_reg_600}, {2'd0}};

assign tmp_9_fu_248_p3 = {{co_0_reg_140}, {4'd0}};

assign tmp_fu_502_p4 = {{bitcast_ln108_fu_499_p1[30:23]}};

assign trunc_ln104_1_fu_465_p1 = add_ln104_6_fu_455_p2[14:0];

assign trunc_ln104_fu_461_p1 = add_ln104_6_fu_455_p2[16:0];

assign trunc_ln108_fu_512_p1 = bitcast_ln108_fu_499_p1[22:0];

assign weights_address0 = zext_ln104_12_fu_489_p1;

assign xor_ln104_fu_304_p2 = (icmp_ln101_fu_278_p2 ^ 1'd1);

assign zext_ln100_fu_256_p1 = tmp_9_fu_248_p3;

assign zext_ln104_10_fu_435_p1 = add_ln104_4_reg_600;

assign zext_ln104_11_fu_445_p1 = tmp_12_fu_438_p3;

assign zext_ln104_12_fu_489_p1 = add_ln104_8_reg_621;

assign zext_ln104_1_fu_399_p1 = select_ln104_1_reg_581;

assign zext_ln104_2_fu_300_p1 = select_ln104_1_fu_292_p3;

assign zext_ln104_3_fu_402_p1 = select_ln104_3_reg_587;

assign zext_ln104_4_fu_405_p1 = select_ln104_3_reg_587;

assign zext_ln104_5_fu_350_p1 = select_ln104_2_fu_334_p3;

assign zext_ln104_6_fu_354_p1 = select_ln104_2_fu_334_p3;

assign zext_ln104_7_fu_366_p1 = tmp_10_fu_358_p3;

assign zext_ln104_8_fu_408_p1 = add_ln104_1_reg_594;

assign zext_ln104_9_fu_430_p1 = add_ln104_3_fu_424_p2;

assign zext_ln104_fu_244_p1 = co_0_reg_140;

always @ (posedge ap_clk) begin
    zext_ln104_reg_556[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln100_reg_562[3:0] <= 4'b0000;
    zext_ln100_reg_562[11] <= 1'b0;
end

endmodule //i_convolution5
