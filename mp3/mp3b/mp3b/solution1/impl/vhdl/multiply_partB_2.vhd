-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity multiply_partB_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_empty_n : IN STD_LOGIC;
    A_read : OUT STD_LOGIC;
    B_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    B_empty_n : IN STD_LOGIC;
    B_read : OUT STD_LOGIC;
    C_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_full_n : IN STD_LOGIC;
    C_write : OUT STD_LOGIC;
    mA : IN STD_LOGIC_VECTOR (31 downto 0);
    nA : IN STD_LOGIC_VECTOR (31 downto 0);
    mB : IN STD_LOGIC_VECTOR (31 downto 0);
    nB : IN STD_LOGIC_VECTOR (31 downto 0);
    mC : IN STD_LOGIC_VECTOR (31 downto 0);
    nC : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of multiply_partB_2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "multiply_partB_2,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=2300603,HLS_SYN_TPT=none,HLS_SYN_MEM=96,HLS_SYN_DSP=7,HLS_SYN_FF=539,HLS_SYN_LUT=1111,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln13_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln17_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_blk_n : STD_LOGIC;
    signal C_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal and_ln47_reg_1026 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal arrayB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln11_fu_362_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln11_reg_820 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_378_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_828 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln17_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_399_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_predicate_op70_read_state3 : BOOLEAN;
    signal ap_predicate_op72_read_state3 : BOOLEAN;
    signal ap_block_state3 : BOOLEAN;
    signal add_ln27_fu_432_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln27_reg_849 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_3_fu_448_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_857 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln35_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_862 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_469_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_870 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal and_ln35_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_875 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_fu_485_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln36_reg_883 : STD_LOGIC_VECTOR (13 downto 0);
    signal arrayC_addr_1_reg_891 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln35_1_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_1_reg_899 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln31_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal arrayC_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayC_load_1_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln35_2_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_2_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal mul_ln36_1_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal arrayC_load_2_reg_942 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln35_3_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_3_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal mul_ln36_2_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal arrayC_load_3_reg_966 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln35_4_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_4_reg_971 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal mul_ln36_3_reg_985 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal arrayC_load_4_reg_990 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_fu_692_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln42_fu_698_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln42_reg_1000 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_4_fu_714_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_4_reg_1008 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln47_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_1013 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_735_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_4_reg_1021 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal and_ln47_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayA_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal arrayA_ce0 : STD_LOGIC;
    signal arrayA_we0 : STD_LOGIC;
    signal arrayB_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal arrayB_ce0 : STD_LOGIC;
    signal arrayB_we0 : STD_LOGIC;
    signal arrayC_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal arrayC_ce0 : STD_LOGIC;
    signal arrayC_we0 : STD_LOGIC;
    signal arrayC_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_234 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_245 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_reg_257 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_268 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul1_reg_279 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_1_reg_291 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_0_0_reg_302 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_314 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul3_reg_325 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_2_reg_337 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state21 : BOOLEAN;
    signal zext_ln18_1_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_1_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_4_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_5_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_8_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_9_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_12_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_13_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_16_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_17_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln36_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_1_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_2_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_3_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln11_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln13_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln17_1_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_fu_415_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln18_fu_419_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln27_fu_438_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln29_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln35_1_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_4_fu_489_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_0_0_cast_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln35_2_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_3_fu_524_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln36_5_fu_528_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_766_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln31_fu_548_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_fu_554_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln35_3_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_7_fu_572_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln36_7_fu_576_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_774_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln31_1_fu_596_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_1_fu_602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln35_4_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_11_fu_620_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln36_9_fu_624_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_782_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln31_2_fu_644_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_2_fu_650_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln35_5_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_15_fu_668_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln36_11_fu_672_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_790_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln42_fu_704_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln44_fu_725_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln47_1_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln48_fu_751_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln48_fu_755_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_766_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_766_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_766_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_774_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_774_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_774_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_782_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_782_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_782_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_790_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_790_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_790_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_766_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_774_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_782_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_790_p00 : STD_LOGIC_VECTOR (13 downto 0);

    component multiply_partB_2_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component multiply_partB_2_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    arrayA_U : component multiply_partB_2_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayA_address0,
        ce0 => arrayA_ce0,
        we0 => arrayA_we0,
        d0 => A_dout,
        q0 => arrayA_q0);

    arrayB_U : component multiply_partB_2_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayB_address0,
        ce0 => arrayB_ce0,
        we0 => arrayB_we0,
        d0 => B_dout,
        q0 => arrayB_q0);

    arrayC_U : component multiply_partB_2_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arrayC_address0,
        ce0 => arrayC_ce0,
        we0 => arrayC_we0,
        d0 => arrayC_d0,
        q0 => arrayC_q0);

    multiply_partB_2_eOg_U1 : component multiply_partB_2_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_766_p0,
        din1 => grp_fu_766_p1,
        din2 => grp_fu_766_p2,
        dout => grp_fu_766_p3);

    multiply_partB_2_eOg_U2 : component multiply_partB_2_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_774_p0,
        din1 => grp_fu_774_p1,
        din2 => grp_fu_774_p2,
        dout => grp_fu_774_p3);

    multiply_partB_2_eOg_U3 : component multiply_partB_2_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_782_p0,
        din1 => grp_fu_782_p1,
        din2 => grp_fu_782_p2,
        dout => grp_fu_782_p3);

    multiply_partB_2_eOg_U4 : component multiply_partB_2_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_790_p0,
        din1 => grp_fu_790_p1,
        din2 => grp_fu_790_p2,
        dout => grp_fu_790_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = B_empty_n)) or ((ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = A_empty_n)))) and (icmp_ln13_fu_393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_234 <= i_reg_828;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_234 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_1_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_268 <= ap_const_lv7_0;
            elsif (((icmp_ln29_fu_463_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_reg_268 <= i_3_reg_857;
            end if; 
        end if;
    end process;

    i_2_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_2_reg_314 <= ap_const_lv7_0;
            elsif (((icmp_ln44_fu_729_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_2_reg_314 <= i_4_reg_1008;
            end if; 
        end if;
    end process;

    j_0_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = B_empty_n)) or ((ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = A_empty_n)))) and (icmp_ln13_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_reg_257 <= j_3_fu_399_p2;
            elsif (((icmp_ln11_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_257 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_1_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_504_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_1_reg_291 <= j_reg_870;
            elsif (((icmp_ln27_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_1_reg_291 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_2_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_lv1_1 = and_ln47_reg_1026) and (ap_const_logic_0 = C_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                j_2_reg_337 <= j_4_reg_1021;
            elsif (((icmp_ln42_fu_708_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                j_2_reg_337 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_463_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_0_0_reg_302 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                k_0_0_reg_302 <= add_ln31_fu_692_p2;
            end if; 
        end if;
    end process;

    phi_mul1_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul1_reg_279 <= ap_const_lv14_0;
            elsif (((icmp_ln29_fu_463_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul1_reg_279 <= add_ln27_reg_849;
            end if; 
        end if;
    end process;

    phi_mul3_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul3_reg_325 <= ap_const_lv14_0;
            elsif (((icmp_ln44_fu_729_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                phi_mul3_reg_325 <= add_ln42_reg_1000;
            end if; 
        end if;
    end process;

    phi_mul_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = B_empty_n)) or ((ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = A_empty_n)))) and (icmp_ln13_fu_393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_245 <= add_ln11_reg_820;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_245 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln11_reg_820 <= add_ln11_fu_362_p2;
                i_reg_828 <= i_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln27_reg_849 <= add_ln27_fu_432_p2;
                i_3_reg_857 <= i_3_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln42_reg_1000 <= add_ln42_fu_698_p2;
                i_4_reg_1008 <= i_4_fu_714_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_504_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                and_ln35_1_reg_899 <= and_ln35_1_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                and_ln35_2_reg_923 <= and_ln35_2_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                and_ln35_3_reg_947 <= and_ln35_3_fu_611_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                and_ln35_4_reg_971 <= and_ln35_4_fu_659_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_463_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                and_ln35_reg_875 <= and_ln35_fu_480_p2;
                arrayC_addr_1_reg_891 <= zext_ln36_1_fu_495_p1(14 - 1 downto 0);
                    zext_ln36_reg_883(6 downto 0) <= zext_ln36_fu_485_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_729_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                and_ln47_reg_1026 <= and_ln47_fu_746_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                arrayC_load_1_reg_918 <= arrayC_q0;
                mul_ln36_reg_913 <= grp_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                arrayC_load_2_reg_942 <= arrayC_q0;
                mul_ln36_1_reg_937 <= grp_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                arrayC_load_3_reg_966 <= arrayC_q0;
                mul_ln36_2_reg_961 <= grp_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                arrayC_load_4_reg_990 <= arrayC_q0;
                mul_ln36_3_reg_985 <= grp_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln17_reg_833 <= icmp_ln17_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                icmp_ln35_reg_862 <= icmp_ln35_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_708_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                icmp_ln47_reg_1013 <= icmp_ln47_fu_720_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                j_4_reg_1021 <= j_4_fu_735_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_reg_870 <= j_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_348 <= arrayA_q0;
                reg_352 <= arrayB_q0;
            end if;
        end if;
    end process;
    zext_ln36_reg_883(13 downto 7) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, A_empty_n, B_empty_n, C_full_n, ap_CS_fsm_state3, icmp_ln13_fu_393_p2, ap_CS_fsm_state21, and_ln47_reg_1026, ap_CS_fsm_state2, icmp_ln11_fu_372_p2, ap_predicate_op70_read_state3, ap_predicate_op72_read_state3, ap_CS_fsm_state4, icmp_ln27_fu_442_p2, ap_CS_fsm_state5, icmp_ln29_fu_463_p2, and_ln35_1_fu_515_p2, ap_CS_fsm_state6, icmp_ln31_fu_504_p2, and_ln35_2_fu_563_p2, ap_CS_fsm_state9, and_ln35_3_fu_611_p2, ap_CS_fsm_state12, and_ln35_4_fu_659_p2, ap_CS_fsm_state15, ap_CS_fsm_state19, icmp_ln42_fu_708_p2, ap_CS_fsm_state20, icmp_ln44_fu_729_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln11_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not((((ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = B_empty_n)) or ((ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = A_empty_n)))) and (icmp_ln13_fu_393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = B_empty_n)) or ((ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = A_empty_n)))) and (icmp_ln13_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln27_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln29_fu_463_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln31_fu_504_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((icmp_ln31_fu_504_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln35_1_fu_515_p2) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_lv1_0 = and_ln35_2_fu_563_p2) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_lv1_0 = and_ln35_3_fu_611_p2) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_lv1_0 = and_ln35_4_fu_659_p2) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln42_fu_708_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln44_fu_729_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if ((not(((ap_const_lv1_1 = and_ln47_reg_1026) and (ap_const_logic_0 = C_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_blk_n_assign_proc : process(A_empty_n, ap_CS_fsm_state3, icmp_ln13_fu_393_p2, and_ln17_fu_410_p2)
    begin
        if (((ap_const_lv1_1 = and_ln17_fu_410_p2) and (icmp_ln13_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_blk_n <= A_empty_n;
        else 
            A_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_read_assign_proc : process(A_empty_n, B_empty_n, ap_CS_fsm_state3, ap_predicate_op70_read_state3, ap_predicate_op72_read_state3)
    begin
        if ((not((((ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = B_empty_n)) or ((ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = A_empty_n)))) and (ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_read <= ap_const_logic_1;
        else 
            A_read <= ap_const_logic_0;
        end if; 
    end process;


    B_blk_n_assign_proc : process(B_empty_n, ap_CS_fsm_state3, icmp_ln13_fu_393_p2, and_ln17_fu_410_p2)
    begin
        if (((ap_const_lv1_1 = and_ln17_fu_410_p2) and (icmp_ln13_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            B_blk_n <= B_empty_n;
        else 
            B_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    B_read_assign_proc : process(A_empty_n, B_empty_n, ap_CS_fsm_state3, ap_predicate_op70_read_state3, ap_predicate_op72_read_state3)
    begin
        if ((not((((ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = B_empty_n)) or ((ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = A_empty_n)))) and (ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            B_read <= ap_const_logic_1;
        else 
            B_read <= ap_const_logic_0;
        end if; 
    end process;


    C_blk_n_assign_proc : process(C_full_n, ap_CS_fsm_state21, and_ln47_reg_1026)
    begin
        if (((ap_const_lv1_1 = and_ln47_reg_1026) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            C_blk_n <= C_full_n;
        else 
            C_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_din <= arrayC_q0;

    C_write_assign_proc : process(C_full_n, ap_CS_fsm_state21, and_ln47_reg_1026)
    begin
        if ((not(((ap_const_lv1_1 = and_ln47_reg_1026) and (ap_const_logic_0 = C_full_n))) and (ap_const_lv1_1 = and_ln47_reg_1026) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            C_write <= ap_const_logic_1;
        else 
            C_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln11_fu_362_p2 <= std_logic_vector(unsigned(phi_mul_reg_245) + unsigned(ap_const_lv14_64));
    add_ln18_fu_419_p2 <= std_logic_vector(unsigned(phi_mul_reg_245) + unsigned(zext_ln18_fu_415_p1));
    add_ln27_fu_432_p2 <= std_logic_vector(unsigned(phi_mul1_reg_279) + unsigned(ap_const_lv14_64));
    add_ln31_fu_692_p2 <= std_logic_vector(unsigned(k_0_0_reg_302) + unsigned(ap_const_lv7_4));
    add_ln36_11_fu_672_p2 <= std_logic_vector(unsigned(phi_mul1_reg_279) + unsigned(zext_ln36_15_fu_668_p1));
    add_ln36_1_fu_591_p2 <= std_logic_vector(unsigned(mul_ln36_1_reg_937) + unsigned(arrayC_load_2_reg_942));
    add_ln36_2_fu_639_p2 <= std_logic_vector(unsigned(mul_ln36_2_reg_961) + unsigned(arrayC_load_3_reg_966));
    add_ln36_3_fu_687_p2 <= std_logic_vector(unsigned(mul_ln36_3_reg_985) + unsigned(arrayC_load_4_reg_990));
    add_ln36_4_fu_489_p2 <= std_logic_vector(unsigned(phi_mul1_reg_279) + unsigned(zext_ln36_fu_485_p1));
    add_ln36_5_fu_528_p2 <= std_logic_vector(unsigned(phi_mul1_reg_279) + unsigned(zext_ln36_3_fu_524_p1));
    add_ln36_7_fu_576_p2 <= std_logic_vector(unsigned(phi_mul1_reg_279) + unsigned(zext_ln36_7_fu_572_p1));
    add_ln36_9_fu_624_p2 <= std_logic_vector(unsigned(phi_mul1_reg_279) + unsigned(zext_ln36_11_fu_620_p1));
    add_ln36_fu_543_p2 <= std_logic_vector(unsigned(mul_ln36_reg_913) + unsigned(arrayC_load_1_reg_918));
    add_ln42_fu_698_p2 <= std_logic_vector(unsigned(phi_mul3_reg_325) + unsigned(ap_const_lv14_64));
    add_ln48_fu_755_p2 <= std_logic_vector(unsigned(phi_mul3_reg_325) + unsigned(zext_ln48_fu_751_p1));
    and_ln17_fu_410_p2 <= (icmp_ln17_reg_833 and icmp_ln17_1_fu_405_p2);
    and_ln35_1_fu_515_p2 <= (icmp_ln35_2_fu_510_p2 and and_ln35_reg_875);
    and_ln35_2_fu_563_p2 <= (icmp_ln35_3_fu_558_p2 and and_ln35_reg_875);
    and_ln35_3_fu_611_p2 <= (icmp_ln35_4_fu_606_p2 and and_ln35_reg_875);
    and_ln35_4_fu_659_p2 <= (icmp_ln35_5_fu_654_p2 and and_ln35_reg_875);
    and_ln35_fu_480_p2 <= (icmp_ln35_reg_862 and icmp_ln35_1_fu_475_p2);
    and_ln47_fu_746_p2 <= (icmp_ln47_reg_1013 and icmp_ln47_1_fu_741_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state21_assign_proc : process(C_full_n, and_ln47_reg_1026)
    begin
                ap_block_state21 <= ((ap_const_lv1_1 = and_ln47_reg_1026) and (ap_const_logic_0 = C_full_n));
    end process;


    ap_block_state3_assign_proc : process(A_empty_n, B_empty_n, ap_predicate_op70_read_state3, ap_predicate_op72_read_state3)
    begin
                ap_block_state3 <= (((ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = B_empty_n)) or ((ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = A_empty_n)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state19, icmp_ln42_fu_708_p2)
    begin
        if (((icmp_ln42_fu_708_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op70_read_state3_assign_proc : process(icmp_ln13_fu_393_p2, and_ln17_fu_410_p2)
    begin
                ap_predicate_op70_read_state3 <= ((ap_const_lv1_1 = and_ln17_fu_410_p2) and (icmp_ln13_fu_393_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op72_read_state3_assign_proc : process(icmp_ln13_fu_393_p2, and_ln17_fu_410_p2)
    begin
                ap_predicate_op72_read_state3 <= ((ap_const_lv1_1 = and_ln17_fu_410_p2) and (icmp_ln13_fu_393_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, icmp_ln42_fu_708_p2)
    begin
        if (((icmp_ln42_fu_708_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    arrayA_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state15, zext_ln18_1_fu_425_p1, zext_ln36_4_fu_534_p1, zext_ln36_8_fu_582_p1, zext_ln36_12_fu_630_p1, zext_ln36_16_fu_678_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            arrayA_address0 <= zext_ln36_16_fu_678_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            arrayA_address0 <= zext_ln36_12_fu_630_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            arrayA_address0 <= zext_ln36_8_fu_582_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            arrayA_address0 <= zext_ln36_4_fu_534_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            arrayA_address0 <= zext_ln18_1_fu_425_p1(14 - 1 downto 0);
        else 
            arrayA_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    arrayA_ce0_assign_proc : process(A_empty_n, B_empty_n, ap_CS_fsm_state3, ap_predicate_op70_read_state3, ap_predicate_op72_read_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (not((((ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = B_empty_n)) or ((ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = A_empty_n)))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            arrayA_ce0 <= ap_const_logic_1;
        else 
            arrayA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arrayA_we0_assign_proc : process(A_empty_n, B_empty_n, ap_CS_fsm_state3, icmp_ln13_fu_393_p2, and_ln17_fu_410_p2, ap_predicate_op70_read_state3, ap_predicate_op72_read_state3)
    begin
        if ((not((((ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = B_empty_n)) or ((ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = A_empty_n)))) and (ap_const_lv1_1 = and_ln17_fu_410_p2) and (icmp_ln13_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            arrayA_we0 <= ap_const_logic_1;
        else 
            arrayA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    arrayB_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state15, zext_ln18_1_fu_425_p1, zext_ln36_5_fu_539_p1, zext_ln36_9_fu_587_p1, zext_ln36_13_fu_635_p1, zext_ln36_17_fu_683_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            arrayB_address0 <= zext_ln36_17_fu_683_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            arrayB_address0 <= zext_ln36_13_fu_635_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            arrayB_address0 <= zext_ln36_9_fu_587_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            arrayB_address0 <= zext_ln36_5_fu_539_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            arrayB_address0 <= zext_ln18_1_fu_425_p1(14 - 1 downto 0);
        else 
            arrayB_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    arrayB_ce0_assign_proc : process(A_empty_n, B_empty_n, ap_CS_fsm_state3, ap_predicate_op70_read_state3, ap_predicate_op72_read_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (not((((ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = B_empty_n)) or ((ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = A_empty_n)))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            arrayB_ce0 <= ap_const_logic_1;
        else 
            arrayB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arrayB_we0_assign_proc : process(A_empty_n, B_empty_n, ap_CS_fsm_state3, icmp_ln13_fu_393_p2, and_ln17_fu_410_p2, ap_predicate_op70_read_state3, ap_predicate_op72_read_state3)
    begin
        if ((not((((ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = B_empty_n)) or ((ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = A_empty_n)))) and (ap_const_lv1_1 = and_ln17_fu_410_p2) and (icmp_ln13_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            arrayB_we0 <= ap_const_logic_1;
        else 
            arrayB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    arrayC_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state16, arrayC_addr_1_reg_891, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state20, zext_ln18_1_fu_425_p1, zext_ln48_1_fu_761_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            arrayC_address0 <= zext_ln48_1_fu_761_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            arrayC_address0 <= arrayC_addr_1_reg_891;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            arrayC_address0 <= zext_ln18_1_fu_425_p1(14 - 1 downto 0);
        else 
            arrayC_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    arrayC_ce0_assign_proc : process(A_empty_n, B_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_predicate_op70_read_state3, ap_predicate_op72_read_state3, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (not((((ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = B_empty_n)) or ((ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = A_empty_n)))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            arrayC_ce0 <= ap_const_logic_1;
        else 
            arrayC_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arrayC_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state18, add_ln36_fu_543_p2, add_ln36_1_fu_591_p2, add_ln36_2_fu_639_p2, add_ln36_3_fu_687_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            arrayC_d0 <= add_ln36_3_fu_687_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            arrayC_d0 <= add_ln36_2_fu_639_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            arrayC_d0 <= add_ln36_1_fu_591_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            arrayC_d0 <= add_ln36_fu_543_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            arrayC_d0 <= ap_const_lv32_0;
        else 
            arrayC_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    arrayC_we0_assign_proc : process(A_empty_n, B_empty_n, ap_CS_fsm_state3, icmp_ln13_fu_393_p2, and_ln17_fu_410_p2, ap_predicate_op70_read_state3, ap_predicate_op72_read_state3, and_ln35_1_reg_899, and_ln35_2_reg_923, ap_CS_fsm_state9, and_ln35_3_reg_947, ap_CS_fsm_state12, and_ln35_4_reg_971, ap_CS_fsm_state15, ap_CS_fsm_state18)
    begin
        if (((not((((ap_predicate_op72_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = B_empty_n)) or ((ap_predicate_op70_read_state3 = ap_const_boolean_1) and (ap_const_logic_0 = A_empty_n)))) and (ap_const_lv1_1 = and_ln17_fu_410_p2) and (icmp_ln13_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = and_ln35_4_reg_971) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = and_ln35_3_reg_947) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = and_ln35_2_reg_923) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = and_ln35_1_reg_899) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            arrayC_we0 <= ap_const_logic_1;
        else 
            arrayC_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_356_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_352) * signed(reg_348))), 32));
    grp_fu_766_p0 <= grp_fu_766_p00(7 - 1 downto 0);
    grp_fu_766_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_302),14));
    grp_fu_766_p1 <= ap_const_lv14_64(8 - 1 downto 0);
    grp_fu_766_p2 <= zext_ln36_reg_883(7 - 1 downto 0);
    grp_fu_774_p0 <= grp_fu_774_p00(7 - 1 downto 0);
    grp_fu_774_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_fu_548_p2),14));
    grp_fu_774_p1 <= ap_const_lv14_64(8 - 1 downto 0);
    grp_fu_774_p2 <= zext_ln36_reg_883(7 - 1 downto 0);
    grp_fu_782_p0 <= grp_fu_782_p00(7 - 1 downto 0);
    grp_fu_782_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_1_fu_596_p2),14));
    grp_fu_782_p1 <= ap_const_lv14_64(8 - 1 downto 0);
    grp_fu_782_p2 <= zext_ln36_reg_883(7 - 1 downto 0);
    grp_fu_790_p0 <= grp_fu_790_p00(7 - 1 downto 0);
    grp_fu_790_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_2_fu_644_p2),14));
    grp_fu_790_p1 <= ap_const_lv14_64(8 - 1 downto 0);
    grp_fu_790_p2 <= zext_ln36_reg_883(7 - 1 downto 0);
    i_3_fu_448_p2 <= std_logic_vector(unsigned(i_1_reg_268) + unsigned(ap_const_lv7_1));
    i_4_fu_714_p2 <= std_logic_vector(unsigned(i_2_reg_314) + unsigned(ap_const_lv7_1));
    i_fu_378_p2 <= std_logic_vector(unsigned(i_0_reg_234) + unsigned(ap_const_lv7_1));
    icmp_ln11_fu_372_p2 <= "1" when (i_0_reg_234 = ap_const_lv7_64) else "0";
    icmp_ln13_fu_393_p2 <= "1" when (j_0_reg_257 = ap_const_lv7_64) else "0";
    icmp_ln17_1_fu_405_p2 <= "1" when (signed(zext_ln13_fu_389_p1) < signed(nC)) else "0";
    icmp_ln17_fu_384_p2 <= "1" when (signed(zext_ln11_fu_368_p1) < signed(mC)) else "0";
    icmp_ln27_fu_442_p2 <= "1" when (i_1_reg_268 = ap_const_lv7_64) else "0";
    icmp_ln29_fu_463_p2 <= "1" when (j_1_reg_291 = ap_const_lv7_64) else "0";
    icmp_ln31_fu_504_p2 <= "1" when (k_0_0_reg_302 = ap_const_lv7_64) else "0";
    icmp_ln35_1_fu_475_p2 <= "1" when (signed(zext_ln29_fu_459_p1) < signed(nC)) else "0";
    icmp_ln35_2_fu_510_p2 <= "1" when (signed(k_0_0_cast_fu_500_p1) < signed(nA)) else "0";
    icmp_ln35_3_fu_558_p2 <= "1" when (signed(zext_ln31_fu_554_p1) < signed(nA)) else "0";
    icmp_ln35_4_fu_606_p2 <= "1" when (signed(zext_ln31_1_fu_602_p1) < signed(nA)) else "0";
    icmp_ln35_5_fu_654_p2 <= "1" when (signed(zext_ln31_2_fu_650_p1) < signed(nA)) else "0";
    icmp_ln35_fu_454_p2 <= "1" when (signed(zext_ln27_fu_438_p1) < signed(mC)) else "0";
    icmp_ln42_fu_708_p2 <= "1" when (i_2_reg_314 = ap_const_lv7_64) else "0";
    icmp_ln44_fu_729_p2 <= "1" when (j_2_reg_337 = ap_const_lv7_64) else "0";
    icmp_ln47_1_fu_741_p2 <= "1" when (signed(zext_ln44_fu_725_p1) < signed(nC)) else "0";
    icmp_ln47_fu_720_p2 <= "1" when (signed(zext_ln42_fu_704_p1) < signed(mC)) else "0";
    j_3_fu_399_p2 <= std_logic_vector(unsigned(j_0_reg_257) + unsigned(ap_const_lv7_1));
    j_4_fu_735_p2 <= std_logic_vector(unsigned(j_2_reg_337) + unsigned(ap_const_lv7_1));
    j_fu_469_p2 <= std_logic_vector(unsigned(j_1_reg_291) + unsigned(ap_const_lv7_1));
    k_0_0_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_302),32));
    or_ln31_1_fu_596_p2 <= (k_0_0_reg_302 or ap_const_lv7_2);
    or_ln31_2_fu_644_p2 <= (k_0_0_reg_302 or ap_const_lv7_3);
    or_ln31_fu_548_p2 <= (k_0_0_reg_302 or ap_const_lv7_1);
    zext_ln11_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_234),32));
    zext_ln13_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_257),32));
    zext_ln18_1_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_419_p2),64));
    zext_ln18_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_257),14));
    zext_ln27_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_268),32));
    zext_ln29_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_291),32));
    zext_ln31_1_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_1_fu_596_p2),32));
    zext_ln31_2_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_2_fu_644_p2),32));
    zext_ln31_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_fu_548_p2),32));
    zext_ln36_11_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_1_fu_596_p2),14));
    zext_ln36_12_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_9_fu_624_p2),64));
    zext_ln36_13_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_782_p3),64));
    zext_ln36_15_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_2_fu_644_p2),14));
    zext_ln36_16_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_11_fu_672_p2),64));
    zext_ln36_17_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_790_p3),64));
    zext_ln36_1_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_4_fu_489_p2),64));
    zext_ln36_3_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_302),14));
    zext_ln36_4_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_5_fu_528_p2),64));
    zext_ln36_5_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_766_p3),64));
    zext_ln36_7_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_fu_548_p2),14));
    zext_ln36_8_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_7_fu_576_p2),64));
    zext_ln36_9_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_774_p3),64));
    zext_ln36_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_291),14));
    zext_ln42_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_314),32));
    zext_ln44_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_337),32));
    zext_ln48_1_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_fu_755_p2),64));
    zext_ln48_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_337),14));
end behav;
