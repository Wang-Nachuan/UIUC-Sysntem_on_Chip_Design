// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="multiply_a23,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=2270201,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=454,HLS_SYN_LUT=737,HLS_VERSION=2019_1}" *)

module multiply_a23 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        mA,
        nA,
        mB,
        nB,
        mC,
        nC
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [13:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [13:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
input  [31:0] mA;
input  [31:0] nA;
input  [31:0] mB;
input  [31:0] nB;
input  [31:0] mC;
input  [31:0] nC;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] A_address0;
reg A_ce0;
reg[13:0] B_address0;
reg B_ce0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [31:0] reg_248;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state14;
reg  signed [31:0] reg_252;
wire   [13:0] add_ln4_fu_268_p2;
reg   [13:0] add_ln4_reg_595;
wire    ap_CS_fsm_state2;
wire   [6:0] i_fu_284_p2;
reg   [6:0] i_reg_603;
wire   [0:0] icmp_ln4_fu_278_p2;
wire   [0:0] icmp_ln17_fu_290_p2;
reg   [0:0] icmp_ln17_reg_612;
wire   [13:0] add_ln8_fu_300_p2;
reg   [13:0] add_ln8_reg_617;
wire    ap_CS_fsm_state3;
wire   [6:0] j_fu_316_p2;
reg   [6:0] j_reg_625;
wire   [13:0] zext_ln11_fu_322_p1;
reg   [13:0] zext_ln11_reg_630;
wire   [0:0] icmp_ln8_fu_310_p2;
reg   [13:0] C_addr_1_reg_638;
wire   [0:0] and_ln17_fu_342_p2;
reg   [0:0] and_ln17_reg_643;
wire   [0:0] and_ln17_1_fu_362_p2;
reg   [0:0] and_ln17_1_reg_654;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln13_fu_351_p2;
wire   [31:0] grp_fu_256_p2;
reg   [31:0] mul_ln18_reg_668;
wire    ap_CS_fsm_state6;
reg   [31:0] C_load_reg_673;
wire   [0:0] and_ln17_2_fu_410_p2;
reg   [0:0] and_ln17_2_reg_678;
wire    ap_CS_fsm_state7;
reg   [31:0] mul_ln18_1_reg_692;
wire    ap_CS_fsm_state9;
reg   [31:0] C_load_1_reg_697;
wire   [0:0] and_ln17_3_fu_458_p2;
reg   [0:0] and_ln17_3_reg_702;
wire    ap_CS_fsm_state10;
reg   [31:0] mul_ln18_2_reg_716;
wire    ap_CS_fsm_state12;
reg   [31:0] C_load_2_reg_721;
wire   [0:0] and_ln17_4_fu_506_p2;
reg   [0:0] and_ln17_4_reg_726;
wire    ap_CS_fsm_state13;
reg   [31:0] mul_ln18_3_reg_740;
wire    ap_CS_fsm_state15;
reg   [31:0] C_load_3_reg_745;
wire   [6:0] add_ln13_fu_539_p2;
wire    ap_CS_fsm_state16;
reg   [6:0] i_0_reg_191;
reg   [13:0] phi_mul1_reg_202;
reg   [6:0] j_0_reg_214;
reg   [13:0] phi_mul_reg_225;
reg   [6:0] k_0_0_reg_236;
wire   [63:0] zext_ln18_fu_332_p1;
wire   [63:0] zext_ln18_3_fu_381_p1;
wire   [63:0] zext_ln18_4_fu_386_p1;
wire   [63:0] zext_ln18_7_fu_429_p1;
wire   [63:0] zext_ln18_8_fu_434_p1;
wire   [63:0] zext_ln18_11_fu_477_p1;
wire   [63:0] zext_ln18_12_fu_482_p1;
wire   [63:0] zext_ln18_15_fu_525_p1;
wire   [63:0] zext_ln18_16_fu_530_p1;
wire   [31:0] add_ln18_fu_390_p2;
wire   [31:0] add_ln18_1_fu_438_p2;
wire   [31:0] add_ln18_2_fu_486_p2;
wire   [31:0] add_ln18_3_fu_534_p2;
wire   [31:0] zext_ln4_fu_274_p1;
wire   [13:0] add_ln18_4_fu_326_p2;
wire   [31:0] zext_ln8_fu_306_p1;
wire   [0:0] icmp_ln17_1_fu_337_p2;
wire   [31:0] k_0_0_cast_fu_347_p1;
wire   [0:0] icmp_ln17_2_fu_357_p2;
wire   [13:0] zext_ln18_2_fu_371_p1;
wire   [13:0] add_ln18_5_fu_375_p2;
wire   [13:0] grp_fu_545_p3;
wire   [6:0] or_ln13_fu_395_p2;
wire   [31:0] zext_ln13_fu_401_p1;
wire   [0:0] icmp_ln17_3_fu_405_p2;
wire   [13:0] zext_ln18_6_fu_419_p1;
wire   [13:0] add_ln18_7_fu_423_p2;
wire   [13:0] grp_fu_553_p3;
wire   [6:0] or_ln13_1_fu_443_p2;
wire   [31:0] zext_ln13_1_fu_449_p1;
wire   [0:0] icmp_ln17_4_fu_453_p2;
wire   [13:0] zext_ln18_10_fu_467_p1;
wire   [13:0] add_ln18_9_fu_471_p2;
wire   [13:0] grp_fu_561_p3;
wire   [6:0] or_ln13_2_fu_491_p2;
wire   [31:0] zext_ln13_2_fu_497_p1;
wire   [0:0] icmp_ln17_5_fu_501_p2;
wire   [13:0] zext_ln18_14_fu_515_p1;
wire   [13:0] add_ln18_11_fu_519_p2;
wire   [13:0] grp_fu_569_p3;
wire   [6:0] grp_fu_545_p0;
wire   [7:0] grp_fu_545_p1;
wire   [6:0] grp_fu_545_p2;
wire   [6:0] grp_fu_553_p0;
wire   [7:0] grp_fu_553_p1;
wire   [6:0] grp_fu_553_p2;
wire   [6:0] grp_fu_561_p0;
wire   [7:0] grp_fu_561_p1;
wire   [6:0] grp_fu_561_p2;
wire   [6:0] grp_fu_569_p0;
wire   [7:0] grp_fu_569_p1;
wire   [6:0] grp_fu_569_p2;
reg   [15:0] ap_NS_fsm;
wire   [13:0] grp_fu_545_p00;
wire   [13:0] grp_fu_553_p00;
wire   [13:0] grp_fu_561_p00;
wire   [13:0] grp_fu_569_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

multiply_a23_mac_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
multiply_a23_mac_bkb_U1(
    .din0(grp_fu_545_p0),
    .din1(grp_fu_545_p1),
    .din2(grp_fu_545_p2),
    .dout(grp_fu_545_p3)
);

multiply_a23_mac_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
multiply_a23_mac_bkb_U2(
    .din0(grp_fu_553_p0),
    .din1(grp_fu_553_p1),
    .din2(grp_fu_553_p2),
    .dout(grp_fu_553_p3)
);

multiply_a23_mac_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
multiply_a23_mac_bkb_U3(
    .din0(grp_fu_561_p0),
    .din1(grp_fu_561_p1),
    .din2(grp_fu_561_p2),
    .dout(grp_fu_561_p3)
);

multiply_a23_mac_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
multiply_a23_mac_bkb_U4(
    .din0(grp_fu_569_p0),
    .din1(grp_fu_569_p1),
    .din2(grp_fu_569_p2),
    .dout(grp_fu_569_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln8_fu_310_p2 == 1'd1))) begin
        i_0_reg_191 <= i_reg_603;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_191 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_351_p2 == 1'd1))) begin
        j_0_reg_214 <= j_reg_625;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4_fu_278_p2 == 1'd0))) begin
        j_0_reg_214 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        k_0_0_reg_236 <= add_ln13_fu_539_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln8_fu_310_p2 == 1'd0))) begin
        k_0_0_reg_236 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln8_fu_310_p2 == 1'd1))) begin
        phi_mul1_reg_202 <= add_ln4_reg_595;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul1_reg_202 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_351_p2 == 1'd1))) begin
        phi_mul_reg_225 <= add_ln8_reg_617;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4_fu_278_p2 == 1'd0))) begin
        phi_mul_reg_225 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln8_fu_310_p2 == 1'd0))) begin
        C_addr_1_reg_638 <= zext_ln18_fu_332_p1;
        and_ln17_reg_643 <= and_ln17_fu_342_p2;
        zext_ln11_reg_630[6 : 0] <= zext_ln11_fu_322_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        C_load_1_reg_697 <= C_q0;
        mul_ln18_1_reg_692 <= grp_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        C_load_2_reg_721 <= C_q0;
        mul_ln18_2_reg_716 <= grp_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        C_load_3_reg_745 <= C_q0;
        mul_ln18_3_reg_740 <= grp_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_load_reg_673 <= C_q0;
        mul_ln18_reg_668 <= grp_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln4_reg_595 <= add_ln4_fu_268_p2;
        i_reg_603 <= i_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln8_reg_617 <= add_ln8_fu_300_p2;
        j_reg_625 <= j_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_351_p2 == 1'd0))) begin
        and_ln17_1_reg_654 <= and_ln17_1_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        and_ln17_2_reg_678 <= and_ln17_2_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        and_ln17_3_reg_702 <= and_ln17_3_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        and_ln17_4_reg_726 <= and_ln17_4_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4_fu_278_p2 == 1'd0))) begin
        icmp_ln17_reg_612 <= icmp_ln17_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_248 <= A_q0;
        reg_252 <= B_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        A_address0 = zext_ln18_15_fu_525_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address0 = zext_ln18_11_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address0 = zext_ln18_7_fu_429_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = zext_ln18_3_fu_381_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        B_address0 = zext_ln18_16_fu_530_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        B_address0 = zext_ln18_12_fu_482_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        B_address0 = zext_ln18_8_fu_434_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address0 = zext_ln18_4_fu_386_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        C_d0 = add_ln18_3_fu_534_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        C_d0 = add_ln18_2_fu_486_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        C_d0 = add_ln18_1_fu_438_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        C_d0 = add_ln18_fu_390_p2;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln17_4_reg_726)) | ((1'b1 == ap_CS_fsm_state13) & (1'd1 == and_ln17_3_reg_702)) | ((1'b1 == ap_CS_fsm_state10) & (1'd1 == and_ln17_2_reg_678)) | ((1'b1 == ap_CS_fsm_state7) & (1'd1 == and_ln17_1_reg_654)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4_fu_278_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4_fu_278_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4_fu_278_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln8_fu_310_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_351_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_351_p2 == 1'd0) & (1'd0 == and_ln17_1_fu_362_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == and_ln17_2_fu_410_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == and_ln17_3_fu_458_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == and_ln17_4_fu_506_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_address0 = C_addr_1_reg_638;

assign add_ln13_fu_539_p2 = (k_0_0_reg_236 + 7'd4);

assign add_ln18_11_fu_519_p2 = (phi_mul1_reg_202 + zext_ln18_14_fu_515_p1);

assign add_ln18_1_fu_438_p2 = (mul_ln18_1_reg_692 + C_load_1_reg_697);

assign add_ln18_2_fu_486_p2 = (mul_ln18_2_reg_716 + C_load_2_reg_721);

assign add_ln18_3_fu_534_p2 = (mul_ln18_3_reg_740 + C_load_3_reg_745);

assign add_ln18_4_fu_326_p2 = (phi_mul1_reg_202 + zext_ln11_fu_322_p1);

assign add_ln18_5_fu_375_p2 = (phi_mul1_reg_202 + zext_ln18_2_fu_371_p1);

assign add_ln18_7_fu_423_p2 = (phi_mul1_reg_202 + zext_ln18_6_fu_419_p1);

assign add_ln18_9_fu_471_p2 = (phi_mul1_reg_202 + zext_ln18_10_fu_467_p1);

assign add_ln18_fu_390_p2 = (mul_ln18_reg_668 + C_load_reg_673);

assign add_ln4_fu_268_p2 = (phi_mul1_reg_202 + 14'd100);

assign add_ln8_fu_300_p2 = (phi_mul_reg_225 + 14'd100);

assign and_ln17_1_fu_362_p2 = (icmp_ln17_2_fu_357_p2 & and_ln17_reg_643);

assign and_ln17_2_fu_410_p2 = (icmp_ln17_3_fu_405_p2 & and_ln17_reg_643);

assign and_ln17_3_fu_458_p2 = (icmp_ln17_4_fu_453_p2 & and_ln17_reg_643);

assign and_ln17_4_fu_506_p2 = (icmp_ln17_5_fu_501_p2 & and_ln17_reg_643);

assign and_ln17_fu_342_p2 = (icmp_ln17_reg_612 & icmp_ln17_1_fu_337_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_256_p2 = ($signed(reg_252) * $signed(reg_248));

assign grp_fu_545_p0 = grp_fu_545_p00;

assign grp_fu_545_p00 = k_0_0_reg_236;

assign grp_fu_545_p1 = 14'd100;

assign grp_fu_545_p2 = zext_ln11_reg_630;

assign grp_fu_553_p0 = grp_fu_553_p00;

assign grp_fu_553_p00 = or_ln13_fu_395_p2;

assign grp_fu_553_p1 = 14'd100;

assign grp_fu_553_p2 = zext_ln11_reg_630;

assign grp_fu_561_p0 = grp_fu_561_p00;

assign grp_fu_561_p00 = or_ln13_1_fu_443_p2;

assign grp_fu_561_p1 = 14'd100;

assign grp_fu_561_p2 = zext_ln11_reg_630;

assign grp_fu_569_p0 = grp_fu_569_p00;

assign grp_fu_569_p00 = or_ln13_2_fu_491_p2;

assign grp_fu_569_p1 = 14'd100;

assign grp_fu_569_p2 = zext_ln11_reg_630;

assign i_fu_284_p2 = (i_0_reg_191 + 7'd1);

assign icmp_ln13_fu_351_p2 = ((k_0_0_reg_236 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln17_1_fu_337_p2 = (($signed(zext_ln8_fu_306_p1) < $signed(nC)) ? 1'b1 : 1'b0);

assign icmp_ln17_2_fu_357_p2 = (($signed(k_0_0_cast_fu_347_p1) < $signed(nA)) ? 1'b1 : 1'b0);

assign icmp_ln17_3_fu_405_p2 = (($signed(zext_ln13_fu_401_p1) < $signed(nA)) ? 1'b1 : 1'b0);

assign icmp_ln17_4_fu_453_p2 = (($signed(zext_ln13_1_fu_449_p1) < $signed(nA)) ? 1'b1 : 1'b0);

assign icmp_ln17_5_fu_501_p2 = (($signed(zext_ln13_2_fu_497_p1) < $signed(nA)) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_290_p2 = (($signed(zext_ln4_fu_274_p1) < $signed(mC)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_278_p2 = ((i_0_reg_191 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_310_p2 = ((j_0_reg_214 == 7'd100) ? 1'b1 : 1'b0);

assign j_fu_316_p2 = (j_0_reg_214 + 7'd1);

assign k_0_0_cast_fu_347_p1 = k_0_0_reg_236;

assign or_ln13_1_fu_443_p2 = (k_0_0_reg_236 | 7'd2);

assign or_ln13_2_fu_491_p2 = (k_0_0_reg_236 | 7'd3);

assign or_ln13_fu_395_p2 = (k_0_0_reg_236 | 7'd1);

assign zext_ln11_fu_322_p1 = j_0_reg_214;

assign zext_ln13_1_fu_449_p1 = or_ln13_1_fu_443_p2;

assign zext_ln13_2_fu_497_p1 = or_ln13_2_fu_491_p2;

assign zext_ln13_fu_401_p1 = or_ln13_fu_395_p2;

assign zext_ln18_10_fu_467_p1 = or_ln13_1_fu_443_p2;

assign zext_ln18_11_fu_477_p1 = add_ln18_9_fu_471_p2;

assign zext_ln18_12_fu_482_p1 = grp_fu_561_p3;

assign zext_ln18_14_fu_515_p1 = or_ln13_2_fu_491_p2;

assign zext_ln18_15_fu_525_p1 = add_ln18_11_fu_519_p2;

assign zext_ln18_16_fu_530_p1 = grp_fu_569_p3;

assign zext_ln18_2_fu_371_p1 = k_0_0_reg_236;

assign zext_ln18_3_fu_381_p1 = add_ln18_5_fu_375_p2;

assign zext_ln18_4_fu_386_p1 = grp_fu_545_p3;

assign zext_ln18_6_fu_419_p1 = or_ln13_fu_395_p2;

assign zext_ln18_7_fu_429_p1 = add_ln18_7_fu_423_p2;

assign zext_ln18_8_fu_434_p1 = grp_fu_553_p3;

assign zext_ln18_fu_332_p1 = add_ln18_4_fu_326_p2;

assign zext_ln4_fu_274_p1 = i_0_reg_191;

assign zext_ln8_fu_306_p1 = j_0_reg_214;

always @ (posedge ap_clk) begin
    zext_ln11_reg_630[13:7] <= 7'b0000000;
end

endmodule //multiply_a23
