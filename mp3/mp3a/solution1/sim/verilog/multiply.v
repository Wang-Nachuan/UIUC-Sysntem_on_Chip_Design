// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="multiply,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=3020201,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=257,HLS_SYN_LUT=376,HLS_VERSION=2019_1}" *)

module multiply (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        mA,
        nA,
        mB,
        nB,
        mC,
        nC
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [13:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [13:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
input  [31:0] mA;
input  [31:0] nA;
input  [31:0] mB;
input  [31:0] nB;
input  [31:0] mC;
input  [31:0] nC;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] add_ln4_fu_154_p2;
reg   [13:0] add_ln4_reg_303;
wire    ap_CS_fsm_state2;
wire   [6:0] i_fu_170_p2;
reg   [6:0] i_reg_311;
wire   [0:0] icmp_ln7_fu_176_p2;
reg   [0:0] icmp_ln7_reg_316;
wire   [0:0] icmp_ln4_fu_164_p2;
wire   [6:0] j_fu_191_p2;
reg   [6:0] j_reg_324;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln7_1_fu_197_p2;
reg   [0:0] icmp_ln7_1_reg_329;
wire   [0:0] icmp_ln5_fu_185_p2;
wire   [13:0] zext_ln8_fu_202_p1;
reg   [13:0] zext_ln8_reg_334;
reg   [13:0] C_addr_reg_339;
wire   [6:0] k_fu_227_p2;
reg   [6:0] k_reg_347;
wire    ap_CS_fsm_state4;
wire   [0:0] and_ln7_1_fu_243_p2;
reg   [0:0] and_ln7_1_reg_352;
wire   [0:0] icmp_ln6_fu_221_p2;
wire   [13:0] add_ln7_fu_248_p2;
reg   [13:0] add_ln7_reg_356;
reg  signed [31:0] A_load_reg_371;
wire    ap_CS_fsm_state5;
reg  signed [31:0] B_load_reg_376;
wire   [31:0] mul_ln8_fu_279_p2;
reg   [31:0] mul_ln8_reg_381;
wire    ap_CS_fsm_state6;
reg   [31:0] C_load_reg_386;
reg   [6:0] i_0_reg_98;
reg   [13:0] phi_mul1_reg_109;
reg   [6:0] j_0_reg_121;
reg   [6:0] k_0_reg_132;
wire    ap_CS_fsm_state7;
reg   [13:0] phi_mul_reg_143;
wire   [63:0] zext_ln8_1_fu_212_p1;
wire   [63:0] zext_ln8_3_fu_264_p1;
wire   [63:0] zext_ln8_4_fu_274_p1;
wire   [31:0] zext_ln4_fu_160_p1;
wire   [31:0] zext_ln5_fu_181_p1;
wire   [13:0] add_ln8_1_fu_206_p2;
wire   [31:0] zext_ln6_fu_217_p1;
wire   [0:0] icmp_ln7_2_fu_233_p2;
wire   [0:0] and_ln7_fu_238_p2;
wire   [13:0] zext_ln8_2_fu_254_p1;
wire   [13:0] add_ln8_2_fu_258_p2;
wire   [13:0] add_ln8_3_fu_269_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_98 <= i_reg_311;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_98 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln6_fu_221_p2 == 1'd1))) begin
        j_0_reg_121 <= j_reg_324;
    end else if (((icmp_ln4_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_121 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_132 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        k_0_reg_132 <= k_reg_347;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul1_reg_109 <= add_ln4_reg_303;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_109 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_143 <= 14'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        phi_mul_reg_143 <= add_ln7_reg_356;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_load_reg_371 <= A_q0;
        B_load_reg_376 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        C_addr_reg_339 <= zext_ln8_1_fu_212_p1;
        icmp_ln7_1_reg_329 <= icmp_ln7_1_fu_197_p2;
        zext_ln8_reg_334[6 : 0] <= zext_ln8_fu_202_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_load_reg_386 <= C_q0;
        mul_ln8_reg_381 <= mul_ln8_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln4_reg_303 <= add_ln4_fu_154_p2;
        i_reg_311 <= i_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_221_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln7_reg_356 <= add_ln7_fu_248_p2;
        and_ln7_1_reg_352 <= and_ln7_1_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln7_reg_316 <= icmp_ln7_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_324 <= j_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_347 <= k_fu_227_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == and_ln7_1_reg_352))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln4_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln4_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln4_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln5_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln6_fu_221_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'd0 == and_ln7_1_fu_243_p2) & (icmp_ln6_fu_221_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln8_3_fu_264_p1;

assign B_address0 = zext_ln8_4_fu_274_p1;

assign C_address0 = C_addr_reg_339;

assign C_d0 = (mul_ln8_reg_381 + C_load_reg_386);

assign add_ln4_fu_154_p2 = (phi_mul1_reg_109 + 14'd100);

assign add_ln7_fu_248_p2 = (phi_mul_reg_143 + 14'd100);

assign add_ln8_1_fu_206_p2 = (phi_mul1_reg_109 + zext_ln8_fu_202_p1);

assign add_ln8_2_fu_258_p2 = (phi_mul1_reg_109 + zext_ln8_2_fu_254_p1);

assign add_ln8_3_fu_269_p2 = (phi_mul_reg_143 + zext_ln8_reg_334);

assign and_ln7_1_fu_243_p2 = (icmp_ln7_reg_316 & and_ln7_fu_238_p2);

assign and_ln7_fu_238_p2 = (icmp_ln7_2_fu_233_p2 & icmp_ln7_1_reg_329);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign i_fu_170_p2 = (i_0_reg_98 + 7'd1);

assign icmp_ln4_fu_164_p2 = ((i_0_reg_98 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_185_p2 = ((j_0_reg_121 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_221_p2 = ((k_0_reg_132 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_197_p2 = (($signed(zext_ln5_fu_181_p1) < $signed(nC)) ? 1'b1 : 1'b0);

assign icmp_ln7_2_fu_233_p2 = (($signed(zext_ln6_fu_217_p1) < $signed(nA)) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_176_p2 = (($signed(zext_ln4_fu_160_p1) < $signed(mC)) ? 1'b1 : 1'b0);

assign j_fu_191_p2 = (j_0_reg_121 + 7'd1);

assign k_fu_227_p2 = (k_0_reg_132 + 7'd1);

assign mul_ln8_fu_279_p2 = ($signed(B_load_reg_376) * $signed(A_load_reg_371));

assign zext_ln4_fu_160_p1 = i_0_reg_98;

assign zext_ln5_fu_181_p1 = j_0_reg_121;

assign zext_ln6_fu_217_p1 = k_0_reg_132;

assign zext_ln8_1_fu_212_p1 = add_ln8_1_fu_206_p2;

assign zext_ln8_2_fu_254_p1 = k_0_reg_132;

assign zext_ln8_3_fu_264_p1 = add_ln8_2_fu_258_p2;

assign zext_ln8_4_fu_274_p1 = add_ln8_3_fu_269_p2;

assign zext_ln8_fu_202_p1 = j_0_reg_121;

always @ (posedge ap_clk) begin
    zext_ln8_reg_334[13:7] <= 7'b0000000;
end

endmodule //multiply
