// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "multiply_a11.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic multiply_a11::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic multiply_a11::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> multiply_a11::ap_ST_fsm_state1 = "1";
const sc_lv<7> multiply_a11::ap_ST_fsm_state2 = "10";
const sc_lv<7> multiply_a11::ap_ST_fsm_state3 = "100";
const sc_lv<7> multiply_a11::ap_ST_fsm_state4 = "1000";
const sc_lv<7> multiply_a11::ap_ST_fsm_state5 = "10000";
const sc_lv<7> multiply_a11::ap_ST_fsm_state6 = "100000";
const sc_lv<7> multiply_a11::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> multiply_a11::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> multiply_a11::ap_const_lv32_1 = "1";
const sc_lv<1> multiply_a11::ap_const_lv1_0 = "0";
const sc_lv<32> multiply_a11::ap_const_lv32_2 = "10";
const sc_lv<32> multiply_a11::ap_const_lv32_3 = "11";
const sc_lv<1> multiply_a11::ap_const_lv1_1 = "1";
const sc_lv<32> multiply_a11::ap_const_lv32_4 = "100";
const sc_lv<32> multiply_a11::ap_const_lv32_5 = "101";
const sc_lv<7> multiply_a11::ap_const_lv7_0 = "0000000";
const sc_lv<14> multiply_a11::ap_const_lv14_0 = "00000000000000";
const sc_lv<32> multiply_a11::ap_const_lv32_6 = "110";
const sc_lv<14> multiply_a11::ap_const_lv14_64 = "1100100";
const sc_lv<7> multiply_a11::ap_const_lv7_64 = "1100100";
const sc_lv<7> multiply_a11::ap_const_lv7_1 = "1";
const bool multiply_a11::ap_const_boolean_1 = true;

multiply_a11::multiply_a11(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln8_3_fu_264_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_B_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln8_4_fu_274_p1 );

    SC_METHOD(thread_B_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_address0);
    sensitive << ( C_addr_reg_339 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_C_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_C_d0);
    sensitive << ( mul_ln8_reg_381 );
    sensitive << ( C_load_reg_386 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_C_we0);
    sensitive << ( and_ln7_1_reg_352 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_add_ln4_fu_154_p2);
    sensitive << ( phi_mul1_reg_109 );

    SC_METHOD(thread_add_ln7_fu_248_p2);
    sensitive << ( phi_mul_reg_143 );

    SC_METHOD(thread_add_ln8_1_fu_206_p2);
    sensitive << ( zext_ln8_fu_202_p1 );
    sensitive << ( phi_mul1_reg_109 );

    SC_METHOD(thread_add_ln8_2_fu_258_p2);
    sensitive << ( phi_mul1_reg_109 );
    sensitive << ( zext_ln8_2_fu_254_p1 );

    SC_METHOD(thread_add_ln8_3_fu_269_p2);
    sensitive << ( zext_ln8_reg_334 );
    sensitive << ( phi_mul_reg_143 );

    SC_METHOD(thread_and_ln7_1_fu_243_p2);
    sensitive << ( icmp_ln7_reg_316 );
    sensitive << ( and_ln7_fu_238_p2 );

    SC_METHOD(thread_and_ln7_fu_238_p2);
    sensitive << ( icmp_ln7_1_reg_329 );
    sensitive << ( icmp_ln7_2_fu_233_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln4_fu_164_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln4_fu_164_p2 );

    SC_METHOD(thread_i_fu_170_p2);
    sensitive << ( i_0_reg_98 );

    SC_METHOD(thread_icmp_ln4_fu_164_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_98 );

    SC_METHOD(thread_icmp_ln5_fu_185_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_121 );

    SC_METHOD(thread_icmp_ln6_fu_221_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( k_0_reg_132 );

    SC_METHOD(thread_icmp_ln7_1_fu_197_p2);
    sensitive << ( nC );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln5_fu_185_p2 );
    sensitive << ( zext_ln5_fu_181_p1 );

    SC_METHOD(thread_icmp_ln7_2_fu_233_p2);
    sensitive << ( nA );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln6_fu_221_p2 );
    sensitive << ( zext_ln6_fu_217_p1 );

    SC_METHOD(thread_icmp_ln7_fu_176_p2);
    sensitive << ( mC );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln4_fu_164_p2 );
    sensitive << ( zext_ln4_fu_160_p1 );

    SC_METHOD(thread_j_fu_191_p2);
    sensitive << ( j_0_reg_121 );

    SC_METHOD(thread_k_fu_227_p2);
    sensitive << ( k_0_reg_132 );

    SC_METHOD(thread_mul_ln8_fu_279_p2);
    sensitive << ( A_load_reg_371 );
    sensitive << ( B_load_reg_376 );

    SC_METHOD(thread_zext_ln4_fu_160_p1);
    sensitive << ( i_0_reg_98 );

    SC_METHOD(thread_zext_ln5_fu_181_p1);
    sensitive << ( j_0_reg_121 );

    SC_METHOD(thread_zext_ln6_fu_217_p1);
    sensitive << ( k_0_reg_132 );

    SC_METHOD(thread_zext_ln8_1_fu_212_p1);
    sensitive << ( add_ln8_1_fu_206_p2 );

    SC_METHOD(thread_zext_ln8_2_fu_254_p1);
    sensitive << ( k_0_reg_132 );

    SC_METHOD(thread_zext_ln8_3_fu_264_p1);
    sensitive << ( add_ln8_2_fu_258_p2 );

    SC_METHOD(thread_zext_ln8_4_fu_274_p1);
    sensitive << ( add_ln8_3_fu_269_p2 );

    SC_METHOD(thread_zext_ln8_fu_202_p1);
    sensitive << ( j_0_reg_121 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln4_fu_164_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln5_fu_185_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( and_ln7_1_fu_243_p2 );
    sensitive << ( icmp_ln6_fu_221_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "multiply_a11_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, B_address0, "(port)B_address0");
    sc_trace(mVcdFile, B_ce0, "(port)B_ce0");
    sc_trace(mVcdFile, B_q0, "(port)B_q0");
    sc_trace(mVcdFile, C_address0, "(port)C_address0");
    sc_trace(mVcdFile, C_ce0, "(port)C_ce0");
    sc_trace(mVcdFile, C_we0, "(port)C_we0");
    sc_trace(mVcdFile, C_d0, "(port)C_d0");
    sc_trace(mVcdFile, C_q0, "(port)C_q0");
    sc_trace(mVcdFile, mA, "(port)mA");
    sc_trace(mVcdFile, nA, "(port)nA");
    sc_trace(mVcdFile, mB, "(port)mB");
    sc_trace(mVcdFile, nB, "(port)nB");
    sc_trace(mVcdFile, mC, "(port)mC");
    sc_trace(mVcdFile, nC, "(port)nC");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, add_ln4_fu_154_p2, "add_ln4_fu_154_p2");
    sc_trace(mVcdFile, add_ln4_reg_303, "add_ln4_reg_303");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_170_p2, "i_fu_170_p2");
    sc_trace(mVcdFile, i_reg_311, "i_reg_311");
    sc_trace(mVcdFile, icmp_ln7_fu_176_p2, "icmp_ln7_fu_176_p2");
    sc_trace(mVcdFile, icmp_ln7_reg_316, "icmp_ln7_reg_316");
    sc_trace(mVcdFile, icmp_ln4_fu_164_p2, "icmp_ln4_fu_164_p2");
    sc_trace(mVcdFile, j_fu_191_p2, "j_fu_191_p2");
    sc_trace(mVcdFile, j_reg_324, "j_reg_324");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln7_1_fu_197_p2, "icmp_ln7_1_fu_197_p2");
    sc_trace(mVcdFile, icmp_ln7_1_reg_329, "icmp_ln7_1_reg_329");
    sc_trace(mVcdFile, icmp_ln5_fu_185_p2, "icmp_ln5_fu_185_p2");
    sc_trace(mVcdFile, zext_ln8_fu_202_p1, "zext_ln8_fu_202_p1");
    sc_trace(mVcdFile, zext_ln8_reg_334, "zext_ln8_reg_334");
    sc_trace(mVcdFile, C_addr_reg_339, "C_addr_reg_339");
    sc_trace(mVcdFile, k_fu_227_p2, "k_fu_227_p2");
    sc_trace(mVcdFile, k_reg_347, "k_reg_347");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, and_ln7_1_fu_243_p2, "and_ln7_1_fu_243_p2");
    sc_trace(mVcdFile, and_ln7_1_reg_352, "and_ln7_1_reg_352");
    sc_trace(mVcdFile, icmp_ln6_fu_221_p2, "icmp_ln6_fu_221_p2");
    sc_trace(mVcdFile, add_ln7_fu_248_p2, "add_ln7_fu_248_p2");
    sc_trace(mVcdFile, add_ln7_reg_356, "add_ln7_reg_356");
    sc_trace(mVcdFile, A_load_reg_371, "A_load_reg_371");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, B_load_reg_376, "B_load_reg_376");
    sc_trace(mVcdFile, mul_ln8_fu_279_p2, "mul_ln8_fu_279_p2");
    sc_trace(mVcdFile, mul_ln8_reg_381, "mul_ln8_reg_381");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, C_load_reg_386, "C_load_reg_386");
    sc_trace(mVcdFile, i_0_reg_98, "i_0_reg_98");
    sc_trace(mVcdFile, phi_mul1_reg_109, "phi_mul1_reg_109");
    sc_trace(mVcdFile, j_0_reg_121, "j_0_reg_121");
    sc_trace(mVcdFile, k_0_reg_132, "k_0_reg_132");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, phi_mul_reg_143, "phi_mul_reg_143");
    sc_trace(mVcdFile, zext_ln8_1_fu_212_p1, "zext_ln8_1_fu_212_p1");
    sc_trace(mVcdFile, zext_ln8_3_fu_264_p1, "zext_ln8_3_fu_264_p1");
    sc_trace(mVcdFile, zext_ln8_4_fu_274_p1, "zext_ln8_4_fu_274_p1");
    sc_trace(mVcdFile, zext_ln4_fu_160_p1, "zext_ln4_fu_160_p1");
    sc_trace(mVcdFile, zext_ln5_fu_181_p1, "zext_ln5_fu_181_p1");
    sc_trace(mVcdFile, add_ln8_1_fu_206_p2, "add_ln8_1_fu_206_p2");
    sc_trace(mVcdFile, zext_ln6_fu_217_p1, "zext_ln6_fu_217_p1");
    sc_trace(mVcdFile, icmp_ln7_2_fu_233_p2, "icmp_ln7_2_fu_233_p2");
    sc_trace(mVcdFile, and_ln7_fu_238_p2, "and_ln7_fu_238_p2");
    sc_trace(mVcdFile, zext_ln8_2_fu_254_p1, "zext_ln8_2_fu_254_p1");
    sc_trace(mVcdFile, add_ln8_2_fu_258_p2, "add_ln8_2_fu_258_p2");
    sc_trace(mVcdFile, add_ln8_3_fu_269_p2, "add_ln8_3_fu_269_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("multiply_a11.hdltvin.dat");
    mHdltvoutHandle.open("multiply_a11.hdltvout.dat");
}

multiply_a11::~multiply_a11() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void multiply_a11::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln5_fu_185_p2.read(), ap_const_lv1_1))) {
        i_0_reg_98 = i_reg_311.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_98 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_fu_221_p2.read(), ap_const_lv1_1))) {
        j_0_reg_121 = j_reg_324.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln4_fu_164_p2.read(), ap_const_lv1_0))) {
        j_0_reg_121 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln5_fu_185_p2.read()))) {
        k_0_reg_132 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        k_0_reg_132 = k_reg_347.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln5_fu_185_p2.read(), ap_const_lv1_1))) {
        phi_mul1_reg_109 = add_ln4_reg_303.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul1_reg_109 = ap_const_lv14_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln5_fu_185_p2.read()))) {
        phi_mul_reg_143 = ap_const_lv14_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        phi_mul_reg_143 = add_ln7_reg_356.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        A_load_reg_371 = A_q0.read();
        B_load_reg_376 = B_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln5_fu_185_p2.read()))) {
        C_addr_reg_339 =  (sc_lv<14>) (zext_ln8_1_fu_212_p1.read());
        icmp_ln7_1_reg_329 = icmp_ln7_1_fu_197_p2.read();
        zext_ln8_reg_334 = zext_ln8_fu_202_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_load_reg_386 = C_q0.read();
        mul_ln8_reg_381 = mul_ln8_fu_279_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln4_reg_303 = add_ln4_fu_154_p2.read();
        i_reg_311 = i_fu_170_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln6_fu_221_p2.read()))) {
        add_ln7_reg_356 = add_ln7_fu_248_p2.read();
        and_ln7_1_reg_352 = and_ln7_1_fu_243_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln4_fu_164_p2.read(), ap_const_lv1_0))) {
        icmp_ln7_reg_316 = icmp_ln7_fu_176_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_324 = j_fu_191_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_reg_347 = k_fu_227_p2.read();
    }
}

void multiply_a11::thread_A_address0() {
    A_address0 =  (sc_lv<14>) (zext_ln8_3_fu_264_p1.read());
}

void multiply_a11::thread_A_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void multiply_a11::thread_B_address0() {
    B_address0 =  (sc_lv<14>) (zext_ln8_4_fu_274_p1.read());
}

void multiply_a11::thread_B_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        B_ce0 = ap_const_logic_1;
    } else {
        B_ce0 = ap_const_logic_0;
    }
}

void multiply_a11::thread_C_address0() {
    C_address0 = C_addr_reg_339.read();
}

void multiply_a11::thread_C_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        C_ce0 = ap_const_logic_1;
    } else {
        C_ce0 = ap_const_logic_0;
    }
}

void multiply_a11::thread_C_d0() {
    C_d0 = (!mul_ln8_reg_381.read().is_01() || !C_load_reg_386.read().is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln8_reg_381.read()) + sc_biguint<32>(C_load_reg_386.read()));
}

void multiply_a11::thread_C_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(and_ln7_1_reg_352.read(), ap_const_lv1_1))) {
        C_we0 = ap_const_logic_1;
    } else {
        C_we0 = ap_const_logic_0;
    }
}

void multiply_a11::thread_add_ln4_fu_154_p2() {
    add_ln4_fu_154_p2 = (!phi_mul1_reg_109.read().is_01() || !ap_const_lv14_64.is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul1_reg_109.read()) + sc_biguint<14>(ap_const_lv14_64));
}

void multiply_a11::thread_add_ln7_fu_248_p2() {
    add_ln7_fu_248_p2 = (!phi_mul_reg_143.read().is_01() || !ap_const_lv14_64.is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul_reg_143.read()) + sc_biguint<14>(ap_const_lv14_64));
}

void multiply_a11::thread_add_ln8_1_fu_206_p2() {
    add_ln8_1_fu_206_p2 = (!phi_mul1_reg_109.read().is_01() || !zext_ln8_fu_202_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul1_reg_109.read()) + sc_biguint<14>(zext_ln8_fu_202_p1.read()));
}

void multiply_a11::thread_add_ln8_2_fu_258_p2() {
    add_ln8_2_fu_258_p2 = (!phi_mul1_reg_109.read().is_01() || !zext_ln8_2_fu_254_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul1_reg_109.read()) + sc_biguint<14>(zext_ln8_2_fu_254_p1.read()));
}

void multiply_a11::thread_add_ln8_3_fu_269_p2() {
    add_ln8_3_fu_269_p2 = (!phi_mul_reg_143.read().is_01() || !zext_ln8_reg_334.read().is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul_reg_143.read()) + sc_biguint<14>(zext_ln8_reg_334.read()));
}

void multiply_a11::thread_and_ln7_1_fu_243_p2() {
    and_ln7_1_fu_243_p2 = (and_ln7_fu_238_p2.read() & icmp_ln7_reg_316.read());
}

void multiply_a11::thread_and_ln7_fu_238_p2() {
    and_ln7_fu_238_p2 = (icmp_ln7_1_reg_329.read() & icmp_ln7_2_fu_233_p2.read());
}

void multiply_a11::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void multiply_a11::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void multiply_a11::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void multiply_a11::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void multiply_a11::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void multiply_a11::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void multiply_a11::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void multiply_a11::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln4_fu_164_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void multiply_a11::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void multiply_a11::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln4_fu_164_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void multiply_a11::thread_i_fu_170_p2() {
    i_fu_170_p2 = (!i_0_reg_98.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_98.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void multiply_a11::thread_icmp_ln4_fu_164_p2() {
    icmp_ln4_fu_164_p2 = (!i_0_reg_98.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_98.read() == ap_const_lv7_64);
}

void multiply_a11::thread_icmp_ln5_fu_185_p2() {
    icmp_ln5_fu_185_p2 = (!j_0_reg_121.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_121.read() == ap_const_lv7_64);
}

void multiply_a11::thread_icmp_ln6_fu_221_p2() {
    icmp_ln6_fu_221_p2 = (!k_0_reg_132.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_132.read() == ap_const_lv7_64);
}

void multiply_a11::thread_icmp_ln7_1_fu_197_p2() {
    icmp_ln7_1_fu_197_p2 = (!zext_ln5_fu_181_p1.read().is_01() || !nC.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln5_fu_181_p1.read()) < sc_bigint<32>(nC.read()));
}

void multiply_a11::thread_icmp_ln7_2_fu_233_p2() {
    icmp_ln7_2_fu_233_p2 = (!zext_ln6_fu_217_p1.read().is_01() || !nA.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln6_fu_217_p1.read()) < sc_bigint<32>(nA.read()));
}

void multiply_a11::thread_icmp_ln7_fu_176_p2() {
    icmp_ln7_fu_176_p2 = (!zext_ln4_fu_160_p1.read().is_01() || !mC.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln4_fu_160_p1.read()) < sc_bigint<32>(mC.read()));
}

void multiply_a11::thread_j_fu_191_p2() {
    j_fu_191_p2 = (!j_0_reg_121.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(j_0_reg_121.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void multiply_a11::thread_k_fu_227_p2() {
    k_fu_227_p2 = (!k_0_reg_132.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(k_0_reg_132.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void multiply_a11::thread_mul_ln8_fu_279_p2() {
    mul_ln8_fu_279_p2 = (!B_load_reg_376.read().is_01() || !A_load_reg_371.read().is_01())? sc_lv<32>(): sc_bigint<32>(B_load_reg_376.read()) * sc_bigint<32>(A_load_reg_371.read());
}

void multiply_a11::thread_zext_ln4_fu_160_p1() {
    zext_ln4_fu_160_p1 = esl_zext<32,7>(i_0_reg_98.read());
}

void multiply_a11::thread_zext_ln5_fu_181_p1() {
    zext_ln5_fu_181_p1 = esl_zext<32,7>(j_0_reg_121.read());
}

void multiply_a11::thread_zext_ln6_fu_217_p1() {
    zext_ln6_fu_217_p1 = esl_zext<32,7>(k_0_reg_132.read());
}

void multiply_a11::thread_zext_ln8_1_fu_212_p1() {
    zext_ln8_1_fu_212_p1 = esl_zext<64,14>(add_ln8_1_fu_206_p2.read());
}

void multiply_a11::thread_zext_ln8_2_fu_254_p1() {
    zext_ln8_2_fu_254_p1 = esl_zext<14,7>(k_0_reg_132.read());
}

void multiply_a11::thread_zext_ln8_3_fu_264_p1() {
    zext_ln8_3_fu_264_p1 = esl_zext<64,14>(add_ln8_2_fu_258_p2.read());
}

void multiply_a11::thread_zext_ln8_4_fu_274_p1() {
    zext_ln8_4_fu_274_p1 = esl_zext<64,14>(add_ln8_3_fu_269_p2.read());
}

void multiply_a11::thread_zext_ln8_fu_202_p1() {
    zext_ln8_fu_202_p1 = esl_zext<14,7>(j_0_reg_121.read());
}

void multiply_a11::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln4_fu_164_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln5_fu_185_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln6_fu_221_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln6_fu_221_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, and_ln7_1_fu_243_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void multiply_a11::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_address0\" :  \"" << B_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_ce0\" :  \"" << B_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_q0\" :  \"" << B_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_address0\" :  \"" << C_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_ce0\" :  \"" << C_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_we0\" :  \"" << C_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_d0\" :  \"" << C_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"C_q0\" :  \"" << C_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mA\" :  \"" << mA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nA\" :  \"" << nA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mB\" :  \"" << mB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nB\" :  \"" << nB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mC\" :  \"" << mC.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nC\" :  \"" << nC.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

