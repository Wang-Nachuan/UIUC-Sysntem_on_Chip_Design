// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="multiply_a23,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=2270201,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=426,HLS_SYN_LUT=709,HLS_VERSION=2019_1}" *)

module multiply_a23 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        mA,
        nA,
        mB,
        nB,
        mC,
        nC
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [13:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [13:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
input  [31:0] mA;
input  [31:0] nA;
input  [31:0] mB;
input  [31:0] nB;
input  [31:0] mC;
input  [31:0] nC;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] A_address0;
reg A_ce0;
reg[13:0] B_address0;
reg B_ce0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [31:0] reg_221;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state14;
reg  signed [31:0] reg_225;
wire   [13:0] add_ln4_fu_240_p2;
reg   [13:0] add_ln4_reg_556;
wire    ap_CS_fsm_state2;
wire   [6:0] i_fu_256_p2;
reg   [6:0] i_reg_564;
wire   [0:0] icmp_ln13_fu_262_p2;
reg   [0:0] icmp_ln13_reg_569;
wire   [0:0] icmp_ln4_fu_250_p2;
wire   [6:0] j_fu_277_p2;
reg   [6:0] j_reg_577;
wire    ap_CS_fsm_state3;
wire   [0:0] and_ln13_fu_288_p2;
reg   [0:0] and_ln13_reg_582;
wire   [0:0] icmp_ln8_fu_271_p2;
wire   [13:0] zext_ln14_fu_293_p1;
reg   [13:0] zext_ln14_reg_590;
reg   [13:0] C_addr_1_reg_598;
wire   [0:0] and_ln13_1_fu_323_p2;
reg   [0:0] and_ln13_1_reg_606;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln9_fu_312_p2;
wire   [31:0] grp_fu_229_p2;
reg   [31:0] mul_ln14_reg_620;
wire    ap_CS_fsm_state6;
reg   [31:0] C_load_reg_625;
wire   [0:0] and_ln13_2_fu_371_p2;
reg   [0:0] and_ln13_2_reg_630;
wire    ap_CS_fsm_state7;
reg   [31:0] mul_ln14_1_reg_644;
wire    ap_CS_fsm_state9;
reg   [31:0] C_load_1_reg_649;
wire   [0:0] and_ln13_3_fu_419_p2;
reg   [0:0] and_ln13_3_reg_654;
wire    ap_CS_fsm_state10;
reg   [31:0] mul_ln14_2_reg_668;
wire    ap_CS_fsm_state12;
reg   [31:0] C_load_2_reg_673;
wire   [0:0] and_ln13_4_fu_467_p2;
reg   [0:0] and_ln13_4_reg_678;
wire    ap_CS_fsm_state13;
reg   [31:0] mul_ln14_3_reg_692;
wire    ap_CS_fsm_state15;
reg   [31:0] C_load_3_reg_697;
wire   [6:0] add_ln9_fu_500_p2;
wire    ap_CS_fsm_state16;
reg   [6:0] i_0_reg_175;
reg   [13:0] phi_mul_reg_186;
reg   [6:0] j_0_reg_198;
reg   [6:0] k_0_0_reg_209;
wire   [63:0] zext_ln14_1_fu_303_p1;
wire   [63:0] zext_ln14_4_fu_342_p1;
wire   [63:0] zext_ln14_5_fu_347_p1;
wire   [63:0] zext_ln14_8_fu_390_p1;
wire   [63:0] zext_ln14_9_fu_395_p1;
wire   [63:0] zext_ln14_12_fu_438_p1;
wire   [63:0] zext_ln14_13_fu_443_p1;
wire   [63:0] zext_ln14_16_fu_486_p1;
wire   [63:0] zext_ln14_17_fu_491_p1;
wire   [31:0] add_ln14_fu_351_p2;
wire   [31:0] add_ln14_1_fu_399_p2;
wire   [31:0] add_ln14_2_fu_447_p2;
wire   [31:0] add_ln14_3_fu_495_p2;
wire   [31:0] zext_ln4_fu_246_p1;
wire   [31:0] zext_ln8_fu_267_p1;
wire   [0:0] icmp_ln13_1_fu_283_p2;
wire   [13:0] add_ln14_4_fu_297_p2;
wire   [31:0] k_0_0_cast_fu_308_p1;
wire   [0:0] icmp_ln13_2_fu_318_p2;
wire   [13:0] zext_ln14_3_fu_332_p1;
wire   [13:0] add_ln14_5_fu_336_p2;
wire   [13:0] grp_fu_506_p3;
wire   [6:0] or_ln9_fu_356_p2;
wire   [31:0] zext_ln9_fu_362_p1;
wire   [0:0] icmp_ln13_3_fu_366_p2;
wire   [13:0] zext_ln14_7_fu_380_p1;
wire   [13:0] add_ln14_7_fu_384_p2;
wire   [13:0] grp_fu_514_p3;
wire   [6:0] or_ln9_1_fu_404_p2;
wire   [31:0] zext_ln9_1_fu_410_p1;
wire   [0:0] icmp_ln13_4_fu_414_p2;
wire   [13:0] zext_ln14_11_fu_428_p1;
wire   [13:0] add_ln14_9_fu_432_p2;
wire   [13:0] grp_fu_522_p3;
wire   [6:0] or_ln9_2_fu_452_p2;
wire   [31:0] zext_ln9_2_fu_458_p1;
wire   [0:0] icmp_ln13_5_fu_462_p2;
wire   [13:0] zext_ln14_15_fu_476_p1;
wire   [13:0] add_ln14_11_fu_480_p2;
wire   [13:0] grp_fu_530_p3;
wire   [6:0] grp_fu_506_p0;
wire   [7:0] grp_fu_506_p1;
wire   [6:0] grp_fu_506_p2;
wire   [6:0] grp_fu_514_p0;
wire   [7:0] grp_fu_514_p1;
wire   [6:0] grp_fu_514_p2;
wire   [6:0] grp_fu_522_p0;
wire   [7:0] grp_fu_522_p1;
wire   [6:0] grp_fu_522_p2;
wire   [6:0] grp_fu_530_p0;
wire   [7:0] grp_fu_530_p1;
wire   [6:0] grp_fu_530_p2;
reg   [15:0] ap_NS_fsm;
wire   [13:0] grp_fu_506_p00;
wire   [13:0] grp_fu_514_p00;
wire   [13:0] grp_fu_522_p00;
wire   [13:0] grp_fu_530_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

multiply_a23_mac_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
multiply_a23_mac_bkb_U1(
    .din0(grp_fu_506_p0),
    .din1(grp_fu_506_p1),
    .din2(grp_fu_506_p2),
    .dout(grp_fu_506_p3)
);

multiply_a23_mac_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
multiply_a23_mac_bkb_U2(
    .din0(grp_fu_514_p0),
    .din1(grp_fu_514_p1),
    .din2(grp_fu_514_p2),
    .dout(grp_fu_514_p3)
);

multiply_a23_mac_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
multiply_a23_mac_bkb_U3(
    .din0(grp_fu_522_p0),
    .din1(grp_fu_522_p1),
    .din2(grp_fu_522_p2),
    .dout(grp_fu_522_p3)
);

multiply_a23_mac_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
multiply_a23_mac_bkb_U4(
    .din0(grp_fu_530_p0),
    .din1(grp_fu_530_p1),
    .din2(grp_fu_530_p2),
    .dout(grp_fu_530_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln8_fu_271_p2 == 1'd1))) begin
        i_0_reg_175 <= i_reg_564;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_175 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln9_fu_312_p2 == 1'd1))) begin
        j_0_reg_198 <= j_reg_577;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4_fu_250_p2 == 1'd0))) begin
        j_0_reg_198 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln8_fu_271_p2 == 1'd0))) begin
        k_0_0_reg_209 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        k_0_0_reg_209 <= add_ln9_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln8_fu_271_p2 == 1'd1))) begin
        phi_mul_reg_186 <= add_ln4_reg_556;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_186 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln8_fu_271_p2 == 1'd0))) begin
        C_addr_1_reg_598 <= zext_ln14_1_fu_303_p1;
        and_ln13_reg_582 <= and_ln13_fu_288_p2;
        zext_ln14_reg_590[6 : 0] <= zext_ln14_fu_293_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        C_load_1_reg_649 <= C_q0;
        mul_ln14_1_reg_644 <= grp_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        C_load_2_reg_673 <= C_q0;
        mul_ln14_2_reg_668 <= grp_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        C_load_3_reg_697 <= C_q0;
        mul_ln14_3_reg_692 <= grp_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_load_reg_625 <= C_q0;
        mul_ln14_reg_620 <= grp_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln4_reg_556 <= add_ln4_fu_240_p2;
        i_reg_564 <= i_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln9_fu_312_p2 == 1'd0))) begin
        and_ln13_1_reg_606 <= and_ln13_1_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        and_ln13_2_reg_630 <= and_ln13_2_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        and_ln13_3_reg_654 <= and_ln13_3_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        and_ln13_4_reg_678 <= and_ln13_4_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4_fu_250_p2 == 1'd0))) begin
        icmp_ln13_reg_569 <= icmp_ln13_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_577 <= j_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_221 <= A_q0;
        reg_225 <= B_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        A_address0 = zext_ln14_16_fu_486_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address0 = zext_ln14_12_fu_438_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address0 = zext_ln14_8_fu_390_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = zext_ln14_4_fu_342_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        B_address0 = zext_ln14_17_fu_491_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        B_address0 = zext_ln14_13_fu_443_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        B_address0 = zext_ln14_9_fu_395_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address0 = zext_ln14_5_fu_347_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        C_d0 = add_ln14_3_fu_495_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        C_d0 = add_ln14_2_fu_447_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        C_d0 = add_ln14_1_fu_399_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        C_d0 = add_ln14_fu_351_p2;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln13_4_reg_678)) | ((1'b1 == ap_CS_fsm_state13) & (1'd1 == and_ln13_3_reg_654)) | ((1'b1 == ap_CS_fsm_state10) & (1'd1 == and_ln13_2_reg_630)) | ((1'b1 == ap_CS_fsm_state7) & (1'd1 == and_ln13_1_reg_606)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4_fu_250_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4_fu_250_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4_fu_250_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln8_fu_271_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln9_fu_312_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln9_fu_312_p2 == 1'd0) & (1'd0 == and_ln13_1_fu_323_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == and_ln13_2_fu_371_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == and_ln13_3_fu_419_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == and_ln13_4_fu_467_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_address0 = C_addr_1_reg_598;

assign add_ln14_11_fu_480_p2 = (phi_mul_reg_186 + zext_ln14_15_fu_476_p1);

assign add_ln14_1_fu_399_p2 = (mul_ln14_1_reg_644 + C_load_1_reg_649);

assign add_ln14_2_fu_447_p2 = (mul_ln14_2_reg_668 + C_load_2_reg_673);

assign add_ln14_3_fu_495_p2 = (mul_ln14_3_reg_692 + C_load_3_reg_697);

assign add_ln14_4_fu_297_p2 = (phi_mul_reg_186 + zext_ln14_fu_293_p1);

assign add_ln14_5_fu_336_p2 = (phi_mul_reg_186 + zext_ln14_3_fu_332_p1);

assign add_ln14_7_fu_384_p2 = (phi_mul_reg_186 + zext_ln14_7_fu_380_p1);

assign add_ln14_9_fu_432_p2 = (phi_mul_reg_186 + zext_ln14_11_fu_428_p1);

assign add_ln14_fu_351_p2 = (mul_ln14_reg_620 + C_load_reg_625);

assign add_ln4_fu_240_p2 = (phi_mul_reg_186 + 14'd100);

assign add_ln9_fu_500_p2 = (k_0_0_reg_209 + 7'd4);

assign and_ln13_1_fu_323_p2 = (icmp_ln13_2_fu_318_p2 & and_ln13_reg_582);

assign and_ln13_2_fu_371_p2 = (icmp_ln13_3_fu_366_p2 & and_ln13_reg_582);

assign and_ln13_3_fu_419_p2 = (icmp_ln13_4_fu_414_p2 & and_ln13_reg_582);

assign and_ln13_4_fu_467_p2 = (icmp_ln13_5_fu_462_p2 & and_ln13_reg_582);

assign and_ln13_fu_288_p2 = (icmp_ln13_reg_569 & icmp_ln13_1_fu_283_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_229_p2 = ($signed(reg_225) * $signed(reg_221));

assign grp_fu_506_p0 = grp_fu_506_p00;

assign grp_fu_506_p00 = k_0_0_reg_209;

assign grp_fu_506_p1 = 14'd100;

assign grp_fu_506_p2 = zext_ln14_reg_590;

assign grp_fu_514_p0 = grp_fu_514_p00;

assign grp_fu_514_p00 = or_ln9_fu_356_p2;

assign grp_fu_514_p1 = 14'd100;

assign grp_fu_514_p2 = zext_ln14_reg_590;

assign grp_fu_522_p0 = grp_fu_522_p00;

assign grp_fu_522_p00 = or_ln9_1_fu_404_p2;

assign grp_fu_522_p1 = 14'd100;

assign grp_fu_522_p2 = zext_ln14_reg_590;

assign grp_fu_530_p0 = grp_fu_530_p00;

assign grp_fu_530_p00 = or_ln9_2_fu_452_p2;

assign grp_fu_530_p1 = 14'd100;

assign grp_fu_530_p2 = zext_ln14_reg_590;

assign i_fu_256_p2 = (i_0_reg_175 + 7'd1);

assign icmp_ln13_1_fu_283_p2 = (($signed(zext_ln8_fu_267_p1) < $signed(nC)) ? 1'b1 : 1'b0);

assign icmp_ln13_2_fu_318_p2 = (($signed(k_0_0_cast_fu_308_p1) < $signed(nA)) ? 1'b1 : 1'b0);

assign icmp_ln13_3_fu_366_p2 = (($signed(zext_ln9_fu_362_p1) < $signed(nA)) ? 1'b1 : 1'b0);

assign icmp_ln13_4_fu_414_p2 = (($signed(zext_ln9_1_fu_410_p1) < $signed(nA)) ? 1'b1 : 1'b0);

assign icmp_ln13_5_fu_462_p2 = (($signed(zext_ln9_2_fu_458_p1) < $signed(nA)) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_262_p2 = (($signed(zext_ln4_fu_246_p1) < $signed(mC)) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_250_p2 = ((i_0_reg_175 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_271_p2 = ((j_0_reg_198 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_312_p2 = ((k_0_0_reg_209 == 7'd100) ? 1'b1 : 1'b0);

assign j_fu_277_p2 = (j_0_reg_198 + 7'd1);

assign k_0_0_cast_fu_308_p1 = k_0_0_reg_209;

assign or_ln9_1_fu_404_p2 = (k_0_0_reg_209 | 7'd2);

assign or_ln9_2_fu_452_p2 = (k_0_0_reg_209 | 7'd3);

assign or_ln9_fu_356_p2 = (k_0_0_reg_209 | 7'd1);

assign zext_ln14_11_fu_428_p1 = or_ln9_1_fu_404_p2;

assign zext_ln14_12_fu_438_p1 = add_ln14_9_fu_432_p2;

assign zext_ln14_13_fu_443_p1 = grp_fu_522_p3;

assign zext_ln14_15_fu_476_p1 = or_ln9_2_fu_452_p2;

assign zext_ln14_16_fu_486_p1 = add_ln14_11_fu_480_p2;

assign zext_ln14_17_fu_491_p1 = grp_fu_530_p3;

assign zext_ln14_1_fu_303_p1 = add_ln14_4_fu_297_p2;

assign zext_ln14_3_fu_332_p1 = k_0_0_reg_209;

assign zext_ln14_4_fu_342_p1 = add_ln14_5_fu_336_p2;

assign zext_ln14_5_fu_347_p1 = grp_fu_506_p3;

assign zext_ln14_7_fu_380_p1 = or_ln9_fu_356_p2;

assign zext_ln14_8_fu_390_p1 = add_ln14_7_fu_384_p2;

assign zext_ln14_9_fu_395_p1 = grp_fu_514_p3;

assign zext_ln14_fu_293_p1 = j_0_reg_198;

assign zext_ln4_fu_246_p1 = i_0_reg_175;

assign zext_ln8_fu_267_p1 = j_0_reg_198;

assign zext_ln9_1_fu_410_p1 = or_ln9_1_fu_404_p2;

assign zext_ln9_2_fu_458_p1 = or_ln9_2_fu_452_p2;

assign zext_ln9_fu_362_p1 = or_ln9_fu_356_p2;

always @ (posedge ap_clk) begin
    zext_ln14_reg_590[13:7] <= 7'b0000000;
end

endmodule //multiply_a23
